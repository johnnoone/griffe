{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Griffe","text":"<p>  [![ci](https://github.com/mkdocstrings/griffe/workflows/ci/badge.svg)](https://github.com/mkdocstrings/griffe/actions?query=workflow%3Aci) [![documentation](https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat)](https://mkdocstrings.github.io/griffe/) [![pypi version](https://img.shields.io/pypi/v/griffe.svg)](https://pypi.org/project/griffe/) [![gitpod](https://img.shields.io/badge/gitpod-workspace-blue.svg?style=flat)](https://gitpod.io/#https://github.com/mkdocstrings/griffe) [![gitter](https://badges.gitter.im/join%20chat.svg)](https://gitter.im/mkdocstrings/griffe)  </p> <p></p> <p>Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API.</p> <p>Griffe, pronounced \"grif\" (<code>/\u0261\u0281if/</code>), is a french word that means \"claw\", but also \"signature\" in a familiar way. \"On reconna\u00eet bien l\u00e0 sa griffe.\"</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>pip install griffe\n</code></pre></p> <p>With <code>pipx</code>: <pre><code>python3.8 -m pip install --user pipx\npipx install griffe\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>On the command line, pass the names of packages to the <code>griffe dump</code> command:</p> <pre><code>$ griffe dump httpx fastapi\n{\n  \"httpx\": {\n    \"name\": \"httpx\",\n    ...\n  },\n  \"fastapi\": {\n    \"name\": \"fastapi\",\n    ...\n  }\n}\n</code></pre> <p>See the Dumping data section for more examples.</p> <p>Or pass a relative path to the <code>griffe check</code> command:</p> <pre><code>$ griffe check mypackage --verbose\nmypackage/mymodule.py:10: MyClass.mymethod(myparam):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n</code></pre> <p>For <code>src</code> layouts:</p> <pre><code>$ griffe check --search src mypackage --verbose\nsrc/mypackage/mymodule.py:10: MyClass.mymethod(myparam):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n</code></pre> <p>See the API breakage section for more examples.</p> <p>With Python, loading a package:</p> <pre><code>import griffe\n\nfastapi = griffe.load(\"fastapi\")\n</code></pre> <p>Finding breaking changes:</p> <pre><code>import griffe\n\nprevious = griffe.load_git(\"mypackage\", ref=\"0.2.0\")\ncurrent = griffe.load(\"mypackage\")\n\nfor breakage in griffe.find_breaking_changes(previous, current):\n    ...\n</code></pre> <p>See the Loading data section for more examples.</p>"},{"location":"#todo","title":"Todo","text":"<ul> <li>Extensions<ul> <li>Post-processing extensions</li> <li>Third-party libraries we could provide support for:<ul> <li>Django support</li> <li>Marshmallow support</li> <li>Pydantic support</li> </ul> </li> </ul> </li> <li>Docstrings parsers<ul> <li>epydoc</li> <li>New Markdown-based format? For graceful degradation</li> </ul> </li> <li>Serializer:<ul> <li>Flat JSON</li> </ul> </li> <li>API diff:<ul> <li> Mechanism to cache APIs? Should users version them, or store them somewhere (docs)?</li> <li> Ability to return warnings (things that are not backward-compatibility-friendly)</li> <li>List of things to consider for warnings<ul> <li>Multiple positional-or-keyword parameters</li> <li>Public imports in public modules</li> <li>Private things made public through imports/assignments</li> <li>Too many public things? Generally annoying. Configuration?</li> </ul> </li> <li> Ability to compare two APIs to return breaking changes</li> <li>List of things to consider for breaking changes<ul> <li> Changed position of positional only parameter</li> <li> Changed position of positional or keyword parameter</li> <li> Changed type of parameter</li> <li> Changed type of public module attribute</li> <li> Changed return type of a public function/method</li> <li> Added parameter without a default value</li> <li> Removed keyword-only parameter without a default value, without **kwargs to swallow it</li> <li> Removed positional-only parameter without a default value, without *args to swallow it</li> <li> Removed positional-or_keyword argument without a default value, without args and *kwargs to swallow it</li> <li> Removed public module/class/function/method/attribute</li> <li> All of the previous even when parent is private (could be publicly imported or assigned somewhere),     and later be smarter: public assign/import makes private things public!</li> <li> Inheritance: removed, added or changed base that changes MRO</li> </ul> </li> </ul> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0364-2023-09-28","title":"0.36.4 - 2023-09-28","text":"<p>Compare with 0.36.3</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix visiting relative imports in non-init modules (c1138c3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0363-2023-09-28","title":"0.36.3 - 2023-09-28","text":"<p>Compare with 0.36.2</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix parsing of choices in Numpy parameters (5f2d997 by Timoth\u00e9e Mazzucotelli). Issue #212</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Add <code>repr</code> methods to function parameters (9442234 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0362-2023-09-10","title":"0.36.2 - 2023-09-10","text":"<p>Compare with 0.36.1</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix warnings for docstrings in builtin modules (6ba3e04 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix dumping <code>filepath</code> to a dict when it is a list (066a4a7 by davfsa). PR #207</li> </ul>"},{"location":"changelog/#0361-2023-09-04","title":"0.36.1 - 2023-09-04","text":"<p>Compare with 0.36.0</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix iterating non-flat expressions (some nodes were skipped) (3249155 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0360-2023-09-01","title":"0.36.0 - 2023-09-01","text":"<p>Compare with 0.35.2</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add option to read return type of properties in their summary (Google-style) (096970f by Timoth\u00e9e Mazzucotelli). Issue #137, PR #206</li> <li>Add option to make parentheses around the type of returned values optional (Google-style) (b0620f8 by Timoth\u00e9e Mazzucotelli). Issue #137</li> <li>Get class parameters from parent's <code>__init__</code> method (e8a9fdc by Timoth\u00e9e Mazzucotelli). Issue #205</li> </ul>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Use all members (declared and inherited) when checking for breakages, avoid false-positives when a member of a class is moved into a parent class (1c4340b by Timoth\u00e9e Mazzucotelli). Issue #203</li> <li>Skip early submodules with dots in their path (5e81b8a by Timoth\u00e9e Mazzucotelli). Issue #185</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Allow iterating on expressions in both flat and nested ways (3957fa7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0352-2023-08-27","title":"0.35.2 - 2023-08-27","text":"<p>Compare with 0.35.1</p>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Be more strict when parsing sections in Google docstrings (6a8a228 by Timoth\u00e9e Mazzucotelli). Issue #204</li> </ul>"},{"location":"changelog/#0351-2023-08-26","title":"0.35.1 - 2023-08-26","text":"<p>Compare with 0.35.0</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Preserve inherited attribute on alias inherited members (1e19e7b by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#102</li> </ul>"},{"location":"changelog/#0350-2023-08-24","title":"0.35.0 - 2023-08-24","text":"<p>Compare with 0.34.0</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add an <code>is_public</code> helper method to guess if an object is public (b823639 by Timoth\u00e9e Mazzucotelli).</li> <li>Add option to Google parser allowing to parse Returns sections with or without multiple items (65fee70 by Antoine Dechaume). PR #196</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Allow passing <code>warn_unknown_params</code> option to Google and Numpy parsers (5bf0746 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Preserve alias members path by re-aliasing members instead of returning target's members (d400cb1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0340-2023-08-20","title":"0.34.0 - 2023-08-20","text":"<p>Compare with 0.33.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Allow checking if docstring section is empty or not with <code>if section</code> (f6cf559 by Timoth\u00e9e Mazzucotelli).</li> <li>Implement Functions (or Methods), Classes and Modules docstring sections (929e615 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing a docstring parser name instead of its enumeration value (ce59b7d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Explicit checks for subprocess runs (cc3ca2e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0330-2023-08-16","title":"0.33.0 - 2023-08-16","text":"<p>Compare with 0.32.3</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Removed <code>griffe.expressions.Expression</code> in favor of <code>griffe.expressions.Expr</code> and subclasses</li> <li>Removed <code>griffe.expressions.Name</code> in favor of <code>griffe.expressions.ExprName</code></li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add <code>-V</code>, <code>--version</code> CLI flag to show version (a41515f by jgart). Issue #186, PR #187, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Improve expressions (66c8ad5 and 0fe8f91 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0323-2023-07-17","title":"0.32.3 - 2023-07-17","text":"<p>Compare with 0.32.2</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix detecting whether an object should be an alias during inspection (6a63b37 by Timoth\u00e9e Mazzucotelli). Issue #180</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Improve log message when trying to stubs-merge objects of different kinds (d34a3ba by Timoth\u00e9e Mazzucotelli).</li> <li>De-duplicate stubs merging log message (cedc062 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0322-2023-07-17","title":"0.32.2 - 2023-07-17","text":"<p>Compare with 0.32.1</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Keep parentheses around tuples, except within subscripts (df6e636 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#88</li> </ul>"},{"location":"changelog/#0321-2023-07-15","title":"0.32.1 - 2023-07-15","text":"<p>Compare with 0.32.0</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Fix aliases for direct nested imports (e9867f7 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#32</li> </ul>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Simplify AST imports, stop using deprecated code from <code>ast</code> (21d5832 by Timoth\u00e9e Mazzucotelli). Issue #179</li> </ul>"},{"location":"changelog/#0320-2023-07-13","title":"0.32.0 - 2023-07-13","text":"<p>Compare with 0.31.0</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<ul> <li>Classes <code>InspectorExtension</code>     and <code>VisitorExtension</code>     are deprecated in favor of <code>Extension</code>.     As a side-effect, the <code>hybrid</code> extension     is also deprecated. See how to use and write extensions.</li> </ul>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>Module <code>griffe.agents.base</code> was removed</li> <li>Module <code>griffe.docstrings.markdown</code> was removed</li> <li>Class <code>ASTNode</code> was removed</li> <li>Class <code>BaseInspector</code> was removed</li> <li>Class <code>BaseVisitor</code> was removed</li> <li>Fucntion <code>get_parameter_default</code> was removed</li> <li>Function <code>load_extension</code> was removed (made private)</li> <li>Function <code>patch_ast</code> was removed</li> <li>Function <code>tmp_worktree</code> was removed (made private)</li> <li>Type <code>Extension</code> is now a class</li> </ul>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Numpy parser: handle return section items with just type, or no name and no type (bdec37d by Michael Chow). Issue #173, PR #174, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> <li>Rework extension system (dea4c83 by Timoth\u00e9e Mazzucotelli).</li> <li>Parse attribute values, parameter defaults and decorators as expressions (7b653b3 by Timoth\u00e9e Mazzucotelli).</li> <li>Add loader option to avoid storing source code, reducing memory footprint (d592edf by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>extra</code> attribute to objects (707a348 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Numpy-style: don't strip spaces from the left of indented lines (f13fc0a by Timoth\u00e9e Mazzucotelli). Discussion #587</li> <li>Fix relative paths for old versions when checking API (96fd45b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Don't store source when dumping as JSON (d7f314a by Timoth\u00e9e Mazzucotelli).</li> <li>Stop caching properties on Object methods (15bdd74 by Timoth\u00e9e Mazzucotelli).</li> <li>Stop patching AST, use functions instead (7302f17 by Timoth\u00e9e Mazzucotelli). Issue #171</li> </ul>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Privatize/remove objects (fdeb16f by Timoth\u00e9e Mazzucotelli).</li> <li>Document public objects with <code>__all__</code> (db0e0e3 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove base visitor and inspector (bc446e4 by Timoth\u00e9e Mazzucotelli).</li> <li>Auto-register module in collection within loading helpers (591bacc by Timoth\u00e9e Mazzucotelli). Issue #177</li> </ul>"},{"location":"changelog/#0310-2023-07-04","title":"0.31.0 - 2023-07-04","text":"<p>Compare with 0.30.1</p>"},{"location":"changelog/#breaking-changes_2","title":"Breaking Changes","text":"<ul> <li>Drop support for Python 3.7</li> <li>API changes:<ul> <li><code>GriffeLoader.resolve_aliases(only_exported)</code>: Deprecated parameter was removed and replaced by <code>implicit</code> (inverse semantics)</li> <li><code>GriffeLoader.resolve_aliases(only_known_modules)</code>: Deprecated parameter was removed and replaced by <code>external</code> (inverse semantics)</li> <li><code>LinesCollection.tokens</code>: Public object was removed (Python 3.7)</li> <li><code>ASTNode.end_lineno</code>: Public object was removed (Python 3.7)</li> <li><code>griffe.agents.extensions</code> Deprecated module was removed and replaced by <code>griffe.extensions</code></li> </ul> </li> </ul>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Add <code>--color</code>, <code>--no-color</code> options to check subcommand (eac783c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Report removed public modules (68906cb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Improve check output (6b0a1f0 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove deprecated <code>griffe.agents.extensions</code> module (b555c78 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove deprecated parameters from loader's <code>resolve_aliases</code> method (dd98acd by Timoth\u00e9e Mazzucotelli).</li> <li>Drop Python 3.7 support (e4be30a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0301-2023-07-02","title":"0.30.1 - 2023-07-02","text":"<p>Compare with 0.30.0</p>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Prevent duplicate yields of breaking changes (9edef90 by Timoth\u00e9e Mazzucotelli). Issue #162</li> <li>Prevent alias resolution errors when checking for API breaking changes (93c964a by Timoth\u00e9e Mazzucotelli). Issue #145</li> <li>Handle Git errors when checking for API breaking changes (f9e8ba3 by Timoth\u00e9e Mazzucotelli). Issue #144</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>Force remove worktree branch when done checking (45332ba by Timoth\u00e9e Mazzucotelli).</li> <li>Change command to obtain latest tag (f70f630 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0300-2023-06-30","title":"0.30.0 - 2023-06-30","text":"<p>Compare with 0.29.1</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add <code>allow_section_blank_line</code> option to the Numpy parser (245845e by Michael Chow). Issue #167, PR #168</li> <li>Support inheritance (08bbe09 by Timoth\u00e9e Mazzucotelli). PR #170</li> </ul>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Handle semi-colons in pth files (e2ec661 by Michael Chow). Issue #172, PR #175</li> </ul>"},{"location":"changelog/#code-refactoring_11","title":"Code Refactoring","text":"<ul> <li>Split members API in two parts: producer and consumer (2269449 by Timoth\u00e9e Mazzucotelli). PR #170</li> </ul>"},{"location":"changelog/#0291-2023-06-19","title":"0.29.1 - 2023-06-19","text":"<p>Compare with 0.29.0</p>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fix detection of optional and default in Numpydoc-style parameters (3509106 by Timoth\u00e9e Mazzucotelli). Issue #165</li> <li>Fallback to string literal when parsing fails with syntax error (53827c8 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#80</li> <li>Don't mutate finder's import paths (a9e025a by Timoth\u00e9e Mazzucotelli).</li> <li>Respect <code>external</code> when expanding wildcards (8ef92c8 by Timoth\u00e9e Mazzucotelli).</li> <li>Extract actual type for yielded/received values (3ea37ba by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#75</li> </ul>"},{"location":"changelog/#code-refactoring_12","title":"Code Refactoring","text":"<ul> <li>Improve error handling when importing a module (a732e21 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve tests helpers (accept all visit/inspection parameters) (6da5869 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing a modules collection to the inspector, for consistency with the visitor (5f73a28 by Timoth\u00e9e Mazzucotelli).</li> <li>Always add import path of module to inspect when it has a file path (4021e6f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0290-2023-05-26","title":"0.29.0 - 2023-05-26","text":"<p>Compare with 0.28.2</p>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Provide test helpers and pytest fixtures (611ed58 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0282-2023-05-24","title":"0.28.2 - 2023-05-24","text":"<p>Compare with 0.28.1</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Correctly resolve full expressions (fa57f4f by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/autorefs#23</li> <li>Use <code>full</code> attribute instead of <code>canonical</code> for expressions (4338ccc by Michael Chow). Issue #163, PR #164</li> </ul>"},{"location":"changelog/#0281-2023-05-22","title":"0.28.1 - 2023-05-22","text":"<p>Compare with 0.28.0</p>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Return docstring warnings as warnings, not attributes (7bd51ba by Matthew Anderson). PR #161</li> </ul>"},{"location":"changelog/#code-refactoring_13","title":"Code Refactoring","text":"<ul> <li>Refactor AST nodes parsers (7e53127 by Timoth\u00e9e Mazzucotelli). Issue #160</li> <li>Full expressions use canonical names (65c7184 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0280-2023-05-17","title":"0.28.0 - 2023-05-17","text":"<p>Compare with 0.27.5</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Support scikit-build-core editable modules (partially) (eb64779 by Timoth\u00e9e Mazzucotelli). Issue #154</li> </ul>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Parse complex, stringified annotations (f743616 by Timoth\u00e9e Mazzucotelli). Issue #159</li> </ul>"},{"location":"changelog/#0275-2023-05-12","title":"0.27.5 - 2023-05-12","text":"<p>Compare with 0.27.4</p>"},{"location":"changelog/#code-refactoring_14","title":"Code Refactoring","text":"<ul> <li>Represent function using their names when inspecting default values (9116c1f by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#180</li> </ul>"},{"location":"changelog/#0274-2023-05-10","title":"0.27.4 - 2023-05-10","text":"<p>Compare with 0.27.3</p>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Don't recurse through targets, get directly to final target and handle alias-related errors (c5bc197 by Timoth\u00e9e Mazzucotelli). Issue #155</li> </ul>"},{"location":"changelog/#code-refactoring_15","title":"Code Refactoring","text":"<ul> <li>Follow <code>.pth</code> files to extend search paths with editable modules (79bf724 by Timoth\u00e9e Mazzucotelli). Issue #154</li> <li>Add default values to <code>_load_packages</code> helper (f104c20 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0273-2023-05-05","title":"0.27.3 - 2023-05-05","text":"<p>Compare with 0.27.2</p>"},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Allow setting doctring through alias (2e0f553 by Timoth\u00e9e Mazzucotelli).</li> <li>Prevent infinite recursion (0e98546 by Timoth\u00e9e Mazzucotelli). Issue #155</li> </ul>"},{"location":"changelog/#0272-2023-05-03","title":"0.27.2 - 2023-05-03","text":"<p>Compare with 0.27.1</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Remove async extra (aiofiles) (70d9b93 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Support walrus operator (bf721f4 by Timoth\u00e9e Mazzucotelli). Issue #152</li> <li>Respect <code>ClassVar</code> annotation (60e01c1 by Victor Westerhuis). PR #150, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> <li>Add missing \"other args\" section aliases (f5c0a0e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_16","title":"Code Refactoring","text":"<ul> <li>Move utils from cli to respective modules (c6ce49e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0271-2023-04-16","title":"0.27.1 - 2023-04-16","text":"<p>Compare with 0.27.0</p>"},{"location":"changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Actually parse warnings sections (bc00da5 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow Raises and Warns items to start with a newline (f3b088c by Victor Westerhuis). PR #149, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#0270-2023-04-10","title":"0.27.0 - 2023-04-10","text":"<p>Compare with 0.26.0</p>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Implement basic handling of Alias for breaking changes (aa8ce00 by Yurii). PR #140, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>Support <code>Literal</code> imported from <code>typing_extensions</code> (3a16e58 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#545</li> <li>Fix parameter default checking logic and diff tests (1b940fd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0260-2023-04-03","title":"0.26.0 - 2023-04-03","text":"<p>Compare with 0.25.5</p>"},{"location":"changelog/#breaking-changes_3","title":"Breaking changes","text":"<ul> <li><code>AliasResolutionError</code> instances don't have a <code>target_path</code> attribute anymore.     It is instead replaced by an <code>alias</code> attribute which is a reference to an <code>Alias</code> instance.</li> <li>Lots of positional-or-keyword parameters were changed to keyword-only parameters.</li> </ul>"},{"location":"changelog/#deprecations_1","title":"Deprecations","text":"<ul> <li>The <code>griffe.agents.extensions</code> module was moved to <code>griffe.extensions</code>.     The old path is deprecated.</li> </ul>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Support newer versions of <code>editables</code> (ab7a3be by Timoth\u00e9e Mazzucotelli): the names of editable modules have changed from <code>__editables_*</code> to <code>_editable_impl_*</code>.</li> <li>Provide a JSON schema (7dfed39 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow hybrid extension to filter objects and run multiple inspectors (f8ff53a by Timoth\u00e9e Mazzucotelli).</li> <li>Allow loading extension from file path (131454e by Timoth\u00e9e Mazzucotelli).</li> <li>Add back <code>relative_filepath</code> which now really returns the filepath relative to the current working directory (40fe0c5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>Fix JSON schema for ending line numbers (and add test) (318c6b4 by Timoth\u00e9e Mazzucotelli).</li> <li>Prevent cyclic aliases by not overwriting a module member with an indirect alias to itself (c188a95 by Timoth\u00e9e Mazzucotelli). Issue #122</li> <li>Prevent alias resolution errors when copying docstring or labels from previously existing attribute (48747b6 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google admonition regular expression (ef0be5f by Timoth\u00e9e Mazzucotelli).</li> <li>Add back <code>griffe.agents.extensions</code> module (deprecated) (7129477 by Timoth\u00e9e Mazzucotelli).</li> <li>Forward class attribute docstrings to instances (7bf4952 by Rodrigo Gir\u00e3o Serr\u00e3o). Issue #128, PR #135</li> <li>Prevent errors related to getting attributes in the inspector (5d15d27 by Timoth\u00e9e Mazzucotelli).</li> <li>Catch \"member does not exist\" errors while expanding wildcards (a966022 by Timoth\u00e9e Mazzucotelli).</li> <li>Catch more inspection errors (4f6eef9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_17","title":"Code Refactoring","text":"<ul> <li>Log final path after resolving alias (c7ec7f7 by Timoth\u00e9e Mazzucotelli).</li> <li>Move extensions one level up (67ebd71 by Timoth\u00e9e Mazzucotelli).</li> <li>Set default <code>when</code> value on extension base classes (e8ad889 by Timoth\u00e9e Mazzucotelli).</li> <li>Rename <code>relative_filepath</code> to <code>relative_package_filepath</code> to better express what it does (6148f85 by Timoth\u00e9e Mazzucotelli).</li> <li>Show file name and line number in alias resolution error messages (c48928d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0255-2023-02-16","title":"0.25.5 - 2023-02-16","text":"<p>Compare with 0.25.4</p>"},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Fix parsing empty lines with indentation in Google docstrings (705edff by Timoth\u00e9e Mazzucotelli). Issue #129</li> </ul>"},{"location":"changelog/#0254-2023-01-19","title":"0.25.4 - 2023-01-19","text":"<p>Compare with 0.25.3</p>"},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>Fix creation of aliases to modules when inspecting (54242cb by Timoth\u00e9e Mazzucotelli).</li> <li>Support (setuptools) editable packages with multiple roots (bd37dfb by Gilad). PR #126</li> </ul>"},{"location":"changelog/#0253-2023-01-04","title":"0.25.3 - 2023-01-04","text":"<p>Compare with 0.25.2</p>"},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>Fix parsing of annotations in Numpy attributes sections (18fa396 by Timoth\u00e9e Mazzucotelli). Issue #72</li> </ul>"},{"location":"changelog/#0252-2022-12-24","title":"0.25.2 - 2022-12-24","text":"<p>Compare with 0.25.1</p>"},{"location":"changelog/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>Make sure passage through aliases is reset (79733f4 by Timoth\u00e9e Mazzucotelli). Issue #123</li> <li>Ignore cyclic alias errors when updating target aliases (bb62b2f by Timoth\u00e9e Mazzucotelli). Issue #123</li> </ul>"},{"location":"changelog/#0251-2022-12-20","title":"0.25.1 - 2022-12-20","text":"<p>Compare with 0.25.0</p>"},{"location":"changelog/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>Pass through aliases earlier to prevent infinite recursion (e533f29 by Timoth\u00e9e Mazzucotelli). Issue #83, #122</li> </ul>"},{"location":"changelog/#0250-2022-12-11","title":"0.25.0 - 2022-12-11","text":"<p>Compare with 0.24.1</p>"},{"location":"changelog/#breaking-changes_4","title":"Breaking changes","text":"<ul> <li>Parameter <code>only_known_modules</code> was renamed <code>external</code> in the <code>expand_wildcards()</code> method of the loader.</li> <li>Exception <code>UnhandledEditablesModuleError</code> was renamed <code>UnhandledEditableModuleError</code> since we now support editable installation from other packages than <code>editables</code>.</li> </ul>"},{"location":"changelog/#highlights","title":"Highlights","text":"<ul> <li>Properties are now fetched as attributes rather than functions, since that is how they are used. This was asked by users, and since Griffe generates signatures for Python APIs (emphasis on APIs), it makes sense to return data that matches the interface provided to users. Such property objects in Griffe's output will still have the associated <code>property</code> labels of course.</li> <li>Lots of bug fixes. These bugs were discovered by running Griffe on many major packages as well as the standard library (again). Particularly, alias resolution should be more robust now, and should generate less issues like cyclic aliases, meaning indirect/wildcard imports should be better understood. We still highly discourage the use of wilcard imports </li> </ul>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Support <code>setuptools</code> editable modules (abc18f7 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#463</li> <li>Support merging stubs on wildcard imported objects (0ed9c36 by Timoth\u00e9e Mazzucotelli). Issue #116</li> </ul>"},{"location":"changelog/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>Prevent cyclic alias creation when expanding wildcards (a77e4e8 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash and show hint when wildcard expansion fails (336faf6 by Timoth\u00e9e Mazzucotelli).</li> <li>Register top module after inspection (86454ec by Timoth\u00e9e Mazzucotelli).</li> <li>Set alias attributes early (2ac1a9b by Timoth\u00e9e Mazzucotelli).</li> <li>Allow writing attributes on aliases (c8f736e by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash on inspection of functions signatures (051e337 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash on inspection of method descriptors' docstrings (09571bb by Timoth\u00e9e Mazzucotelli).</li> <li>Fix stats computing (handle stubs and namespace packages) (a81f8dc by Timoth\u00e9e Mazzucotelli).</li> <li>Support documenting multiple items for optional tuples (727456d by Timoth\u00e9e Mazzucotelli). Issue #117</li> <li>Fix comparing names with strings (37ae0a2 by Timoth\u00e9e Mazzucotelli). Issue #114</li> <li>Fix deepcopy crashing because of <code>__getattr__</code> (11b023b by Timoth\u00e9e Mazzucotelli). Issue #73, PR #119</li> </ul>"},{"location":"changelog/#code-refactoring_18","title":"Code Refactoring","text":"<ul> <li>Prevent reloading of failed modules (8ef14ab by Timoth\u00e9e Mazzucotelli).</li> <li>Rename <code>only_known_modules</code> parameter to <code>external</code> (5f816c6 by Timoth\u00e9e Mazzucotelli).</li> <li>Rework alias creation decision in the inspector (f434943 by Timoth\u00e9e Mazzucotelli).</li> <li>Resolve alias chain recursively (6cdd3b2 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't try to stubs-merge identical modules (7099971 by Timoth\u00e9e Mazzucotelli).</li> <li>Load properties as attributes (5c97a45 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#9</li> <li>Use a cyclic relationship map for inspection (9a2a711 by Timoth\u00e9e Mazzucotelli). PR #115</li> </ul>"},{"location":"changelog/#0241-2022-11-18","title":"0.24.1 - 2022-11-18","text":"<p>Compare with 0.24.0</p>"},{"location":"changelog/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>Support nested namespace packages (d571f8f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0240-2022-11-13","title":"0.24.0 - 2022-11-13","text":"<p>Compare with 0.23.0</p> <p>The \"Breaking Changes\" and \"Deprecations\" sections are proudly written with the help of our new API breakage detection feature ! Many thanks to Talley Lambert (@tlambert03) for the initial code allowing to compare two Griffe trees.</p>"},{"location":"changelog/#breaking-changes_5","title":"Breaking changes","text":"<ul> <li>All parameters of the <code>load_git</code> function, except <code>module</code>, are now keyword-only.</li> <li>Parameter <code>try_relative_path</code> of the <code>load_git</code> function was removed.</li> <li>Parameter <code>commit</code> was renamed <code>ref</code> in the <code>load_git</code> function.</li> <li>Parameter <code>commit</code> was renamed <code>ref</code> in the <code>tmp_worktree</code> helper, which will probably become private later.</li> <li>Parameters <code>ref</code> and <code>repo</code> switched positions in the <code>tmp_worktree</code> helper.</li> <li>All parameters of the <code>resolve_aliases</code> method are now keyword-only.</li> <li>Parameters <code>only_exported</code> and <code>only_known_modules</code> of the <code>resolve_module_aliases</code>     method were removed. This method is most probably not used by anyone, and will probably be made private in the future.</li> </ul>"},{"location":"changelog/#deprecations_2","title":"Deprecations","text":"<ul> <li> <p>Parameters <code>only_exported</code> and <code>only_known_modules</code> of the <code>resolve_aliases</code>     method are deprecated in favor of their inverted counter-part <code>implicit</code> and <code>external</code> parameters.</p> <ul> <li>Example before: <code>loader.resolve_aliases(only_exported=True, only_known_modules=True)</code></li> <li>Example after: <code>loader.resolve_aliases(implicit=False, external=False)</code></li> </ul> </li> </ul>"},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Add CLI command to check for API breakages (90bded4 by Timoth\u00e9e Mazzucotelli). Issue #75, PR #105</li> <li>Add function to find API breaking changes (a4f1280 by Talley Lambert and Timoth\u00e9e Mazzucotelli). Issue #75, PR #105</li> </ul>"},{"location":"changelog/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>Fix labels mismatch staticmethod-classmethod in inspector (25060f6 by Timoth\u00e9e Mazzucotelli). Issue #111</li> <li>Prevent infinite loop while looking for package's parent folder (f297f1a by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#72</li> <li>Fix comparing names and expressions (07bffff by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_19","title":"Code Refactoring","text":"<ul> <li>Rename some parameters in Git module (9ad7a2c by Timoth\u00e9e Mazzucotelli).</li> <li>Set parameters as keyword-only (44c01be by Timoth\u00e9e Mazzucotelli).</li> <li>Remove stars from parameters names (91dce14 by Timoth\u00e9e Mazzucotelli).</li> <li>Refactor CLI to use subcommands (760b091 by Timoth\u00e9e Mazzucotelli). PR #110</li> <li>Rename parameters used when resolving aliases (3d3a4eb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0230-2022-10-26","title":"0.23.0 - 2022-10-26","text":"<p>Compare with 0.22.2</p>"},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Support <code>typing_extensions.overload</code> (c29fad5 by Nyuan Zhang). PR #108</li> </ul>"},{"location":"changelog/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>Log debug instead of errors when failing to parse NumPy annotations for additional sections (568ff60 by Sigurd Spieckermann). Issue #93, PR #109</li> <li>Don't strip too many parentheses around a call node (bb5c5e7 by Timoth\u00e9e Mazzucotelli). PR #107</li> <li>Guard against more alias resolution errors (2be135d by Timoth\u00e9e Mazzucotelli). Issue #83, PR #103</li> </ul>"},{"location":"changelog/#0222-2022-09-24","title":"0.22.2 - 2022-09-24","text":"<p>Compare with 0.22.1</p>"},{"location":"changelog/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>Log debug instead of errors when failing to parse Numpy annotations (75eeeda by Timoth\u00e9e Mazzucotelli). Issue #93</li> <li>Don't crash on unsupported module names (containing dots) (6a57194 by Timoth\u00e9e Mazzucotelli). Issue #94</li> <li>Show correct docstring line numbers on Python 3.7 (edd4b6d by Timoth\u00e9e Mazzucotelli). Issue #98</li> <li>Fix parsing of Numpy docstring with an Examples section at the end (3114727 by Timoth\u00e9e Mazzucotelli). Issue #97</li> <li>Don't crash on unsupported item in <code>__all__</code> (log a warning instead) (9e5df0a by Timoth\u00e9e Mazzucotelli). Issue #92</li> <li>Prevent infinite recursion while expanding exports (68446f7 by Timoth\u00e9e Mazzucotelli).</li> <li>Add missing check while expanding wildcards (7e816ed by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0221-2022-09-10","title":"0.22.1 - 2022-09-10","text":"<p>Compare with 0.22.0</p>"},{"location":"changelog/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>Always use <code>encoding=\"utf8\"</code> when reading text files (3b279bf by Rudolf Byker). Issue #99, PR #100</li> </ul>"},{"location":"changelog/#0220-2022-06-28","title":"0.22.0 - 2022-06-28","text":"<p>Compare with 0.21.0</p>"},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Support forward references (245daea by Timoth\u00e9e Mazzucotelli). Issue #86</li> </ul>"},{"location":"changelog/#code-refactoring_20","title":"Code Refactoring","text":"<ul> <li>Safely parse annotations and values (b023e2b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0210-2022-06-25","title":"0.21.0 - 2022-06-25","text":"<p>Compare with 0.20.0</p>"},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Add <code>load_git</code> function allowing to load data from a specific git ref (b2c3946 by Talley Lambert). Issue #75, PR #76</li> </ul>"},{"location":"changelog/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>Fix detecting and merging stubs for single-file packages (6a82542 by Talley Lambert). Issue #77, PR #78</li> <li>Fix parsing ExtSlice nodes when getting values (b2fe968 by Timoth\u00e9e Mazzucotelli). Issue #87</li> <li>Don't trigger alias resolution when merging stubs (2b88627 by Timoth\u00e9e Mazzucotelli). Issue #89</li> <li>Fix handling of .pth files (f212dd3 by Gabriel Dugny). Issue #84, PR #85</li> </ul>"},{"location":"changelog/#0200-2022-06-03","title":"0.20.0 - 2022-06-03","text":"<p>Compare with 0.19.3</p>"},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>Add <code>as_json</code> and <code>from_json</code> convenience methods on objects (5c3d751 by Talley Lambert). PR #74</li> </ul>"},{"location":"changelog/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>Fix unparsing of f-strings (9ca74bd by Timoth\u00e9e Mazzucotelli). Issue #80</li> <li>Don't crash when overwriting a submodule with a wildcard imported attribute (bfad1cc by Timoth\u00e9e Mazzucotelli). Issue #72, #79, mkdocstrings/mkdocstrings#438</li> </ul>"},{"location":"changelog/#0193-2022-05-26","title":"0.19.3 - 2022-05-26","text":"<p>Compare with 0.19.2</p>"},{"location":"changelog/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>Support USub and UAdd nodes in annotations (1169c51 by Timoth\u00e9e Mazzucotelli). Issue #71</li> </ul>"},{"location":"changelog/#0192-2022-05-18","title":"0.19.2 - 2022-05-18","text":"<p>Compare with 0.19.1</p>"},{"location":"changelog/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>Don't crash on single line docstrings with trailing whitespace (Google) (8d9ccd5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0191-2022-05-07","title":"0.19.1 - 2022-05-07","text":"<p>Compare with 0.19.0</p>"},{"location":"changelog/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>Don't crash on nested functions in <code>__init__</code> methods (cd5af43 by Timoth\u00e9e Mazzucotelli). Issue #68</li> </ul>"},{"location":"changelog/#0190-2022-05-06","title":"0.19.0 - 2022-05-06","text":"<p>Compare with 0.18.0</p>"},{"location":"changelog/#features_17","title":"Features","text":"<ul> <li>Add <code>load</code> shortcut function for convenience (f38a42d by Timoth\u00e9e Mazzucotelli).</li> <li>Support loading (and merging) <code>*.pyi</code> files (41518f4 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#404</li> <li>Improve support for call nodes in annotations (45e5bf5 by Timoth\u00e9e Mazzucotelli). Issue #66</li> <li>Support <code>dataclass</code> decorators on classes (f579431 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_21","title":"Code Refactoring","text":"<ul> <li>Handle absence of values (190585d by Timoth\u00e9e Mazzucotelli).</li> <li>Simplify decorators to labels function (04e768f by Timoth\u00e9e Mazzucotelli).</li> <li>Always sort labels when serializing (bd2504b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0180-2022-04-19","title":"0.18.0 - 2022-04-19","text":"<p>Compare with 0.17.0</p>"},{"location":"changelog/#features_18","title":"Features","text":"<ul> <li>Add CLI option to disallow inspection (8f71a07 by Timoth\u00e9e Mazzucotelli).</li> <li>Support complex <code>__all__</code> assignments (9a2128b by Timoth\u00e9e Mazzucotelli). Issue #40</li> <li>Inherit class parameters from <code>__init__</code> method (e195593 by Fran\u00e7ois Rozet). Issue mkdocstrings/python#19, PR #65.   It allows to write \"Parameters\" sections in the docstring of the class itself.</li> </ul>"},{"location":"changelog/#performance-improvements_1","title":"Performance Improvements","text":"<ul> <li>Avoid using <code>__len__</code> as boolean method (d465493 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>Don't crash on unhandle <code>__all__</code> assignments (cbc103c by Timoth\u00e9e Mazzucotelli).</li> <li>Handle empty packages names in CLI (52b51c4 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash on Google parameters sections found in non-function docstrings (4a417bc by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#19</li> </ul>"},{"location":"changelog/#code-refactoring_22","title":"Code Refactoring","text":"<ul> <li>Improve \"unknown parameter\" messages (7191799 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#423</li> <li>Set property label on <code>@cached_property</code>-decoratored methods (bc068f8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0170-2022-04-15","title":"0.17.0 - 2022-04-15","text":"<p>Compare with 0.16.0</p>"},{"location":"changelog/#features_19","title":"Features","text":"<ul> <li>Handle properties setters and deleters (50a4490 by Timoth\u00e9e Mazzucotelli).</li> <li>Handle <code>typing.overload</code> decorator (927bbd9 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#308</li> <li>Set labels on functions using decorators (1c1feb2 by Timoth\u00e9e Mazzucotelli). Issue #47</li> <li>Add <code>runtime</code> attribute to objects/aliases and handle type guarded objects (2f2a04e by Timoth\u00e9e Mazzucotelli). Issue #42</li> <li>Support pkg-style namespace packages (efba0c6 by Timoth\u00e9e Mazzucotelli). Issue #58</li> </ul>"},{"location":"changelog/#code-refactoring_23","title":"Code Refactoring","text":"<ul> <li>Remove useless attribute (c4a92b7 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve Google warnings (641089a by Timoth\u00e9e Mazzucotelli).</li> <li>Remove useless import nodes generic visits (f83fc8e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0160-2022-04-09","title":"0.16.0 - 2022-04-09","text":"<p>Compare with 0.15.1</p>"},{"location":"changelog/#features_20","title":"Features","text":"<ul> <li>Warn about unknown parameters in Numpy docstrings (23f63f2 by Timoth\u00e9e Mazzucotelli).</li> <li>Warn about unknown parameters in Google docstrings (72be993 by Kevin Musgrave). Issue mkdocstrings/mkdocstrings#408, PR #63</li> </ul>"},{"location":"changelog/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>Don't crash on unhandled AST nodes while parsing text annotations (f3be3a6 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#416</li> </ul>"},{"location":"changelog/#0151-2022-04-08","title":"0.15.1 - 2022-04-08","text":"<p>Compare with 0.15.0</p>"},{"location":"changelog/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>Don't overwrite existing (lower) members when expanding wildcards (9ff86e3 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't insert admonition before current section (Google parser) (8d8a46f by Timoth\u00e9e Mazzucotelli).</li> <li>Handle aliases chains in <code>has_docstrings</code> method (77c6943 by Timoth\u00e9e Mazzucotelli).</li> <li>Actually check for docstrings recursively (15f4193 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0150-2022-04-03","title":"0.15.0 - 2022-04-03","text":"<p>Compare with 0.14.1</p>"},{"location":"changelog/#features_21","title":"Features","text":"<ul> <li>Support <code>ignore_init_summary</code> in Numpy parser (f8cd147 by Timoth\u00e9e Mazzucotelli). Issue #44</li> <li>Enable cross-references for Numpy docstrings annotations (e32a73c by Timoth\u00e9e Mazzucotelli). Issues #11, #12, #13, #14, #15, #16, #17, #18</li> <li>Retrieve annotations from parent in Numpy parser (8d4eae3 by Timoth\u00e9e Mazzucotelli). Issues #29, #30, #31, #32</li> <li>Parse annotations in Iterator/Generator for Google docstrings (f0129ef by Timoth\u00e9e Mazzucotelli). Issue #28</li> </ul>"},{"location":"changelog/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>Fix missing \"receives\" entry in Google parser (35d63fb by Timoth\u00e9e Mazzucotelli).</li> <li>Fix serialization of Windows paths (b7e8da8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_24","title":"Code Refactoring","text":"<ul> <li>Be less strict on spacing around \":\" in Numpy docstrings (aa592b5 by Timoth\u00e9e Mazzucotelli).</li> <li>Be less strict in Numpy regular expressions (603dc0e by Timoth\u00e9e Mazzucotelli).</li> <li>Rename variables in Numpy module (4407244 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0141-2022-04-01","title":"0.14.1 - 2022-04-01","text":"<p>Compare with 0.14.0</p>"},{"location":"changelog/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>Retrieve default value for non-string parameters (15952ed by ThomasPJ). Issue #59, issue mkdocstrings/python#8, PR #60</li> <li>Prevent infinite recursion while expanding wildcards (428628f by Timoth\u00e9e Mazzucotelli). Issue #57</li> </ul>"},{"location":"changelog/#0140-2022-03-06","title":"0.14.0 - 2022-03-06","text":"<p>Compare with 0.13.2</p>"},{"location":"changelog/#features_22","title":"Features","text":"<ul> <li>Ignore <code>__doc__</code> from parent classes (10aa59e by Will Da Silva). Issue #55, PR #56</li> </ul>"},{"location":"changelog/#0132-2022-03-01","title":"0.13.2 - 2022-03-01","text":"<p>Compare with 0.13.1</p>"},{"location":"changelog/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>Fix type regex in Numpy parser (3a10fda by Timoth\u00e9e Mazzucotelli).</li> <li>Current module must not be available in its members' scope (54f9688 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow named sections after numpydoc examples (a44d9c6 by Lucina). PR #54</li> </ul>"},{"location":"changelog/#0131-2022-02-24","title":"0.13.1 - 2022-02-24","text":"<p>Compare with 0.13.0</p>"},{"location":"changelog/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>Don't cut through wildcard-expanded aliases chains (65dafa4 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix docstrings warnings when there's no parent module (e080549 by Timoth\u00e9e Mazzucotelli). Issue #51</li> </ul>"},{"location":"changelog/#code-refactoring_25","title":"Code Refactoring","text":"<ul> <li>Use proper classes for docstrings sections (46eddac by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#3, PR #52</li> </ul>"},{"location":"changelog/#0130-2022-02-23","title":"0.13.0 - 2022-02-23","text":"<p>Compare with 0.12.6</p>"},{"location":"changelog/#features_23","title":"Features","text":"<ul> <li>Implement <code>trim_doctest_flags</code> for Google and Numpy (8057153 by Jeremy Goh). Issue mkdocstrings/mkdocstrings#386, PR #48</li> </ul>"},{"location":"changelog/#bug-fixes_47","title":"Bug Fixes","text":"<ul> <li>Rename keyword parameters to keyword arguments (ce3eb6b by Jeremy Goh).</li> </ul>"},{"location":"changelog/#0126-2022-02-18","title":"0.12.6 - 2022-02-18","text":"<p>Compare with 0.12.5</p>"},{"location":"changelog/#bug-fixes_48","title":"Bug Fixes","text":"<ul> <li>Support starred parameters in Numpy docstrings (27f0fc2 by Timoth\u00e9e Mazzucotelli). Issue #43</li> </ul>"},{"location":"changelog/#0125-2022-02-17","title":"0.12.5 - 2022-02-17","text":"<p>Compare with 0.12.4</p>"},{"location":"changelog/#bug-fixes_49","title":"Bug Fixes","text":"<ul> <li>Fix getting line numbers on aliases (351750e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0124-2022-02-16","title":"0.12.4 - 2022-02-16","text":"<p>Compare with 0.12.3</p>"},{"location":"changelog/#bug-fixes_50","title":"Bug Fixes","text":"<ul> <li>Update target path when changing alias target (5eda646 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix relative imports to absolute with wildcards (69500dd by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#382</li> <li>Fix accessing members using tuples (87ff1df by Timoth\u00e9e Mazzucotelli).</li> <li>Fix recursive wildcard expansion (60e6edf by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#382</li> <li>Only export submodules if they were imported (98c72db by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#382</li> </ul>"},{"location":"changelog/#0123-2022-02-15","title":"0.12.3 - 2022-02-15","text":"<p>Compare with 0.12.2</p>"},{"location":"changelog/#bug-fixes_51","title":"Bug Fixes","text":"<ul> <li>Always decode source as UTF8 (563469b by Timoth\u00e9e Mazzucotelli).</li> <li>Fix JSON encoder and decoder (3e768d6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_26","title":"Code Refactoring","text":"<ul> <li>Improve error handling (7b15a51 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0122-2022-02-13","title":"0.12.2 - 2022-02-13","text":"<p>Compare with 0.12.1</p>"},{"location":"changelog/#bug-fixes_52","title":"Bug Fixes","text":"<ul> <li>Fix JSON unable to serialize docstring kind values (91e6719 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_27","title":"Code Refactoring","text":"<ul> <li>Make attribute labels more explicit (19eac2e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0121-2022-02-12","title":"0.12.1 - 2022-02-12","text":"<p>Compare with 0.11.7</p>"},{"location":"changelog/#features_24","title":"Features","text":"<ul> <li>Add <code>ignore_init_summary</code> option to the Google parser (81f0333 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>is_KIND</code> properties on objects (17a08cd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0117-2022-02-12","title":"0.11.7 - 2022-02-12","text":"<p>Compare with 0.11.6</p>"},{"location":"changelog/#bug-fixes_53","title":"Bug Fixes","text":"<ul> <li>Keep only first assignment in conditions (0104440 by Timoth\u00e9e Mazzucotelli).</li> <li>Support invert unary op in annotations (734ef55 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix handling of missing modules during dynamic imports (7a3b383 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#380</li> <li>Fix getting lines of compiled modules (899461b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_28","title":"Code Refactoring","text":"<ul> <li>Get annotation with the same property on functions (ecc7bba by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0116-2022-02-10","title":"0.11.6 - 2022-02-10","text":"<p>Compare with 0.11.5</p>"},{"location":"changelog/#bug-fixes_54","title":"Bug Fixes","text":"<ul> <li>Fix infinite loop in Google parser (8b7b97b by Timoth\u00e9e Mazzucotelli). Issue #38</li> </ul>"},{"location":"changelog/#0115-2022-02-08","title":"0.11.5 - 2022-02-08","text":"<p>Compare with 0.11.4</p>"},{"location":"changelog/#bug-fixes_55","title":"Bug Fixes","text":"<ul> <li>Fix building title and kind of Google admonitions (87ab56c by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings#379</li> </ul>"},{"location":"changelog/#0114-2022-02-07","title":"0.11.4 - 2022-02-07","text":"<p>Compare with 0.11.3</p>"},{"location":"changelog/#bug-fixes_56","title":"Bug Fixes","text":"<ul> <li>Don't trigger alias resolution while checking docstrings presence (dda72ea by Timoth\u00e9e Mazzucotelli). Issue #37</li> </ul>"},{"location":"changelog/#0113-2022-02-05","title":"0.11.3 - 2022-02-05","text":"<p>Compare with 0.11.2</p>"},{"location":"changelog/#bug-fixes_57","title":"Bug Fixes","text":"<ul> <li>Fix getting params defaults on Python 3.7 (0afd867 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0112-2022-02-03","title":"0.11.2 - 2022-02-03","text":"<p>Compare with 0.11.1</p>"},{"location":"changelog/#code-refactoring_29","title":"Code Refactoring","text":"<ul> <li>Factorize docstring annotation parser (19609be by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0111-2022-02-01","title":"0.11.1 - 2022-02-01","text":"<p>Compare with 0.11.0</p>"},{"location":"changelog/#code-refactoring_30","title":"Code Refactoring","text":"<ul> <li>Rename RST parser to Sphinx (a612cb1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0110-2022-01-31","title":"0.11.0 - 2022-01-31","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#features_25","title":"Features","text":"<ul> <li>Support matrix multiplication operator in visitor (6129e17 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_58","title":"Bug Fixes","text":"<ul> <li>Fix name resolution for inspected data (ed3e7e5 by Timoth\u00e9e Mazzucotelli).</li> <li>Make importer actually able to import any nested object (d007219 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_31","title":"Code Refactoring","text":"<ul> <li>Always use search paths to import modules (a9a378f by Timoth\u00e9e Mazzucotelli).</li> <li>Split out module finder (7290642 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0100-2022-01-14","title":"0.10.0 - 2022-01-14","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#bug-fixes_59","title":"Bug Fixes","text":"<ul> <li>Fix infinite recursion errors in alias resolver (133b4e4 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix inspection of nodes children (aliases or not) (bb354f2 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix relative to absolute import conversion (464c39e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_32","title":"Code Refactoring","text":"<ul> <li>Rename some CLI options (1323268 by Timoth\u00e9e Mazzucotelli).</li> <li>Return the loader the to main function (9c6317e by Timoth\u00e9e Mazzucotelli).</li> <li>Improve logging messages (b8eb16e by Timoth\u00e9e Mazzucotelli).</li> <li>Skip inspection of some debug packages (4ee8968 by Timoth\u00e9e Mazzucotelli).</li> <li>Return ... instead of Ellipsis (f9ae31d by Timoth\u00e9e Mazzucotelli).</li> <li>Catch attribute errors when cross-referencing docstring annotations (288803a by Timoth\u00e9e Mazzucotelli).</li> <li>Support dict methods in lines collection (1b0cb94 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_26","title":"Features","text":"<ul> <li>Compute and show some stats (1b8d0a1 by Timoth\u00e9e Mazzucotelli).</li> <li>Add CLI options for alias resolution (87a59cb by Timoth\u00e9e Mazzucotelli).</li> <li>Support Google raises annotations cross-refs (8006ae1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#090-2022-01-04","title":"0.9.0 - 2022-01-04","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#features_27","title":"Features","text":"<ul> <li>Loader option to only follow aliases in known modules (879d91b by Timoth\u00e9e Mazzucotelli).</li> <li>Use aliases when inspecting too (60439ee by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_60","title":"Bug Fixes","text":"<ul> <li>Handle more errors when loading modules (1aa571a by Timoth\u00e9e Mazzucotelli).</li> <li>Handle more errors when getting signature (2db85e7 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix checking parent truthfulness (6129e50 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix getting subscript value (1699f12 by Timoth\u00e9e Mazzucotelli).</li> <li>Support yield nodes (7d536d5 by Timoth\u00e9e Mazzucotelli).</li> <li>Exclude some special low-level members that cause cyclic issues (b54ab34 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix transforming elements of signatures to annotations (e278c11 by Timoth\u00e9e Mazzucotelli).</li> <li>Detect cyclic aliases and prevent resolution errors (de5dd12 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash while trying to get the representation of an attribute value (77ac55d by Timoth\u00e9e Mazzucotelli).</li> <li>Fix building value for joined strings (6154b69 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix prevention of cycles while building objects nodes (48062ac by Timoth\u00e9e Mazzucotelli).</li> <li>Better handle relative imports (91b42de by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google parser missing lines ending with colon (2f7969c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_33","title":"Code Refactoring","text":"<ul> <li>Improve alias resolution robustness (e708139 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove async loader for now (acc5ecf by Timoth\u00e9e Mazzucotelli).</li> <li>Improve handling of Google admonitions (8aa5ed0 by Timoth\u00e9e Mazzucotelli).</li> <li>Better handling of import errors and system exits while inspecting modules (7ba1589 by Timoth\u00e9e Mazzucotelli).</li> <li>Empty generic visit/inspect methods in base classes (338760e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#080-2022-01-02","title":"0.8.0 - 2022-01-02","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#features_28","title":"Features","text":"<ul> <li>Support getting attribute annotation from parent in RST docstring parser (25db61a by Timoth\u00e9e Mazzucotelli).</li> <li>Handle relative imports (62b0927 by Timoth\u00e9e Mazzucotelli).</li> <li>Support wildcard imports (77a3cb7 by Timoth\u00e9e Mazzucotelli).</li> <li>Support configuring log level (CLI/env var) (839d78e by Timoth\u00e9e Mazzucotelli).</li> <li>Support loading <code>*.py[cod]</code> and <code>*.so</code> modules (cd98a6f by Timoth\u00e9e Mazzucotelli).</li> <li>Support inspecting builtin functions/methods (aa1fce3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_34","title":"Code Refactoring","text":"<ul> <li>Handle extensions errors (11278ca by Timoth\u00e9e Mazzucotelli).</li> <li>Don't always try to find a module as a relative  path (e6df277 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve loggers patching (f4b262a by Timoth\u00e9e Mazzucotelli).</li> <li>Improve dynamic imports (2998195 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#071-2021-12-28","title":"0.7.1 - 2021-12-28","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#code-refactoring_35","title":"Code Refactoring","text":"<ul> <li>Only log warning if async mode is used (356e848 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#070-2021-12-28","title":"0.7.0 - 2021-12-28","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#features_29","title":"Features","text":"<ul> <li>Support more nodes on Python 3.7 (7f2c4ec by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_36","title":"Code Refactoring","text":"<ul> <li>Don't crash on syntax errors and log an error (10bb6b1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2021-12-27","title":"0.6.0 - 2021-12-27","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#features_30","title":"Features","text":"<ul> <li>Support more AST nodes (cd1b305 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_37","title":"Code Refactoring","text":"<ul> <li>Use annotation getter for base classes (8b1a7ed by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2021-12-20","title":"0.5.0 - 2021-12-20","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#features_31","title":"Features","text":"<ul> <li>Add support for Python 3.7 (4535adc by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_61","title":"Bug Fixes","text":"<ul> <li>Don't propagate aliases of an alias (8af48f8 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't reassign members defined in except clauses (d918b4e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2021-11-28","title":"0.4.0 - 2021-11-28","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#features_32","title":"Features","text":"<ul> <li>Add a prototype 'hybrid' extension (8cb3c16 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing extensions config as JSON on the CLI (9a7fa8b by Timoth\u00e9e Mazzucotelli).</li> <li>Support names for returns, yields and receives sections items (1c5a4c9 by Timoth\u00e9e Mazzucotelli).</li> <li>Store aliases on each object (91ba643 by Timoth\u00e9e Mazzucotelli).</li> <li>Support in[tro]spection (3a0587d by Timoth\u00e9e Mazzucotelli).</li> <li>Support multiple return, yield and receive items (0fc70cb by Timoth\u00e9e Mazzucotelli).</li> <li>Support namespace packages (2414c8e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_62","title":"Bug Fixes","text":"<ul> <li>Fix extensions loader (78fb70b by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid visiting/inspecting multiple times (75a8a8b by Timoth\u00e9e Mazzucotelli).</li> <li>Set modules collection attribute earlier (592c0bd by Timoth\u00e9e Mazzucotelli).</li> <li>Support inequality nodes (b0ed247 by Timoth\u00e9e Mazzucotelli).</li> <li>Handle Div nodes for values (272e4d6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_38","title":"Code Refactoring","text":"<ul> <li>Set log level to INFO (718e73e by Timoth\u00e9e Mazzucotelli).</li> <li>Add target setter (7f0064c by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize conditions (15ab876 by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid recursion loops (ea6acec by Timoth\u00e9e Mazzucotelli).</li> <li>Update aliases when replacing a member (99a0f8b by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize code (31fcdb1 by Timoth\u00e9e Mazzucotelli).</li> <li>Replace DocstringException with DocstringRaise (d5ed87a by Timoth\u00e9e Mazzucotelli).</li> <li>Refactor loaders (d9b94bb by Timoth\u00e9e Mazzucotelli).</li> <li>Improve typing (e08bcfa by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2021-11-21","title":"0.3.0 - 2021-11-21","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_33","title":"Features","text":"<ul> <li>Handle aliases and their resolution (67ae903 by Timoth\u00e9e Mazzucotelli).</li> <li>Resolve annotations in docstrings (847384a by Timoth\u00e9e Mazzucotelli).</li> <li>Resolve annotations (6451eff by Timoth\u00e9e Mazzucotelli).</li> <li>Add lines property to objects (7daf7db by Timoth\u00e9e Mazzucotelli).</li> <li>Allow setting docstring parser and options on each object (07a1d2e by Timoth\u00e9e Mazzucotelli).</li> <li>Get attributes annotations from parent (003b990 by Timoth\u00e9e Mazzucotelli).</li> <li>Draft extensions loader (17ccd03 by Timoth\u00e9e Mazzucotelli).</li> <li>Add properties to objects (0ec301a by Timoth\u00e9e Mazzucotelli).</li> <li>Handle .pth files when searching modules (2a2e182 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>default</code> property to docstring parameters (6298ba3 by Timoth\u00e9e Mazzucotelli).</li> <li>Accept RST and Numpy parsers (1cf147d by Timoth\u00e9e Mazzucotelli).</li> <li>Support data (attributes/variables) (dce84d1 by Timoth\u00e9e Mazzucotelli).</li> <li>Add Numpy-style parser (ad5b72d by Timoth\u00e9e Mazzucotelli).</li> <li>Support more section kinds in Google-style (9d3d047 by Timoth\u00e9e Mazzucotelli).</li> <li>Add docstring section kinds (b270483 by Timoth\u00e9e Mazzucotelli).</li> <li>Accept initial arguments when creating container (90c5956 by Timoth\u00e9e Mazzucotelli).</li> <li>Add an RST-style docstring parser (742e7b2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#performance-improvements_2","title":"Performance Improvements","text":"<ul> <li>Improve JSON encoder perfs (6a78eb0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_63","title":"Bug Fixes","text":"<ul> <li>Handle serialization of Posix paths (3a66b95 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix list annotation getter (5ae800a by Timoth\u00e9e Mazzucotelli).</li> <li>Show accurate line number in Google warnings (2953590 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix assignment names getters (6990846 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix async loader (passing parent) (57e866e by Timoth\u00e9e Mazzucotelli).</li> <li>Fix exception name (4b8b85d by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google sections titles logic (87dd329 by Timoth\u00e9e Mazzucotelli).</li> <li>Prepend current module to base classes (still needs resolution) (a4b1dee by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google admonition regex (3902e74 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix docstring getter (1442eba by Timoth\u00e9e Mazzucotelli).</li> <li>Fix getting arguments defaults in the Google-style parser (67adbaf by Timoth\u00e9e Mazzucotelli).</li> <li>Fix getting arguments annotations in the Google-style parser (8bcbfba by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_39","title":"Code Refactoring","text":"<ul> <li>Export parsers and main function in docstrings module (96469da by Timoth\u00e9e Mazzucotelli).</li> <li>Remove top exports (cd76694 by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize exceptions (7f9b805 by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid circular import (ef27dcd by Timoth\u00e9e Mazzucotelli).</li> <li>Rename index to [new] offset (c07cc7d by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize code (5f4fff2 by Timoth\u00e9e Mazzucotelli).</li> <li>Use keyword only parameters (d34edd6 by Timoth\u00e9e Mazzucotelli).</li> <li>Default to no parsing for serialization (8fecd9e by Timoth\u00e9e Mazzucotelli).</li> <li>Always extend AST (c227ae6 by Timoth\u00e9e Mazzucotelli).</li> <li>Set default for kwargs parameters (7a0b85e by Timoth\u00e9e Mazzucotelli).</li> <li>Rename visitor method (3e0c43c by Timoth\u00e9e Mazzucotelli).</li> <li>Improve typing (ac86f17 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix typo (a9ed6e9 by Timoth\u00e9e Mazzucotelli).</li> <li>Rewrite ParameterKind (90249df by Timoth\u00e9e Mazzucotelli).</li> <li>Add bool methods to docstrings and objects (548f72e by Timoth\u00e9e Mazzucotelli).</li> <li>Allow setting docstring parser and options on each docstring (752e084 by Timoth\u00e9e Mazzucotelli).</li> <li>Skip attribute assignments (e9cc2cd by Timoth\u00e9e Mazzucotelli).</li> <li>Improve visitor getters (2ea88c0 by Timoth\u00e9e Mazzucotelli).</li> <li>Use relative filepath in docstring warnings (e894df7 by Timoth\u00e9e Mazzucotelli).</li> <li>Set submodules parent earlier (53767c0 by Timoth\u00e9e Mazzucotelli).</li> <li>Rename Data to Attribute (febc12e by Timoth\u00e9e Mazzucotelli).</li> <li>Rename arguments to parameters (957856c by Timoth\u00e9e Mazzucotelli).</li> <li>Improve annotation support (5b2262f by Timoth\u00e9e Mazzucotelli).</li> <li>Always set parent (cae85de by Timoth\u00e9e Mazzucotelli).</li> <li>Factorize function handling (dfece1c by Timoth\u00e9e Mazzucotelli).</li> <li>Privatize stuff, fix loggers (5513ed5 by Timoth\u00e9e Mazzucotelli).</li> <li>Use keyword only arguments (e853fe9 by Timoth\u00e9e Mazzucotelli).</li> <li>Set default values for Argument arguments (d5cccaa by Timoth\u00e9e Mazzucotelli).</li> <li>Swallow extra parsing options (3d9ebe7 by Timoth\u00e9e Mazzucotelli).</li> <li>Rename <code>start_index</code> argument to <code>offset</code> (dd88358 by Timoth\u00e9e Mazzucotelli).</li> <li>Reuse parsers warn function (03dfdd3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2021-09-25","title":"0.2.0 - 2021-09-25","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features_34","title":"Features","text":"<ul> <li>Add Google-style docstring parser (cdefccc by Timoth\u00e9e Mazzucotelli).</li> <li>Support all kinds of functions arguments (c177562 by Timoth\u00e9e Mazzucotelli).</li> <li>Initial support for class decorators and bases (8e229aa by Timoth\u00e9e Mazzucotelli).</li> <li>Add functions decorators support (fee304d by Timoth\u00e9e Mazzucotelli).</li> <li>Add async loader (3218bd0 by Timoth\u00e9e Mazzucotelli).</li> <li>Add relative file path and package properties (d26ee1f by Timoth\u00e9e Mazzucotelli).</li> <li>Add search and output option to the CLI (3b37692 by Timoth\u00e9e Mazzucotelli).</li> <li>Load docstrings and functions arguments (cdf29a3 by Timoth\u00e9e Mazzucotelli).</li> <li>Support paths in loader (8f4df75 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#performance-improvements_3","title":"Performance Improvements","text":"<ul> <li>Avoid name lookups in visitor (00de148 by Timoth\u00e9e Mazzucotelli).</li> <li>Factorize and improve main and extensions visitors (9b27b56 by Timoth\u00e9e Mazzucotelli).</li> <li>Delegate children computation at runtime (8d54c87 by Timoth\u00e9e Mazzucotelli).</li> <li>Cache dataclasses properties (2d7447d by Timoth\u00e9e Mazzucotelli).</li> <li>Optimize node linker (03f955e by Timoth\u00e9e Mazzucotelli).</li> <li>Optimize docstring getter (4a05516 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2021-09-09","title":"0.1.0 - 2021-09-09","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_35","title":"Features","text":"<ul> <li>Add initial code (8cbdf7a by Timoth\u00e9e Mazzucotelli).</li> <li>Generate project from copier-pdm template (7ea73ad by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"checking/","title":"Checking for API breakages","text":"<p>Griffe is able to compare two snapshots of your project to detect API breakages between the old and the new snapshot. By snapshot we mean a specific point in your Git history. For example, you can ask Griffe to compare your current code against a specific tag.</p> <p>By default, Griffe will compare the current code to the latest tag:</p> <pre><code>$ griffe check mypackage\n</code></pre> <p>To specify another Git reference to check against, use the <code>--against</code> or <code>-a</code> option:</p> <pre><code>$ griffe check mypackage -a 0.2.0\n</code></pre> <p>You can specify a Git tag, commit (hash), or even a branch: Griffe will create a worktree at this reference in a temporary directory, and clean it up after finishing.</p> <p>If you want to also specify the base reference to use (instead of the current code), use the <code>--base</code> or <code>-b</code> option. Some examples:</p> <pre><code>$ griffe check mypackage -b HEAD -a 2.0.0\n$ griffe check mypackage -b 2.0.0 -a 1.0.0\n$ griffe check mypackage -b fix-issue-90 -a 1.2.3 $ griffe check mypackage -b 8afcfd6e </code></pre> <p>Important:</p> <p>Remember that the base is the most recent reference, and the one we compare it against is the oldest one.</p> <p>The package name you pass to <code>griffe check</code> must be found relatively to the repository root. For Griffe to find packages in subfolders, pass the parent subfolder to the  <code>--search</code> or <code>-s</code> option. Example for <code>src</code>-layouts:</p> <pre><code>$ griffe check -s src griffe\n</code></pre> <p>Example in a monorepo, within a deeper file tree:</p> <pre><code>$ griffe check -s back/services/identity-provider/src identity_provider\n</code></pre>"},{"location":"checking/#detected-breakages","title":"Detected breakages","text":"<p>In this section, we will describe the breakages that Griffe detects, giving some code examples and hints on how to properly communicate breakages with deprecation messages before actually releasing them.</p> <p>Obviously, these explanations and the value of the hints we provide depend on your definition of what is a public Python API. There is no clear and generally agreed upon definition of \"public Python API\". A public Python API might vary from one project to another.  In essence, your public API is what you say it is.</p> <p>However, we do have conventions like prefixing objects with an underscore to tell users these objects are part of the private API, or internals, and therefore should not be used. For the rest, Griffe can detect changes that will trigger immediate errors in your users code', and changes that might cause issues in your users' code. Although the latter sound less impactful, they do have a serious impact, because they can silently change the behavior of your users' code, leading to issues that are hard to detect, understand and fix.</p> <p>Knowing that every change is a breaking change, the more we detect and document (potentially) breaking changes in our changelogs, the better.</p>"},{"location":"checking/#parameter-moved","title":"Parameter moved","text":"<p>Positional parameter was moved.</p> <p>Moving the order of positional parameters can silently break your users' code.</p> before<pre><code># your code\ndef greet(prefix, name):\n    print(prefix + \" \" + name)\n\n# user's code\ngreet(\"hello\", \"world\")\n</code></pre> after<pre><code># your code\ndef greet(name, prefix):\n    print(prefix + \" \" + name)\n\n# user's code: no immediate error, broken behavior\ngreet(\"hello\", \"world\")\n</code></pre> <p>Note</p> <p>Moving required parameters around is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. The function expects a number of arguments, and the developer pass it this same number of arguments: the contract is fulfilled. But parameters very often have specific meaning, and changing their order will silently lead (no immediate error) to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p> <p>Hint</p> <p>If you often add, move or remove parameters, consider making them keyword-only, so that their order doesn't matter.</p> before<pre><code>def greet(*, prefix, name):\n    print(prefix + \" \" + name)\n\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> after<pre><code>def greet(*, name, prefix):\n    print(prefix + \" \" + name)\n\n# still working as expected\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre>"},{"location":"checking/#parameter-removed","title":"Parameter removed","text":"<p>Parameter was removed.</p> <p>Removing a parameter can immediately break your users' code.</p> before<pre><code># your code\ndef greet(prefix, name):\n    print(prefix + \" \" + name)\n\n# user's code\ngreet(\"hello\", \"world\")\n</code></pre> after<pre><code># your code\ndef greet(name):\n    print(\"hello \" + name)\n\n# user's code: immediate error\ngreet(\"hello\", \"world\")\n\n# even with keyword parameters: immediate error\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> <p>Hint</p> <p>Allow a deprecation period for the removed parameter by swallowing it in a variadic positional parameter, a variadic keyword parameter, or both.</p> positional-onlykeyword-onlypositional or keyword before<pre><code># your parameters are positional-only parameters (difficult deprecation)\ndef greet(prefix, name, /):\n    print(prefix + \" \" + name)\n\ngreet(\"hello\", \"world\")\n</code></pre> after<pre><code># swallow prefix using a variadic positional parameter\ndef greet(*args):\n    if len(args) == 2:\n        prefix, name = args\n    elif len(args) == 1:\n        prefix = None\n        name = args[0]\n    else:\n        raise ValueError(\"missing parameter 'name'\")\n    if prefix is not None:\n        warnings.warn(DeprecationWarning, \"prefix is deprecated\")\n    print(\"hello \" + name)\n\n# still working as expected\ngreet(\"hello\", \"world\")\n</code></pre> before<pre><code># your parameters are keyword-only parameters (easy deprecation)\ndef greet(*, prefix, name):\n    print(prefix + \" \" + name)\n\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> after<pre><code># swallow prefix using a variadic keyword parameter\ndef greet(name, **kwargs):\n    prefix = kwargs.get(\"prefix\", None)\n    if prefix is not None:\n        warnings.warn(DeprecationWarning, \"prefix is deprecated\")\n    print(\"hello \" + name)\n\n# still working as expected\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> before<pre><code># your parameters are positional or keyword parameters (very difficult deprecation)\ndef greet(prefix, name):\n    print(prefix + \" \" + name)\n\ngreet(\"hello\", name=\"world\")\n</code></pre> after<pre><code># no other choice than swallowing both forms...\n# ignoring the deprecated parameter becomes quite complex\ndef greet(*args, **kwargs):\n    if len(args) == 2:\n        prefix, name = args\n    elif len(args) == 1:\n        prefix = None\n        name = args[0]\n    if \"name\" in kwargs:\n        name = kwargs[\"name\"]\n    if \"prefix\" in kwargs:\n        prefix = kwargs[\"prefix\"]\n    if prefix is not None:\n        warnings.warn(DeprecationWarning, \"prefix is deprecated\")\n    print(\"hello \" + name)\n\n# still working as expected\ngreet(\"hello\", \"world\")\ngreet(\"hello\", name=\"world\")\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre>"},{"location":"checking/#parameter-changed-kind","title":"Parameter changed kind","text":"<p>Parameter kind was changed</p> <p>Changing the kind of a parameter to another (positional-only, keyword-only, positional or keyword, variadic positional, variadic keyword) can immediately break your users' code.</p> before<pre><code># your code\ndef greet(name):\n    print(\"hello \" + name)\n\ndef greet2(name):\n    print(\"hello \" + name)\n\n# user's code: all working fine\ngreet(\"tim\")\ngreet(name=\"tim\")\ngreet2(\"tim\")\ngreet2(name=\"tim\")\n</code></pre> after<pre><code># your code\ndef greet(name, /):\n    print(\"hello \" + name)\n\ndef greet2(*, name):\n    print(\"hello \" + name)\n\n# user's code: working as expected\ngreet(\"tim\")\ngreet2(name=\"tim\")\n\n# immediate error\ngreet(name=\"tim\")\ngreet2(\"tim\")\n</code></pre> <p>Hint</p> <p>Although it actually is a breaking change, changing your positional or keyword parameters' kind to keyword-only makes your public function more robust to future changes (forward-compatibility).</p> <p>For functions with lots of optional parameters, and a few (one or two) required parameters, it can be a good idea to accept the required parameters as positional or keyword, while accepting the optional parameters as keyword-only parameters:</p> <pre><code>def greet(name, *, punctuation=False, bold=False, italic=False):\n    ...\n\n# simple cases are easy to write\ngreet(\"tim\")\ngreet(\"tiff\")\n\n# complex cases are never ambiguous\ngreet(\"tim\", italic=True, bold=True)\ngreet(name=\"tiff\", bold=True, punctuation=True)\n</code></pre> <p>Positional-only parameters are useful in some specific cases, such as when a function takes two or more numeric values, and their order does not matter, and naming the parameters would not make sense:</p> <pre><code>def multiply3(a, b, c, /):\n    return a * b * c\n\n# all the following are equivalent\nmultiply3(4, 2, 3)\nmultiply3(4, 3, 2)\nmultiply3(2, 3, 4)\n# etc.\n</code></pre>"},{"location":"checking/#parameter-changed-default","title":"Parameter changed default","text":"<p>Parameter default was changed</p> <p>Changing the default value of a parameter can silently break your users' code.</p> before<pre><code># your code\ndef compute_something(value: int, to_float=True):\n    value = ...\n    if to_float:\n        return float(value)\n    return value\n\n# user's code: condition is entered\nif isinstance(compute_something(7), float):\n    ...\n</code></pre> after<pre><code># your code\ndef compute_something(value: int, to_float=False):\n    value = ...\n    if to_float:\n        return float(value)\n    return value\n\n# user's code: condition is not entered anymore\nif isinstance(compute_something(7), float):\n    ...\n</code></pre> <p>Note</p> <p>Changing default value of parameters is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. Not using the parameter still provides the argument with a default value: the contract is fulfilled. But default values very often have specific meaning, and changing them will silently lead (no immediate error) to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p> <p>Hint</p> <p>Allow a deprecation period for the old default value by using a sentinel value to detect when the parameter wasn't used by the user:</p> in the coming release<pre><code>_sentinel = object()\n\ndef compute_something(value: int, to_float=_sentinel):\n    value = ...\n    if to_float is _sentinel:\n        to_float = True\n        warnings.warn(\n            DeprecationWarning,\n            \"default value of 'to_float' will change from True to False, \"\n            \"please provide 'to_float=True' if you want to retain the current behavior\"\n        )\n    if to_float:\n        return float(value)\n    return value\n</code></pre> <p>In a later release you can remove the sentinel, the deprecation warning, and set <code>False</code> as default to <code>to_float</code>.</p> in a later release<pre><code>def compute_something(value: int, to_float=False):\n    value = ...\n    if to_float:\n        return float(value)\n    return value\n</code></pre>"},{"location":"checking/#parameter-changed-required","title":"Parameter changed required","text":"<p>Parameter is now required</p> <p>Changing an optional parameter to a required one (by removing its default value) can immediately break your users' code.</p> before<pre><code># your code\ndef greet(name, prefix=\"hello\"):\n    print(prefix + \" \" + name)\n\n# user's code\ngreet(\"tiff\")\n</code></pre> after<pre><code># your code\ndef greet(name, prefix):\n    print(prefix + \" \" + name)\n\n# user's code: immediate error\ngreet(\"tiff\")\n</code></pre> <p>Hint</p> <p>Allow a deprecation period for the default value by using a sentinel value to detect when the parameter wasn't used by the user:</p> in the coming release<pre><code>_sentinel = object()\n\ndef greet(name, prefix=_sentinel):\n    if prefix is _sentinel:\n        prefix = \"hello\"\n        warnings.warn(DeprecationWarning, \"'prefix' will become required in the next release\")\n    print(prefix + \" \" + name)\n</code></pre> <p>In a later release you can remove the sentinel, the deprecation warning, and the default value of <code>prefix</code>.</p> in a later release<pre><code>def greet(name, prefix):\n    print(prefix + \" \" + name)\n</code></pre>"},{"location":"checking/#parameter-added-required","title":"Parameter added required","text":"<p>Parameter was added as required</p> <p>Adding a new, required parameter can immediately break your users' code.</p> before<pre><code># your code\ndef greet(name):\n    print(\"hello \" + name)\n\n# user's code\ngreet(\"tiff\")\n</code></pre> after<pre><code># your code\ndef greet(name, prefix):\n    print(prefix + \" \" + name)\n\n# user's code: immediate error\ngreet(\"tiff\")\n</code></pre> <p>Hint</p> <p>You can delay (or avoid) and inform your users about the upcoming breakage by temporarily (or permanently) providing a default value for the new parameter:</p> in the coming release<pre><code>def greet(name, prefix=\"hello\"):\n    print(prefix + \" \" + name)\n</code></pre>"},{"location":"checking/#return-changed-type","title":"Return changed type","text":"<p>Return types are incompatible</p> <p>Not yet supported!</p> <p> Telling if a type construct is compatible with another one is not trivial, especially statically. Support for this will be implemented later.</p>"},{"location":"checking/#object-removed","title":"Object removed","text":"<p>Public object was removed</p> <p>Removing a public object from a module can immediately break your users' code.</p> before<pre><code># your/module.py\nspecial_thing = \"hey\"\n\n# user/module.py\nfrom your.module import special_thing\n\n# other/user/module.py\nfrom your import module\nprint(module.special_thing)\n</code></pre> after<pre><code># user/module.py: import error\nfrom your.module import special_thing\n\n# other/user/module.py: attribute error\nfrom your import module\nprint(module.special_thing)\n</code></pre> <p>Hint</p> <p>Allow a deprecation period by declaring a module-level <code>__getattr__</code> function that returns the given object while warning about its deprecation:</p> <pre><code>def __getattr__(name):\n    if name == \"special_thing\":\n        warnings.warn(DeprecationWarning, \"'special_thing' is deprecated and will be removed\")\n        return \"hey\"\n</code></pre>"},{"location":"checking/#object-changed-kind","title":"Object changed kind","text":"<p>Public object points to a different kind of object</p> <p>Changing the kind (attribute, function, class, module) of a public object can silently break your users' code.</p> before<pre><code># your code\nclass Factory:\n    def __call__(self, ...):\n        ...\n\nfactory = Factory(...)\n\n# user's code: condition is entered\nif isinstance(factory, Factory):\n    ...\n</code></pre> after<pre><code># your code\nclass Factory:\n    ...\n\ndef factory(...):\n    ...\n\n# user's code: condition is not entered anymore\nif isinstance(factory, Factory):\n    ...\n</code></pre> <p>Note</p> <p>Changing the kind of an object is not really an API breakage, depending on our definition of API, since this won't always raise immediate errors like <code>TypeError</code>. The object is still here and accessed: the contract is fulfilled. But developers sometimes rely on the kind of an object, so changing it will lead to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p>"},{"location":"checking/#attribute-changed-type","title":"Attribute changed type","text":"<p>Attribute types are incompatible</p> <p>Not yet supported!</p> <p> Telling if a type construct is compatible with another one is not trivial, especially statically. Support for this will be implemented later.</p>"},{"location":"checking/#attribute-changed-value","title":"Attribute changed value","text":"<p>Attribute value was changed</p> <p>Changing the value of an attribute can silently break your users' code.</p> before<pre><code># your code\nPY_VERSION = os.getenv(\"PY_VERSION\")\n\n# user's code: condition is entered\nif PY_VERSION is None:\n    ...\n</code></pre> after<pre><code># your code\nPY_VERSION = os.getenv(\"PY_VERSION\", \"3.8\")\n\n# user's code: condition is not entered anymore\nif PY_VERSION is None:\n    ...\n</code></pre> <p>Note</p> <p>Changing the value of an attribute is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. The attribute is still here and accessed: the contract is fulfilled. But developers heavily rely on the value of public attributes, so changing it will lead to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p> <p>Hint</p> <p>Make sure to document the change of value of the attribute in your changelog, particularly the previous and new range of values it can take.</p>"},{"location":"checking/#class-removed-base","title":"Class removed base","text":"<p>Base class was removed</p> <p>Removing a class from another class' bases can silently break your users' code.</p> before<pre><code># your code\nclass A: ...\nclass B: ...\nclass C(A, B): ...\n\n# user's code: condition is entered\nif B in klass.__bases__:\n    ...\n</code></pre> after<pre><code># your code\nclass A: ...\nclass B: ...\nclass C(A): ...\n\n# user's code: condition is not entered anymore\nif B in klass.__bases__:\n    ...\n</code></pre> <p>Note</p> <p>Unless inherited members are lost in the process, removing a class base is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. The class is here, its members as well: the contract is fulfilled. But developers sometimes rely on the actual bases of a class, so changing them will lead to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p>"},{"location":"checking/#output-style","title":"Output style","text":"<p>By default, Griffe will print each detected breakage on a single line, on <code>stderr</code>:</p> <pre><code>$ griffe check griffe -ssrc -b0.24.0 -a0.23.0\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported): Parameter default was changed: True -&gt; None\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules): Parameter default was changed: True -&gt; None\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(max_iterations): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:308: GriffeLoader.resolve_module_aliases(only_exported): Parameter was removed\nsrc/griffe/loader.py:308: GriffeLoader.resolve_module_aliases(only_known_modules): Parameter was removed\nsrc/griffe/git.py:39: tmp_worktree(commit): Parameter was removed\nsrc/griffe/git.py:39: tmp_worktree(repo): Positional parameter was moved: position: from 2 to 1 (-1)\nsrc/griffe/git.py:75: load_git(commit): Parameter was removed\nsrc/griffe/git.py:75: load_git(repo): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(submodules): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(try_relative_path): Parameter was removed\nsrc/griffe/git.py:75: load_git(extensions): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(search_paths): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(docstring_parser): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(docstring_options): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(lines_collection): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(modules_collection): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(allow_inspection): Parameter kind was changed: positional or keyword -&gt; keyword-only\n\n</code></pre> <p>Depending on the detected breakages, the lines might be hard to read (being too compact), so <code>griffe check</code> also accepts a <code>--verbose</code> or <code>-v</code> option to add some space to the output:</p> <pre><code>$ griffe check griffe -ssrc -b0.24.0 -a0.23.0 --verbose\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported):\nParameter default was changed:\n  Old: True\n  New: None\n\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules):\nParameter default was changed:\n  Old: True\n  New: None\n\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(max_iterations):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/loader.py:308: GriffeLoader.resolve_module_aliases(only_exported):\nParameter was removed\n\nsrc/griffe/loader.py:308: \nGriffeLoader.resolve_module_aliases(only_known_modules):\nParameter was removed\n\nsrc/griffe/git.py:39: tmp_worktree(commit):\nParameter was removed\n\nsrc/griffe/git.py:39: tmp_worktree(repo):\nPositional parameter was moved:\n  Details: position: from 1 to 0 (-1)\n\nsrc/griffe/git.py:75: load_git(commit):\nParameter was removed\n\nsrc/griffe/git.py:75: load_git(repo):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(submodules):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(try_relative_path):\nParameter was removed\n\nsrc/griffe/git.py:75: load_git(extensions):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(search_paths):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(docstring_parser):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(docstring_options):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(lines_collection):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(modules_collection):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\nsrc/griffe/git.py:75: load_git(allow_inspection):\nParameter kind was changed:\n  Old: positional or keyword\n  New: keyword-only\n\n</code></pre>"},{"location":"cli_reference/","title":"CLI reference","text":""},{"location":"cli_reference/#griffe","title":"griffe","text":"<p>Signatures for entire Python programs. </p> <p>Global Options:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit. Commands also accept the -h/--help option.</li> <li><code>-V</code>, <code>--version</code>: show program's version number and exit</li> </ul> <p>Commands:</p>"},{"location":"cli_reference/#dump","title":"dump","text":"<p>Load package-signatures and dump them as JSON.</p> <p>Search Options:</p> <ul> <li><code>-s</code>, <code>--search</code>: Paths to search packages into.</li> </ul> <p>Loading Options:</p> <ul> <li><code>-e</code>, <code>--extensions</code>: A list of extensions to use.</li> <li><code>-X</code>, <code>--no-inspection</code>: Disallow inspection of builtin/compiled/not found modules. Default: <code>True</code>.</li> </ul> <p>Dump Options:</p> <ul> <li><code>packages</code> <code>PACKAGE</code>: Packages to find, load and dump.</li> <li><code>-f</code>, <code>--full</code>: Whether to dump full data in JSON.</li> <li><code>-o</code>, <code>--output</code>: Output file. Supports templating to output each package in its own file, with <code>{package}</code>. Default: <code>sys.stdout</code>.</li> <li><code>-d</code>, <code>--docstyle</code>: The docstring style to parse.</li> <li><code>-D</code>, <code>--docopts</code>: The options for the docstring parser.</li> <li><code>-y</code>, <code>--sys-path</code>: Whether to append <code>sys.path</code> to search paths specified with <code>-s</code>.</li> <li><code>-r</code>, <code>--resolve-aliases</code>: Whether to resolve aliases.</li> <li><code>-I</code>, <code>--resolve-implicit</code>: Whether to resolve implicitely exported aliases as well. Aliases are explicitely exported when defined in <code>__all__</code>.</li> <li><code>-U</code>, <code>--resolve-external</code>: Whether to resolve aliases pointing to external/unknown modules (not loaded directly).</li> <li><code>-S</code>, <code>--stats</code>: Show statistics at the end.</li> </ul> <p>Debugging Options:</p> <ul> <li><code>-L</code>, <code>--log-level</code> <code>LEVEL</code>: Set the log level: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>. Default: <code>INFO</code>.</li> </ul> <p>Common Options:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> </ul>"},{"location":"cli_reference/#check","title":"check","text":"<p>Check for API breakages or possible improvements.</p> <p>Search Options:</p> <ul> <li><code>-s</code>, <code>--search</code>: Paths to search packages into.</li> </ul> <p>Loading Options:</p> <ul> <li><code>-e</code>, <code>--extensions</code>: A list of extensions to use.</li> <li><code>-X</code>, <code>--no-inspection</code>: Disallow inspection of builtin/compiled/not found modules. Default: <code>True</code>.</li> </ul> <p>Debugging Options:</p> <ul> <li><code>-L</code>, <code>--log-level</code> <code>LEVEL</code>: Set the log level: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>. Default: <code>INFO</code>.</li> </ul> <p>Common Options:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> </ul> <p>Check Options:</p> <ul> <li><code>package</code> <code>PACKAGE</code>: Package to find, load and check, as path.</li> <li><code>-a</code>, <code>--against</code> <code>REF</code>: Older Git reference (commit, branch, tag) to check against. Default: load latest tag.</li> <li><code>-b</code>, <code>--base-ref</code> <code>BASE_REF</code>: Git reference (commit, branch, tag) to check. Default: load current code.</li> <li><code>--color</code>: Force enable colors in the output.</li> <li><code>--no-color</code>: Force disable colors in the output.</li> <li><code>-v</code>, <code>--verbose</code>: Verbose output.</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd griffe\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run griffe [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, see examples of tasks and run configurations.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-2--credits","title":"Credits","text":"<p>These projects were used to build griffe. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-2--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License"},{"location":"credits/#exec-2--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>attrs</code> Classes Without Boilerplate <code>&gt;=22.2.0</code> <code>23.1.0</code> MIT License <code>babel</code> Internationalization utilities <code>~=2.12</code> <code>2.12.1</code> BSD <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.1</code> <code>23.9.1</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.13</code> <code>1.16.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.2.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.3.1</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.0.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.3</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11</code> <code>1.0.1</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=1.0</code> <code>2.2.0</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.35</code> BSD <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>hypothesis</code> A library for property-based testing <code>[lark]&gt;=6.84.1</code> <code>6.84.3</code> MPL-2.0 <code>hypothesmith</code> Hypothesis strategies for generating Python programs, something like CSmith <code>&gt;=0.2.0</code> <code>0.3.0</code> MPL 2.0 <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.8.0</code> ? <code>importlib-resources</code> Read resources from Python packages <code>&gt;=1.4.0; python_version &lt; \"3.9\"</code> <code>6.0.1</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>jsonschema</code> An implementation of JSON Schema validation for Python <code>&gt;=4.17.3</code> <code>4.19.0</code> MIT <code>jsonschema-specifications</code> The JSON Schema meta-schemas and vocabularies, exposed as a Registry <code>&gt;=2023.03.6</code> <code>2023.7.1</code> MIT <code>lark</code> a modern parsing library <code>&gt;=0.10.1</code> <code>1.1.7</code> MIT <code>libcst</code> A concrete syntax tree with AST-like properties for Python 3.5, 3.6, 3.7, 3.8, 3.9, and 3.10 programs. <code>&gt;=1.0.1</code> <code>1.0.1</code> MIT License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.9</code> <code>4.9.3</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.4.4</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.6.0.1.0.1</code> ISC <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mdurl</code> Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.2</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of github committers and other useful GIT info such as last modified date <code>&gt;=1.1</code> <code>1.2.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.2.8+insiders.4.40.4</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.1</code> <code>1.1.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.6.4</code> <code>0.7.1</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.18</code> <code>0.23.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.6.2.1.5.0</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>1.5.1</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.1</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>pkgutil-resolve-name</code> Resolve a name to an object. <code>&gt;=1.3.10; python_version &lt; \"3.9\"</code> <code>1.3.10</code> ? <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.10.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.16.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.3</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.4.2</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3.post1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.2</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>referencing</code> JSON Referencing + Python <code>&gt;=0.28.4</code> <code>0.30.2</code> MIT <code>regex</code> Alternative regular expression module, to replace re. <code>~=2023.8</code> <code>2023.8.8</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>rich</code> Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.6.0</code> <code>13.5.2</code> MIT <code>rpds-py</code> Python bindings to Rust's persistent data structures (rpds) <code>&gt;=0.7.1</code> <code>0.10.2</code> MIT <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.32</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.12\"</code> <code>0.2.7</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0.246</code> <code>0.0.287</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.1</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>68.2.0</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.0</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.5</code> MIT License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.4.2.10</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.11</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.7</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.7.1</code> Python Software Foundation License <code>typing-inspect</code> Runtime inspection utilities for typing module. <code>&gt;=0.4.0</code> <code>0.9.0</code> MIT <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.4</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.16.2</code> ? <p>More credits from the author</p>"},{"location":"docstrings/","title":"Docstrings","text":"<p>Griffe provides different docstring parsers allowing to extract even more structured data from source code.</p> <p>The available parsers are:</p> <ul> <li><code>google</code>, to parse Google-style docstrings,     see Napoleon's documentation</li> <li><code>numpy</code>, to parse Numpydoc docstrings,     see Numpydoc's documentation</li> <li><code>sphinx</code>, to parse Sphinx-style docstrings,     see Sphinx's documentation</li> </ul>"},{"location":"docstrings/#syntax","title":"Syntax","text":"<p>Most of the time, the syntax specified in the aforementioned docs is supported. In some cases, the original syntax is not supported, or is supported but with subtle differences. We will try to document these differences in the following sections.</p> <p>No assumption is made on the markup used in docstrings: it's retrieved as regular text. Tooling making use of Griffe can then choose to render the text as if it is Markdown, or AsciiDoc, or reStructuredText, etc..</p>"},{"location":"docstrings/#google-style","title":"Google-style","text":"<p>Sections are written like this:</p> <pre><code>section identifier: optional section title\n    section contents\n</code></pre> <p>All sections identifiers are case-insensitive. All sections support multiple lines in descriptions, as well as blank lines. The first line must not be blank. Each section must be separated from contents above by a blank line.</p> <p>\u274c This is invalid and will be parsed as regular markup:</p> <pre><code>Some text.\nNote: # (1)!\n    Some information.\n\n    Blank lines allowed.\n</code></pre> <ol> <li>Missing blank line above.</li> </ol> <p>\u274c This is invalid and will be parsed as regular markup:</p> <pre><code>Some text.\n\nNote: # (1)!\n\n    Some information.\n\n    Blank lines allowed.\n</code></pre> <ol> <li>Extraneous blank line below.</li> </ol> <p>\u2705 This is valid and will parsed as a text section followed by a note admonition:</p> <pre><code>Some text.\n\nNote:\n    Some information.\n\n    Blank lines allowed.\n</code></pre> <p>Find out possibly invalid section syntax by grepping for \"reasons\" in Griffe debug logs:</p> <pre><code>griffe dump -Ldebug -o/dev/null -fdgoogle your_package 2&gt;&amp;1 | grep reasons\n</code></pre> <p>Some sections support documenting multiple items (attributes, parameters, etc.). When multiple items are supported, each item description can use multiple lines, and continuation lines must be indented once more so that the parser is able to differentiate items.</p> <pre><code>def foo(a, b):\n\"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n            Continuation line 1.\n\n            Continuation line 2.\n        b: Here's b.\n    \"\"\"\n</code></pre> <p>It's possible to start a description with a newline if you find it less confusing:</p> <pre><code>def foo(a, b):\n\"\"\"Foo.\n\n    Parameters:\n        a:\n            Here's a.\n            Continuation line 1.\n\n            Continuation line 2.\n        b: Here's b.\n    \"\"\"\n</code></pre>"},{"location":"docstrings/#parser-options","title":"Parser options","text":"<p>The parser accepts a few options:</p> <ul> <li><code>ignore_init_summary</code>: Ignore the first line in <code>__init__</code> methods' docstrings.     Useful when merging <code>__init__</code> docstring into class' docstrings     with mkdocstrings-python's <code>merge_init_into_class</code> option. Default: false.</li> <li><code>returns_multiple_items</code>: Parse Returns sections as if they contain multiple items.     It means that continuation lines must be indented. Default: true.</li> <li><code>returns_named_value</code>: Whether to parse <code>thing: Description</code> in Returns sections as a name and description,     rather than a type and description. When true, type must be wrapped in parentheses: <code>(int): Description.</code>.     When false, parentheses are optional but the items cannot be named: <code>int: Description</code>. Default: true.</li> <li><code>returns_type_in_property_summary</code>: Whether to parse the return type of properties     at the beginning of their summary: <code>str: Summary of the property</code>. Default: false.</li> <li><code>trim_doctest_flags</code>: Remove the doctest flags written as comments in <code>pycon</code> snippets within a docstring.     These flags are used to alter the behavior of doctest when testing docstrings,     and should not be visible in your docs. Default: true.</li> <li><code>warn_unknown_params</code>: Warn about parameters documented in docstrings that do not appear in the signature. Default: true.</li> </ul>"},{"location":"docstrings/#attributes","title":"Attributes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Attributes sections allow to document attributes of a module, class, or class instance. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nAttributes:\n    foo: Description for `foo`.\n    bar: Description for `bar`.\n\"\"\"\n\nfoo: int = 0\nbar: bool = True\n\n\nclass MyClass:\n\"\"\"My class.\n\n    Attributes:\n        foofoo: Description for `foofoo`.\n        barbar: Description for `barbar`.\n    \"\"\"\n\n    foofoo: int = 0\n\n    def __init__(self):\n        self.barbar: bool = True\n</code></pre> <p>Type annotations are fetched from the related attributes definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My module.\n\nAttributes:\n    foo (Integer): Description for `foo`.\n    bar (Boolean): Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting an attribute with <code>attr_name (attr_type): Attribute description</code>, <code>attr_type</code> will be resolved using the scope of the docstrings' parent object (class or module). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"docstrings/#functionsmethods","title":"Functions/Methods","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Functions or Methods sections allow to document functions of a module, or methods of a class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nFunctions:\n    foo: Description for `foo`.\n    bar: Description for `bar`.\n\"\"\"\n\n\ndef foo():\n    return \"foo\"\n\n\ndef bar(baz: int) -&gt; int:\n    return baz * 2\n\n\nclass MyClass:\n\"\"\"My class.\n\n    Methods:\n        foofoo: Description for `foofoo`.\n        barbar: Description for `barbar`.\n    \"\"\"\n\n    def foofoo(self):\n        return \"foofoo\"\n\n    @staticmethod\n    def barbar():\n        return \"barbar\"\n</code></pre> <p>It's possible to write the function/method signature as well as its name:</p> <pre><code>\"\"\"\nFunctions:\n    foo(): Description for `foo`.\n    bar(baz=1): Description for `bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important parameters.</p>"},{"location":"docstrings/#classes","title":"Classes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Classes sections allow to document classes of a module or class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nClasses:\n    Foo: Description for `foo`.\n    Bar: Description for `bar`.\n\"\"\"\n\n\nclass Foo:\n    ...\n\n\nclass Bar:\n    def __init__(self, baz: int) -&gt; int:\n        return baz * 2\n\n\nclass MyClass:\n\"\"\"My class.\n\n    Classes:\n        FooFoo: Description for `foofoo`.\n        BarBar: Description for `barbar`.\n    \"\"\"\n\n    class FooFoo:\n        ...\n\n    class BarBar:\n        ...\n</code></pre> <p>It's possible to write the class signature as well as its name:</p> <pre><code>\"\"\"\nFunctions:\n    Foo(): Description for `Foo`.\n    Bar(baz=1): Description for `Bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important initialization parameters.</p>"},{"location":"docstrings/#modules","title":"Modules","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Modules sections allow to document submodules of a module. They should be used in modules docstrings only.</p> <pre><code>\ud83d\udcc1 my_pkg/\n\u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n\u251c\u2500\u2500 \ud83d\udcc4 foo.py\n\u2514\u2500\u2500 \ud83d\udcc4 bar.py\n</code></pre> my_pkg/__init__.py<pre><code>\"\"\"My package.\n\nModules:\n    foo: Description for `foo`.\n    bar: Description for `bar`.\n\"\"\"\n</code></pre>"},{"location":"docstrings/#deprecated","title":"Deprecated","text":"<p>Deprecated sections allow to document a deprecation that happened at a particular version. They can be used in every docstring.</p> <pre><code>\"\"\"My module.\n\nDeprecated:\n    1.2: The `foo` attribute is deprecated.\n\"\"\"\n\nfoo: int = 0\n</code></pre>"},{"location":"docstrings/#examples","title":"Examples","text":"<p>Examples sections allow to add examples of Python code without the use of markup code blocks. They are a mix of prose and interactive console snippets. They can be used in every docstring.</p> <pre><code>\"\"\"My module.\n\nExamples:\n    Some explanation of what is possible.\n\n    &gt;&gt;&gt; print(\"hello!\")\n    hello!\n\n    Blank lines delimit prose vs. console blocks.\n\n    &gt;&gt;&gt; a = 0\n    &gt;&gt;&gt; a += 1\n    &gt;&gt;&gt; a\n    1\n\"\"\"\n</code></pre> <p>Not the same as Example sections.</p> <p>Example (singular) sections are parsed as admonitions. Console code blocks will only be understood in Examples (plural) sections.</p>"},{"location":"docstrings/#parameters","title":"Parameters","text":"<ul> <li>Aliases: Args, Arguments, Params</li> <li>Multiple items allowed</li> </ul> <p>Parameters sections allow to document parameters of a function. They are typically used in functions docstrings, but can also be used in dataclasses docstrings.</p> <pre><code>def foo(a: int, b: str):\n\"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n    \"\"\"\n</code></pre> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Foo:\n\"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n    \"\"\"\n\n    foo: int\n    bar: str\n</code></pre> <p>Type annotations are fetched from the related parameters definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My function.\n\nParameters:\n    foo (Integer): Description for `foo`.\n    bar (String): Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting a parameter with <code>param_name (param_type): Parameter description</code>, <code>param_type</code> will be resolved using the scope of the function (or class). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"docstrings/#other-parameters","title":"Other Parameters","text":"<ul> <li>Aliases: Keyword Args, Keyword Arguments, Other Args, Other Arguments, Other Params</li> <li>Multiple items allowed</li> </ul> <p>Other parameters sections allow to document secondary parameters such as variadic keyword arguments, or parameters that should be of lesser interest to the user. They are used the same way Parameters sections are, but can also be useful in decorators / to document returned callables.</p> <pre><code>def foo(a, b, **kwargs):\n\"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n\n    Other parameters:\n        c (int): Here's c.\n        d (bool): Here's d.\n    \"\"\"\n</code></pre> <pre><code>def foo(a, b):\n\"\"\"Returns a callable.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n\n    Other parameters: Parameters of the returned callable:\n        c (int): Here's c.\n        d (bool): Here's d.\n    \"\"\"\n\n    def inner(c, d):\n        ...\n\n    return inner\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See the same tip for parameters.</p>"},{"location":"docstrings/#raises","title":"Raises","text":"<ul> <li>Aliases: Exceptions</li> <li>Multiple items allowed</li> </ul> <p>Raises sections allow to document exceptions that are raised by a function. They are usually only used in functions docstrings.</p> <pre><code>def foo(a: int):\n\"\"\"Foo.\n\n    Parameters:\n        a: A value.\n\n    Raises:\n        ValueError: When `a` is less than 0.\n    \"\"\"\n    if a &lt; 0:\n        raise ValueError(\"message\")\n</code></pre> <p>Exceptions names are resolved using the function's scope.</p> <p><code>ValueError</code> and other built-in exceptions are resolved as such. You can document custom exception, using the names available in the current scope, for example <code>my_exceptions.MyCustomException</code> or <code>MyCustomException</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"docstrings/#warns","title":"Warns","text":"<ul> <li>Aliases: Warnings</li> <li>Multiple items allowed</li> </ul> <p>Warns sections allow to document warnings emitted by the following code. They are usually only used in functions docstrings.</p> <pre><code>import warnings\n\n\ndef foo():\n\"\"\"Foo.\n\n    Warns:\n        UserWarning: To annoy users.\n    \"\"\"\n    warnings.warn(\"Just messing with you.\", UserWarning)\n</code></pre> <p>Warnings names are resolved using the function's scope.</p> <p><code>UserWarning</code> and other built-in warnings are resolved as such. You can document custom warnings, using the names available in the current scope, for example <code>my_warnings.MyCustomWarning</code> or <code>MyCustomWarning</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"docstrings/#yields","title":"Yields","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Yields sections allow to document values that generator yield. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Iterator\n\n\ndef foo() -&gt; Iterator[int]:\n\"\"\"Foo.\n\n    Yields:\n        Integers from 0 to 9.\n    \"\"\"\n    for i in range(10):\n        yield i\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code> or <code>typing.Iterator</code>. If your generator yields tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>from datetime import datetime\n\n\ndef foo() -&gt; Iterator[tuple[float, float, datetime]]:\n\"\"\"Foo.\n\n    Yields:\n        x: Absissa.\n        y: Ordinate.\n        t: Time.\n\n    ...\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nYields:\n    x (int): Absissa.\n    y (int): Ordinate.\n    t (int): Timestamp.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"docstrings/#receives","title":"Receives","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Receives sections allow to document values that can be sent to generators using their <code>send</code> method. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Generator\n\n\ndef foo() -&gt; Generator[int, str, None]:\n\"\"\"Foo.\n\n    Receives:\n        reverse: Reverse the generator if `\"reverse\"` is received.\n\n    Yields:\n        Integers from 0 to 9.\n\n    Examples:\n        &gt;&gt;&gt; gen = foo()\n        &gt;&gt;&gt; next(gen)\n        0\n        &gt;&gt;&gt; next(gen)\n        1\n        &gt;&gt;&gt; next(gen)\n        2\n        &gt;&gt;&gt; gen.send(\"reverse\")\n        2\n        &gt;&gt;&gt; next(gen)\n        1\n        &gt;&gt;&gt; next(gen)\n        0\n        &gt;&gt;&gt; next(gen)\n        Traceback (most recent call last):\n          File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n        StopIteration\n    \"\"\"\n    for i in range(10):\n        received = yield i\n        if received == \"reverse\":\n            for j in range(i, -1, -1):\n                yield j\n            break\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code>. If your generator is able to receive tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; Generator[int, tuple[str, bool], None]:\n\"\"\"Foo.\n\n    Receives:\n        mode: Some mode.\n        flag: Some flag.\n\n    ...\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReceives:\n    mode (ModeEnum): Some mode.\n    flag (int): Some flag.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"docstrings/#returns","title":"Returns","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Returns sections allow to document values returned by functions. They should be used only in functions docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>import random\n\n\ndef foo() -&gt; int:\n\"\"\"Foo.\n\n    Returns:\n        A random integer.\n    \"\"\"\n    return random.randint(0, 100)\n</code></pre> <p>Type annotations are fetched from the function return annotation. If your function returns tuples of values, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; tuple[bool, float]:\n\"\"\"Foo.\n\n    Returns:\n        success: Whether it succeeded.\n        precision: Final precision.\n\n    ...\n    \"\"\"\n    ...\n</code></pre> <p>You have to indent each continuation line when documenting returned values, even if there's only one value returned:</p> <pre><code>\"\"\"Foo.\n\nReturns:\n    success: Whether it succeeded.\n        A longer description of what is considered success,\n        and what is considered failure.\n\"\"\"\n</code></pre> <p>If you don't want to indent continuation lines for the only returned value, use the <code>returns_multiple_items=False</code> parser option.</p> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReturns:\n    success (int): Whether it succeeded.\n    precision (Decimal): Final precision.\n\"\"\"\n</code></pre> <p>If you want to specify the type without a name, you still have to wrap the type in parentheses:</p> <pre><code>\"\"\"Foo.\n\nReturns:\n    (int): Whether it succeeded.\n    (Decimal): Final precision.\n\"\"\"\n</code></pre> <p>If you don't want to wrap the type in parentheses, use the <code>returns_named_value=False</code> parser option. Setting it to false will disallow specifying a name.</p> <p>Types in docstrings are resolved using the docstrings' function scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"docstrings/#numpydoc-style","title":"Numpydoc-style","text":"<p>Sections are written like this:</p> <pre><code>section identifier\n------------------\nsection contents\n</code></pre> <p>All sections identifiers are case-insensitive. All sections support multiple lines in descriptions.</p> <p>Some sections support documenting items items. Item descriptions start on a new, indented line. When multiple items are supported, each item description can use multiple lines.</p> <pre><code>def foo(a, b):\n\"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n        Continuation line 1.\n\n        Continuation line 2.\n    b\n        Here's b.\n    \"\"\"\n</code></pre> <p>For items that have an optional name and type, several syntaxes are supported:</p> <ul> <li> <p>specifying both the name and type:</p> <pre><code>\"\"\"\nname : type\n    description\n\"\"\"\n</code></pre> </li> <li> <p>specifying just the name:</p> <pre><code>\"\"\"\nname\n    description\n\"\"\"\n</code></pre> <p>or</p> <pre><code>\"\"\"\nname :\n    description\n\"\"\"\n</code></pre> </li> <li> <p>specifying just the type:</p> <pre><code>\"\"\"\n: type\n    description\n\"\"\"\n</code></pre> </li> <li> <p>specifying neither the name nor type:</p> <pre><code>\"\"\"\n:\n    description\n\"\"\"\n</code></pre> </li> </ul>"},{"location":"docstrings/#parser-options_1","title":"Parser options","text":"<p>The parser accepts a few options:</p> <ul> <li><code>ignore_init_summary</code>: Ignore the first line in <code>__init__</code> methods' docstrings.     Useful when merging <code>__init__</code> docstring into class' docstrings     with mkdocstrings-python's <code>merge_init_into_class</code> option. Default: false.</li> <li><code>trim_doctest_flags</code>: Remove the doctest flags written as comments in <code>pycon</code> snippets within a docstring.     These flags are used to alter the behavior of doctest when testing docstrings,     and should not be visible in your docs. Default: true.</li> <li><code>warn_unknown_params</code>: Warn about parameters documented in docstrings that do not appear in the signature. Default: true.</li> <li><code>allow_section_blank_line</code>: Allow blank lines in sections' content.     When false, a blank line finishes the current section.     When true, single blank lines are kept as part of the section.     You can terminate sections with double blank lines. Default: false.</li> </ul>"},{"location":"docstrings/#attributes_1","title":"Attributes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Attributes sections allow to document attributes of a module, class, or class instance. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nAttributes\n----------\nfoo\n    Description for `foo`.\nbar\n    Description for `bar`.\n\"\"\"\n\nfoo: int = 0\nbar: bool = True\n\n\nclass MyClass:\n\"\"\"My class.\n\n    Attributes\n    ----------\n    foofoo\n        Description for `foofoo`.\n    barbar\n        Description for `barbar`.\n    \"\"\"\n\n    foofoo: int = 0\n\n    def __init__(self):\n        self.barbar: bool = True\n</code></pre> <p>Type annotations are fetched from the related attributes definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My module.\n\nAttributes\n----------\nfoo : Integer\n    Description for `foo`.\nbar : Boolean\n    Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting an attribute with <code>attr_name : attr_type</code>, <code>attr_type</code> will be resolved using the scope of the docstrings' parent object (class or module). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"docstrings/#functionsmethods_1","title":"Functions/Methods","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Functions or Methods sections allow to document functions of a module, or methods of a class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nFunctions\n---------\nfoo\n    Description for `foo`.\nbar\n    Description for `bar`.\n\"\"\"\n\n\ndef foo():\n    return \"foo\"\n\n\ndef bar(baz: int) -&gt; int:\n    return baz * 2\n\n\nclass MyClass:\n\"\"\"My class.\n\n    Methods\n    -------\n    foofoo\n        Description for `foofoo`.\n    barbar\n        Description for `barbar`.\n    \"\"\"\n\n    def foofoo(self):\n        return \"foofoo\"\n\n    @staticmethod\n    def barbar():\n        return \"barbar\"\n</code></pre> <p>It's possible to write the function/method signature as well as its name:</p> <pre><code>\"\"\"\nFunctions\n---------\nfoo()\n    Description for `foo`.\nbar(baz=1)\n    Description for `bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important parameters.</p>"},{"location":"docstrings/#classes_1","title":"Classes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Classes sections allow to document classes of a module or class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nClasses\n-------\nFoo\n    Description for `foo`.\nBar\n    Description for `bar`.\n\"\"\"\n\n\nclass Foo:\n    ...\n\n\nclass Bar:\n    def __init__(self, baz: int) -&gt; int:\n        return baz * 2\n\n\nclass MyClass:\n\"\"\"My class.\n\n    Classes\n    -------\n    FooFoo\n        Description for `foofoo`.\n    BarBar\n        Description for `barbar`.\n    \"\"\"\n\n    class FooFoo:\n        ...\n\n    class BarBar:\n        ...\n</code></pre> <p>It's possible to write the class signature as well as its name:</p> <pre><code>\"\"\"\nFunctions\n---------\nFoo()\n    Description for `Foo`.\nBar(baz=1)\n    Description for `Bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important initialization parameters.</p>"},{"location":"docstrings/#modules_1","title":"Modules","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Modules sections allow to document submodules of a module. They should be used in modules docstrings only.</p> <pre><code>\ud83d\udcc1 my_pkg/\n\u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n\u251c\u2500\u2500 \ud83d\udcc4 foo.py\n\u2514\u2500\u2500 \ud83d\udcc4 bar.py\n</code></pre> my_pkg/__init__.py<pre><code>\"\"\"My package.\n\nModules\n-------\nfoo\n    Description for `foo`.\nbar\n    Description for `bar`.\n\"\"\"\n</code></pre>"},{"location":"docstrings/#deprecated_1","title":"Deprecated","text":"<p>Deprecated sections allow to document a deprecation that happened at a particular version. They can be used in every docstring.</p> <pre><code>\"\"\"My module.\n\nDeprecated\n----------\n    1.2\n        The `foo` attribute is deprecated.\n\"\"\"\n\nfoo: int = 0\n</code></pre>"},{"location":"docstrings/#examples_1","title":"Examples","text":"<p>Examples sections allow to add examples of Python code without the use of markup code blocks. They are a mix of prose and interactive console snippets. They can be used in every docstring.</p> <pre><code>\"\"\"My module.\n\nExamples\n--------\nSome explanation of what is possible.\n\n&gt;&gt;&gt; print(\"hello!\")\nhello!\n\nBlank lines delimit prose vs. console blocks.\n\n&gt;&gt;&gt; a = 0\n&gt;&gt;&gt; a += 1\n&gt;&gt;&gt; a\n1\n\"\"\"\n</code></pre>"},{"location":"docstrings/#parameters_1","title":"Parameters","text":"<ul> <li>Aliases: Args, Arguments, Params</li> <li>Multiple items allowed</li> </ul> <p>Parameters sections allow to document parameters of a function. They are typically used in functions docstrings, but can also be used in dataclasses docstrings.</p> <pre><code>def foo(a: int, b: str):\n\"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n    b\n        Here's b.\n    \"\"\"\n</code></pre> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Foo:\n\"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n    b\n        Here's b.\n    \"\"\"\n\n    foo: int\n    bar: str\n</code></pre> <p>Type annotations are fetched from the related parameters definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My function.\n\nParameters\n----------\nfoo : Integer\n    Description for `foo`.\nbar : String\n    Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting a parameter with <code>param_name : param_type</code>, <code>param_type</code> will be resolved using the scope of the function (or class). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"docstrings/#other-parameters_1","title":"Other Parameters","text":"<ul> <li>Aliases: Keyword Args, Keyword Arguments, Other Args, Other Arguments, Other Params</li> <li>Multiple items allowed</li> </ul> <p>Other parameters sections allow to document secondary parameters such as variadic keyword arguments, or parameters that should be of lesser interest to the user. They are used the same way Parameters sections are.</p> <pre><code>def foo(a, b, **kwargs):\n\"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n    b\n        Here's b.\n\n    Other parameters\n    ----------------\n    c : int\n        Here's c.\n    d : bool\n        Here's d.\n    \"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See the same tip for parameters.</p>"},{"location":"docstrings/#raises_1","title":"Raises","text":"<ul> <li>Aliases: Exceptions</li> <li>Multiple items allowed</li> </ul> <p>Raises sections allow to document exceptions that are raised by a function. They are usually only used in functions docstrings.</p> <pre><code>def foo(a: int):\n\"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        A value.\n\n    Raises\n    ------\n    ValueError\n        When `a` is less than 0.\n    \"\"\"\n    if a &lt; 0:\n        raise ValueError(\"message\")\n</code></pre> <p>Exceptions names are resolved using the function's scope.</p> <p><code>ValueError</code> and other built-in exceptions are resolved as such. You can document custom exception, using the names available in the current scope, for example <code>my_exceptions.MyCustomException</code> or <code>MyCustomException</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"docstrings/#warns_1","title":"Warns","text":"<ul> <li>Aliases: Warnings</li> <li>Multiple items allowed</li> </ul> <p>Warns sections allow to document warnings emitted by the following code. They are usually only used in functions docstrings.</p> <pre><code>import warnings\n\n\ndef foo():\n\"\"\"Foo.\n\n    Warns\n    -----\n    UserWarning\n        To annoy users.\n    \"\"\"\n    warnings.warn(\"Just messing with you.\", UserWarning)\n</code></pre> <p>Warnings names are resolved using the function's scope.</p> <p><code>UserWarning</code> and other built-in warnings are resolved as such. You can document custom warnings, using the names available in the current scope, for example <code>my_warnings.MyCustomWarning</code> or <code>MyCustomWarning</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"docstrings/#yields_1","title":"Yields","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Yields sections allow to document values that generator yield. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Iterator\n\n\ndef foo() -&gt; Iterator[int]:\n\"\"\"Foo.\n\n    Yields\n    ------\n    :\n        Integers from 0 to 9.\n    \"\"\"\n    for i in range(10):\n        yield i\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code> or <code>typing.Iterator</code>. If your generator yields tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>from datetime import datetime\n\n\ndef foo() -&gt; Iterator[tuple[float, float, datetime]]:\n\"\"\"Foo.\n\n    Yields\n    ------\n    x\n        Absissa.\n    y\n        Ordinate.\n    t\n        Time.\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nYields\n------\nx : int\n    Absissa.\ny : int\n    Ordinate.\nt : int\n    Timestamp.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"docstrings/#receives_1","title":"Receives","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Receives sections allow to document values that can be sent to generators using their <code>send</code> method. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Generator\n\n\ndef foo() -&gt; Generator[int, str, None]:\n\"\"\"Foo.\n\n    Receives\n    --------\n    reverse\n        Reverse the generator if `\"reverse\"` is received.\n\n    Yields\n    ------\n    :\n        Integers from 0 to 9.\n\n    Examples\n    --------\n    &gt;&gt;&gt; gen = foo()\n    &gt;&gt;&gt; next(gen)\n    0\n    &gt;&gt;&gt; next(gen)\n    1\n    &gt;&gt;&gt; next(gen)\n    2\n    &gt;&gt;&gt; gen.send(\"reverse\")\n    2\n    &gt;&gt;&gt; next(gen)\n    1\n    &gt;&gt;&gt; next(gen)\n    0\n    &gt;&gt;&gt; next(gen)\n    Traceback (most recent call last):\n        File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n    StopIteration\n    \"\"\"\n    for i in range(10):\n        received = yield i\n        if received == \"reverse\":\n            for j in range(i, -1, -1):\n                yield j\n            break\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code>. If your generator is able to receive tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; Generator[int, tuple[str, bool], None]:\n\"\"\"Foo.\n\n    Receives\n    --------\n    mode\n        Some mode.\n    flag\n        Some flag.\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReceives\n--------\nmode : ModeEnum\n    Some mode.\nflag : int\n    Some flag.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"docstrings/#returns_1","title":"Returns","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Returns sections allow to document values returned by functions. They should be used only in functions docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>import random\n\n\ndef foo() -&gt; int:\n\"\"\"Foo.\n\n    Returns\n    -------\n    :\n        A random integer.\n    \"\"\"\n    return random.randint(0, 100)\n</code></pre> <p>Type annotations are fetched from the function return annotation. If your function returns tuples of values, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; tuple[bool, float]:\n\"\"\"Foo.\n\n    Returns\n    -------\n    success\n        Whether it succeeded.\n    precision\n        Final precision.\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReturns\n-------\nsuccess : int\n    Whether it succeeded.\nprecision : Decimal\n    Final precision.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' function scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"docstrings/#parsers-features","title":"Parsers features","text":"<p>Want to contribute?</p> <p>Each red cross is a link to an issue on the bugtracker. You will find some guidance on how to add support for the corresponding item.</p> <p>The sections are easier to deal in that order:</p> <ul> <li>Deprecated (single item, version and text)</li> <li>Raises, Warns (multiple items, no names, single type each)</li> <li>Attributes, Other Parameters, Parameters (multiple items, one name and one optional type each)</li> <li>Returns (multiple items, optional name and/or type each, annotation to split when multiple names)</li> <li>Receives, Yields (multiple items, optional name and/or type each, several types of annotations to split when multiple names)</li> </ul> <p>\"Examples\" section are a bit different as they require to parse the examples. But you can probably reuse the code in the Google parser. We can probably even factorize the examples parsing into a single function.</p> <p>You can tackle several items at once in a single PR, as long as they relate to a single parser or a single section (a line or a column of the following tables).</p>"},{"location":"docstrings/#sections","title":"Sections","text":"Section Google Numpy Sphinx Attributes \u2705 \u2705 \u2705 Functions \u2705 \u2705 \u274c Methods \u2705 \u2705 \u274c Classes \u2705 \u2705 \u274c Modules \u2705 \u2705 \u274c Deprecated \u2705 \u2705<sup>1</sup> \u274c Examples \u2705 \u2705 \u274c Parameters \u2705 \u2705 \u2705 Other Parameters \u2705 \u2705 \u274c Raises \u2705 \u2705 \u2705 Warns \u2705 \u2705 \u274c Yields \u2705 \u2705 \u274c Receives \u2705 \u2705 \u274c Returns \u2705 \u2705 \u2705"},{"location":"docstrings/#getting-annotationsdefaults-from-parent","title":"Getting annotations/defaults from parent","text":"Section Google Numpy Sphinx Attributes \u2705 \u2705 \u274c Functions / / / Methods / / / Classes / / / Modules / / / Deprecated / / / Examples / / / Parameters \u2705 \u2705 \u2705 Other Parameters \u2705 \u2705 \u274c Raises / / / Warns / / / Yields \u2705 \u2705 \u274c Receives \u2705 \u2705 \u274c Returns \u2705 \u2705 \u2705"},{"location":"docstrings/#cross-references-for-annotations-in-docstrings","title":"Cross-references for annotations in docstrings","text":"Section Google Numpy Sphinx Attributes \u2705 \u2705 \u274c Functions \u274c \u274c / Methods \u274c \u274c / Classes \u274c \u274c / Modules / / / Deprecated / / / Examples / / / Parameters \u2705 \u2705 \u274c Other Parameters \u2705 \u2705 \u274c Raises \u2705 \u2705 \u274c Warns \u2705 \u2705 \u274c Yields \u2705 \u2705 \u274c Receives \u2705 \u2705 \u274c Returns \u2705 \u2705 \u274c <ol> <li> <p>Support for a regular section instead of the RST directive specified in the Numpydoc styleguide.\u00a0\u21a9</p> </li> </ol>"},{"location":"dumping/","title":"Dumping packages' signatures as JSON","text":"<p>Griffe can be used to load packages' signatures and output them as JSON on the standard output or in writable files.</p> <p>Pass the names of packages to the <code>griffe dump</code> command:</p> <pre><code>$ griffe dump httpx fastapi\n{\n  \"httpx\": {\n    \"name\": \"httpx\",\n    ...\n  },\n  \"fastapi\": {\n    \"name\": \"fastapi\",\n    ...\n  }\n}\n</code></pre> <p>It will output a JSON-serialized version of the packages' signatures.</p> <p>Try it out on Griffe itself:</p> <pre><code>$ griffe dump griffe\n{\n  \"griffe\": {\n    \"name\": \"griffe\",\n    ...\n  }\n}\n</code></pre> <p>To output in a file instead of standard output, use the <code>--output</code> or <code>-o</code> option:</p> <pre><code>$ griffe dump griffe -o griffe.json\n</code></pre> <p>If you load multiple packages' signatures, you can dump each in its own file with a templated filepath:</p> <pre><code>$ griffe dump griffe -o './dumps/{package}.json'\n</code></pre> <p>By default, Griffe will search in <code>sys.path</code>, so if you installed it through pipx, there are few chances it will find your packages. To explicitly specify search paths, use the <code>-s, --search &lt;PATH&gt;</code> option. You can use it multiple times. You can also add the search paths to the <code>PYTHONPATH</code> environment variable. If Griffe can't find the packages, it will fail with a <code>ModuleNotFoundError</code>.</p> <p>For an example of what real data looks like, see the full Griffe JSON dump. </p>"},{"location":"extensions/","title":"Extensions","text":"<p>Extensions allow to enhance or customize the data that Griffe collects.</p>"},{"location":"extensions/#using-extensions","title":"Using extensions","text":"<p>Extensions can be specified both on the command-line (in the terminal), and programmatically (in Python).</p>"},{"location":"extensions/#on-the-command-line","title":"On the command-line","text":"<p>On the command-line, you can specify extensions to use with the <code>-e</code>, <code>--extensions</code> option. This option accepts a single positional argument which can take two forms:</p> <ul> <li>a comma-separated list of extensions</li> <li>a JSON list of extensions</li> </ul> <p>Extensions can accept options: the comma-separated list does not allow to specify options, while the JSON list does. See examples below.</p> <p>With both forms, each extension refers to one of these three things:</p> <ul> <li>the name of a built-in extension's module, for example <code>dynamic_docstrings</code>   (this is just an example, this built-in extension does not exist)</li> <li>the Python dotted-path to a module containing one or more extensions,   or to an extension directly, for example <code>package.module</code> and <code>package.module.ThisExtension</code></li> <li>the file path to a Python script, and an optional extension name, separated by a colon,   for example <code>scripts/griffe_exts.py</code> and <code>scripts/griffe_exts.py:ThisExtension</code></li> </ul> <p>The specified extension modules can contain more than one extension: Griffe will pick up and load every extension declared or imported within the modules. If options are specified for a module that contains multiple extensions, the same options will be passed to all the extensions, so extension writers must make sure that all extensions within a single module accept the same options. If they don't, Griffe will abort with an error.</p> <p>To specify options in the JSON form, use a dictionary instead of a string: the dictionary's only key is the extension identifier (built-in name, Python path, file path) and its value is a dictionary of options.</p> <p>Some examples:</p> <pre><code>griffe dump griffe -e pydantic,scripts/exts.py:DynamicDocstrings,griffe_attrs\n</code></pre> <pre><code>griffe check --search src griffe -e '[\n  {\"pydantic\": {\"schema\": true}},\n  {\n    \"scripts/exts.py:DynamicDocstrings\": {\n      \"paths\": [\"mypkg.mymod.myobj\"]\n    }\n  },\n  \"griffe_attrs\"\n]'\n</code></pre> <p>In the above two examples, <code>pydantic</code> would be a built-in extension, <code>scripts/exts.py:DynamicDocstrings</code> the file path plus name of a local extension, and <code>griffe_attrs</code> the name of a third-party package that exposes one or more extensions.</p>"},{"location":"extensions/#programmatically","title":"Programmatically","text":"<p>Within Python code, extensions can be specified with the <code>extensions</code> parameter of the <code>GriffeLoader</code> class or <code>load</code> function.</p> <p>The parameter accepts an instance of the <code>Extensions</code> class. Such an instance is created with the help of the <code>load_extensions</code> function, which itself accepts a list of strings, dictionaries, extension classes and extension instances.</p> <p>Strings and dictionaries are used the same way as on the command-line. Extension instances are used as such, and extension classes are instantiated without any options.</p> <p>Example:</p> <pre><code>import griffe\n\nfrom mypackage.extensions import ThisExtension, ThisOtherExtension\n\nextensions = griffe.load_extensions(\n    [\n        {\"pydantic\": {\"schema\": true}},\n        {\"scripts/exts.py:DynamicDocstrings\": {\"paths\": [\"mypkg.mymod.myobj\"]}},\n        \"griffe_attrs\",\n        ThisExtension(option=\"value\"),\n        ThisOtherExtension,\n    ]\n)\n\ndata = griffe.load(\"mypackage\", extensions=extensions)\n</code></pre>"},{"location":"extensions/#in-mkdocs","title":"In MkDocs","text":"<p>MkDocs and its mkdocstrings plugin can be configured to use Griffe extensions:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nextensions:\n- pydantic: {schema: true}\n- scripts/exts.py:DynamicDocstrings:\npaths: [mypkg.mymod.myobj]\n- griffe_attrs\n</code></pre> <p>The <code>extensions</code> key accepts a list that is passed to the <code>load_extensions</code> function. See how to use extensions programmatically to learn more.</p>"},{"location":"extensions/#writing-extensions","title":"Writing extensions","text":"<p>In the next section we give a bit of context on how Griffe works, to show how extensions can integrate into the data collection process. Feel free to skip to the Events and hooks section or the Full example section if you'd prefer to see concrete examples first.</p>"},{"location":"extensions/#how-it-works","title":"How it works","text":"<p>To extract information from your Python sources, Griffe tries to build Abstract Syntax Trees by parsing the sources with <code>ast</code> utilities.</p> <p>If the source code is not available (the modules are built-in or compiled), Griffe imports the modules and builds object trees instead.</p> <p>Griffe then follows the Visitor pattern to walk the tree and extract information. For ASTs, Griffe uses its Visitor agent and for object trees, it uses its Inspector agent.</p> <p>Sometimes during the walk through the tree (depth-first order), both the visitor and inspector agents will trigger events. These events can be hooked on by extensions to alter or enhance Griffe's behavior. Some hooks will be passed just the current node being visited, others will be passed both the node and an instance of an Object subclass, such as a Module, a Class, a Function, or an Attribute. Extensions will therefore be able to modify these instances.</p> <p>The following flow chart shows an example of an AST visit. The tree is simplified: actual trees have a lot more nodes like <code>if/elif/else</code> nodes, <code>try/except/else/finally</code> nodes, and many more.</p> <pre><code>flowchart TB\nM(Module definition) --- C(Class definition) &amp; F(Function definition)\nC --- m(Function definition) &amp; A(Variable assignment)</code></pre> <p>The following flow chart shows an example of an object tree inspection. The tree is simplified as well: many more types of objects are handled. </p> <pre><code>flowchart TB\nM(Module) --- C(Class) &amp; F(Function)\nC --- m(Method) &amp; A(Attribute)</code></pre> <p>For a more concrete example, let say that we visit (or inspect) an AST (or object tree) for a given module, and that this module contains a single class, which itself contains a single method:</p> <ul> <li>the agent (visitor or inspector) will walk through the tree   by starting with the module node</li> <li>it will instantiate a Module,   then walk through its members, continuing with the class node</li> <li>it will instantiate a Class,   then walk through its members, continuing with the function node</li> <li>it will instantiate a Function</li> <li>then it will go back up and finish walking since there are   no more nodes to walk through</li> </ul> <p>Every time the agent enters a node, creates an object instance, or finish handling members of an object, it will trigger an event.</p> <p>The flow of events is drawn in the following flowchart:</p> <pre><code>flowchart TB\nvisit_mod{{enter module node}}\nevent_mod_node{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_module_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_module_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\ncreate_mod{{create module instance}}\nevent_mod_instance{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_module_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_module_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nvisit_mod_members{{visit module members}}\nvisit_cls{{enter class node}}\nevent_cls_node{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_class_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_class_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\ncreate_cls{{create class instance}}\nevent_cls_instance{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_class_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_class_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nvisit_cls_members{{visit class members}}\nvisit_func{{enter func node}}\nevent_func_node{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_function_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_function_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\ncreate_func{{create function instance}}\nevent_func_instance{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_function_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_function_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nevent_cls_members{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_class_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_class_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nevent_mod_members{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.extensions.base.Extension.on_module_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_module_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\n\nstart{start} --&gt; visit_mod\nvisit_mod --&gt; event_mod_node\nevent_mod_node --&gt; create_mod\ncreate_mod --&gt; event_mod_instance\nevent_mod_instance --&gt; visit_mod_members\nvisit_mod_members --1--&gt; visit_cls\nvisit_cls --&gt; event_cls_node\nevent_cls_node --&gt; create_cls\ncreate_cls --&gt; event_cls_instance\nevent_cls_instance --&gt; visit_cls_members\nvisit_cls_members --1--&gt; visit_func\nvisit_func --&gt; event_func_node\nevent_func_node --&gt; create_func\ncreate_func --&gt; event_func_instance\nevent_func_instance --&gt; visit_cls_members\nvisit_cls_members --2--&gt; event_cls_members\nevent_cls_members --&gt; visit_mod_members\nvisit_mod_members --2--&gt; event_mod_members\nevent_mod_members --&gt; finish{finish}\n\nclass event_mod_node event\nclass event_mod_instance event\nclass event_cls_node event\nclass event_cls_instance event\nclass event_func_node event\nclass event_func_instance event\nclass event_cls_members event\nclass event_mod_members event\nclassDef event stroke:#3cc,stroke-width:2</code></pre> <p>Hopefully this flowchart gave you a pretty good idea of what happens when Griffe collects data from a Python module. The next setion will explain in more details the different events that are triggered, and how to hook onto them in your extensions.</p>"},{"location":"extensions/#events-and-hooks","title":"Events and hooks","text":"<p>There are 3 generic events:</p> <ul> <li><code>on_node</code></li> <li><code>on_instance</code></li> <li><code>on_members</code></li> </ul> <p>There are also specific events for each object kind:</p> <ul> <li><code>on_module_node</code></li> <li><code>on_module_instance</code></li> <li><code>on_module_members</code></li> <li><code>on_class_node</code></li> <li><code>on_class_instance</code></li> <li><code>on_class_members</code></li> <li><code>on_function_node</code></li> <li><code>on_function_instance</code></li> <li><code>on_attribute_node</code></li> <li><code>on_attribute_instance</code></li> </ul> <p>The \"on node\" events are triggered when the agent (visitor or inspector) starts handling a node in the tree (AST or object tree).</p> <p>The \"on instance\" events are triggered when the agent just created an instance of Module, Class, Function, or Attribute, and added it as a member of its parent.</p> <p>The \"on members\" events are triggered when the agent just finished handling all the members of an object. Functions and attributes do not have members, so there are no \"on members\" event for these two kinds.</p> <p>Hooks are methods that are called when a particular event is triggered. To target a specific event, the hook must be named after it.</p> <p>Extensions are classes that inherit from Griffe's Extension base class and define some hooks as methods:</p> <pre><code>import ast\nfrom griffe import Extension, Object, ObjectNode\n\n\nclass MyExtension(Extension):\n    def on_instance(self, node: ast.AST | ObjectNode, obj: Object) -&gt; None:\n\"\"\"Do something with `node` and/or `obj`.\"\"\"\n</code></pre> <p>Hooks are always defined as methods of a class inheriting from  Extension, never as standalone functions.</p> <p>Since hooks are declared in a class, feel free to also declare state variables (or any other variable) in the <code>__init__</code> method:</p> <pre><code>import ast\nfrom griffe import Extension, Object, ObjectNode\n\n\nclass MyExtension(Extension):\n    def __init__(self) -&gt; None:\n        super().__init__(self)\n        self.state_thingy = \"initial stuff\"\n        self.list_of_things = []\n\n    def on_instance(self, node: ast.AST | ObjectNode, obj: Object) -&gt; None:\n\"\"\"Do something with `node` and/or `obj`.\"\"\"\n</code></pre>"},{"location":"extensions/#staticdynamic-support","title":"Static/dynamic support","text":"<p>Extensions can support both static and dynamic analysis of modules. If a module is scanned statically, your extension hooks will receive AST nodes (from the ast module of the standard library). If the module is scanned dynamically, your extension hooks will receive object nodes.</p> <p>To support static analysis, dynamic analysis, or both, you can therefore check the type of the received node:</p> <pre><code>import ast\nfrom griffe import Extension, Object, ObjectNode\n\n\nclass MyExtension(Extension):\n    def on_instance(self, node: ast.AST | ObjectNode, obj: Object) -&gt; None:\n\"\"\"Do something with `node` and/or `obj`.\"\"\"\n        if isinstance(node, ast.AST):\n            ...  # apply logic for static analysis\n        else:\n            ...  # apply logic for dynamic analysis\n</code></pre> <p>Since hooks also receive instantiated modules, classes, functions and attributes, most of the time you will not need to use the <code>node</code> argument other than for checking its type and deciding what to do based on the result. If you do need to, read the next section explaining how to visit trees.</p>"},{"location":"extensions/#visiting-trees","title":"Visiting trees","text":"<p>Extensions provide basic functionality to help you visit trees:</p> <ul> <li><code>visit</code>: call <code>self.visit(node)</code>   to start visiting an abstract syntax tree.</li> <li><code>generic_visit</code>: call   <code>self.generic_visit(node)</code> to visit each subnode of a given node.</li> <li><code>inspect</code>: call <code>self.inspect(node)</code>   to start visiting an object tree. Nodes contain references to the runtime objects,   see <code>ObjectNode</code>.</li> <li><code>generic_inspect</code>: call   <code>self.generic_inspect(node)</code> to visit each subnode of a given node.</li> </ul> <p>Calling <code>self.visit(node)</code> or <code>self.inspect(node)</code> will do nothing unless you actually implement methods that handle specific types of nodes:</p> <ul> <li> <p>for ASTs, methods must be named <code>visit_&lt;node_type&gt;</code> where <code>&lt;node_type&gt;</code>     is replaced with the lowercase name of the node's class. For example,     to allow visiting <code>ClassDef</code> nodes, you must     implement the <code>visit_classdef</code> method:</p> <pre><code>import ast\nfrom griffe import Extension\n\n\nclass MyExtension(Extension):\n    def visit_classdef(node: ast.ClassDef) -&gt; None:\n        # do something with the node\n        ...\n        # then visit the subnodes\n        # (it only makes sense if you implement other methods\n        # such as visit_functiondef or visit_assign for example)\n        self.generic_visit(node)\n</code></pre> <p>See the list of existing AST classes to learn what method you can implement.</p> </li> <li> <p>for object trees, methods must be named <code>inspect_&lt;node_type&gt;</code>,     where <code>&lt;node_type&gt;</code> is replaced with the string value of the node's kind.     The different kinds are listed in the <code>ObjectKind</code> enumeration.     For example, to allow inspecting coroutine nodes, you must implement     the <code>inspect_coroutine</code> method:</p> <pre><code>from griffe import Extension, ObjectNode\n\n\nclass MyExtension(Extension):\n    def inspect_coroutine(node: ObjectNode) -&gt; None:\n        # do something with the node\n        ...\n        # then visit the subnodes if it makes sense\n        self.generic_inspect(node)\n</code></pre> </li> </ul>"},{"location":"extensions/#extra-data","title":"Extra data","text":"<p>All Griffe objects (modules, classes, functions, attributes) can store additional (meta)data in their <code>extra</code> attribute. This attribute is a dictionary of dictionaries. The first layer is used as namespacing: each extension writes into its own namespace, or integrates with other projects by reading/writing in their namespaces, according to what they support and document.</p> <pre><code>import ast\nfrom griffe import Extension, Object, ObjectNode\n\nself_namespace = \"my_extension\"\n\n\nclass MyExtension(Extension):\n    def on_instance(self, node: ast.AST | ObjectNode, obj: Object) -&gt; None:\n        obj.extra[self_namespace][\"some_key\"] = \"some_value\"\n</code></pre> <p>For example, mkdocstrings-python looks into the <code>mkdocstrings</code> namespace for a <code>template</code> key. Extensions can therefore provide a custom template value by writing into <code>extra[\"mkdocstrings\"][\"template\"]</code>:</p> <pre><code>import ast\nfrom griffe import Extension, ObjectNode, Class\n\nself_namespace = \"my_extension\"\nmkdocstrings_namespace = \"mkdocstrings\"\n\n\nclass MyExtension(Extension):\n    def on_class_instance(self, node: ast.AST | ObjectNode, cls: Class) -&gt; None:\n        obj.extra[mkdocstrings_namespace][\"template\"] = \"my_custom_template\"\n</code></pre> <p>Read more about mkdocstrings handler extensions.</p>"},{"location":"extensions/#options","title":"Options","text":"<p>Extensions can be made to support options. These options can then be passed from the command-line using JSON, from Python directly, or from other tools like MkDocs, in <code>mkdocs.yml</code>.</p> <pre><code>import ast\nfrom griffe import Attribute, Extension, ObjectNode\n\n\nclass MyExtension(Extension):\n    def __init__(self, option1: str, option2: bool = False) -&gt; None:\n        super().__init__(self)\n        self.option1 = option1\n        self.option2 = option2\n\n    def on_attribute_instance(self, node: ast.AST | ObjectNode, attr: Attribute) -&gt; None:\n        if self.option2:\n            ...  # do something\n</code></pre>"},{"location":"extensions/#logging","title":"Logging","text":"<p>To better integrate with Griffe and other tools in the ecosystem (notably MkDocs), use Griffe loggers to log messages:</p> <pre><code>import ast\nfrom griffe import Extension, ObjectNode, Module, get_logger\n\nlogger = get_logger(__name__)\n\n\nclass MyExtension(Extension):\n    def on_module_members(self, node: ast.AST | ObjectNode, mod: Module) -&gt; None:\n        logger.info(f\"Doing some work on module {mod.path} and its members\")\n</code></pre>"},{"location":"extensions/#full-example","title":"Full example","text":"<p>The following example shows how one could write a \"dynamic docstrings\" extension that dynamically import objects that declare their docstrings dynamically, to improve support for such docstrings. The extension is configurable to run only on user-selected objects.</p> <p>Package structure (or just write your extension in a local script):</p> <pre><code>\ud83d\udcc1 ./\n\u251c\u2500\u2500 \ud83d\udcc4 pyproject.toml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 dynamic_docstrings/\n        \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n        \u2514\u2500\u2500 \ud83d\udcc4 extension.py\n</code></pre> ./src/dynamic_docstrings/extension.py<pre><code>import ast\nimport inspect\nfrom griffe import Docstring, Extension, Object, ObjectNode, get_logger, dynamic_import\n\nlogger = get_logger(__name__)\n\n\nclass DynamicDocstrings(Extension):\n    def __init__(self, object_paths: list[str] | None = None) -&gt; None:\n        self.object_paths = object_paths\n\n    def on_instance(self, node: ast.AST | ObjectNode, obj: Object) -&gt; None:\n        if isinstance(node, ObjectNode):\n            return  # skip runtime objects, their docstrings are already right\n\n        if self.object_paths and obj.path not in self.object_paths:\n            return  # skip objects that were not selected\n\n        # import object to get its evaluated docstring\n        try:\n            runtime_obj = dynamic_import(obj.path)\n            docstring = runtime_obj.__doc__\n        except ImportError:\n            logger.debug(f\"Could not get dynamic docstring for {obj.path}\")\n            return\n        except AttributeError:\n            logger.debug(f\"Object {obj.path} does not have a __doc__ attribute\")\n            return\n\n        # update the object instance with the evaluated docstring\n        docstring = inspect.cleandoc(docstring)\n        if obj.docstring:\n            obj.docstring.value = docstring\n        else:\n            obj.docstring = Docstring(docstring, parent=obj)\n</code></pre> <p>You can then expose this extension in the top-level module of your package:</p> ./src/dynamic_docstrings/__init__.py<pre><code>from dynamic_docstrings.extension import DynamicDocstrings\n\n__all__ = [\"DynamicDocstrings\"]\n</code></pre> <p>This will allow users to load and use this extension by referring to it as <code>dynamic_docstrings</code> (your Python package name).</p> <p>See how to use extensions to learn more about how to load and use your new extension.</p>"},{"location":"extensions/#ast-nodes","title":"AST nodes","text":"<p> <ul> <li><code>Add</code></li> <li><code>alias</code></li> <li><code>And</code></li> <li><code>AnnAssign</code></li> <li><code>arg</code></li> <li><code>arguments</code></li> <li><code>Assert</code></li> <li><code>Assign</code></li> <li><code>AsyncFor</code></li> <li><code>AsyncFunctionDef</code></li> <li><code>AsyncWith</code></li> <li><code>Attribute</code></li> <li><code>AugAssign</code></li> <li><code>Await</code></li> <li><code>BinOp</code></li> <li><code>BitAnd</code></li> <li><code>BitOr</code></li> <li><code>BitXor</code></li> <li><code>BoolOp</code></li> <li><code>Break</code></li> <li><code>Bytes</code><sup>1</sup></li> <li><code>Call</code></li> <li><code>ClassDef</code></li> <li><code>Compare</code></li> <li><code>comprehension</code></li> <li><code>Constant</code></li> <li><code>Continue</code></li> <li><code>Del</code></li> <li><code>Delete</code></li> </ul> <p> <ul> <li><code>Dict</code></li> <li><code>DictComp</code></li> <li><code>Div</code></li> <li><code>Ellipsis</code><sup>1</sup></li> <li><code>Eq</code></li> <li><code>ExceptHandler</code></li> <li><code>Expr</code></li> <li><code>Expression</code><sup>1</sup></li> <li><code>ExtSlice</code><sup>2</sup></li> <li><code>FloorDiv</code></li> <li><code>For</code></li> <li><code>FormattedValue</code></li> <li><code>FunctionDef</code></li> <li><code>GeneratorExp</code></li> <li><code>Global</code></li> <li><code>Gt</code></li> <li><code>GtE</code></li> <li><code>If</code></li> <li><code>IfExp</code></li> <li><code>Import</code></li> <li><code>ImportFrom</code></li> <li><code>In</code></li> <li><code>Index</code><sup>2</sup></li> <li><code>Interactive</code><sup>3</sup></li> <li><code>Invert</code></li> <li><code>Is</code></li> <li><code>IsNot</code></li> <li><code>JoinedStr</code></li> <li><code>keyword</code></li> </ul> <p> <ul> <li><code>Lambda</code></li> <li><code>List</code></li> <li><code>ListComp</code></li> <li><code>Load</code></li> <li><code>LShift</code></li> <li><code>Lt</code></li> <li><code>LtE</code></li> <li><code>Match</code></li> <li><code>MatchAs</code></li> <li><code>match_case</code></li> <li><code>MatchClass</code></li> <li><code>MatchMapping</code></li> <li><code>MatchOr</code></li> <li><code>MatchSequence</code></li> <li><code>MatchSingleton</code></li> <li><code>MatchStar</code></li> <li><code>MatchValue</code></li> <li><code>MatMult</code></li> <li><code>Mod</code></li> <li><code>Module</code><sup>3</sup></li> <li><code>Mult</code></li> <li><code>Name</code></li> <li><code>NameConstant</code><sup>1</sup></li> <li><code>NamedExpr</code></li> <li><code>Nonlocal</code></li> <li><code>Not</code></li> <li><code>NotEq</code></li> <li><code>NotIn</code></li> <li><code>Num</code><sup>1</sup></li> </ul> <p> <ul> <li><code>Or</code></li> <li><code>Pass</code></li> <li><code>pattern</code><sup>3</sup></li> <li><code>Pow</code></li> <li><code>Print</code><sup>4</sup></li> <li><code>Raise</code></li> <li><code>Return</code></li> <li><code>RShift</code></li> <li><code>Set</code></li> <li><code>SetComp</code></li> <li><code>Slice</code></li> <li><code>Starred</code></li> <li><code>Store</code></li> <li><code>Str</code><sup>1</sup></li> <li><code>Sub</code></li> <li><code>Subscript</code></li> <li><code>Try</code></li> <li><code>TryExcept</code><sup>5</sup></li> <li><code>TryFinally</code><sup>6</sup></li> <li><code>Tuple</code></li> <li><code>UAdd</code></li> <li><code>UnaryOp</code></li> <li><code>USub</code></li> <li><code>While</code></li> <li><code>With</code></li> <li><code>withitem</code></li> <li><code>Yield</code></li> <li><code>YieldFrom</code></li> </ul> <p></p> <ol> <li> <p>Deprecated since Python 3.8.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Deprecated since Python 3.9.\u00a0\u21a9\u21a9</p> </li> <li> <p>Not documented.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p><code>print</code> became a builtin (instead of a keyword) in Python 3.\u00a0\u21a9</p> </li> <li> <p>Now <code>ExceptHandler</code>, in the <code>handlers</code> attribute of <code>Try</code> nodes.\u00a0\u21a9</p> </li> <li> <p>Now a list of expressions in the <code>finalbody</code> attribute of <code>Try</code> nodes.\u00a0\u21a9</p> </li> </ol>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2021, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"loading/","title":"Loading data with Python","text":"<p>Griffe provides a shortcut function for simple needs:</p> <pre><code>import griffe\n\nmkdocs = griffe.load(\"mkdocs\")\n</code></pre> <p>The <code>load</code> function accepts a number of parameters.</p> <p>For more complex needs, create and use a loader:</p> <pre><code>from griffe.loader import GriffeLoader\n\nloader = GriffeLoader()\nmkdocs = loader.load_module(\"mkdocs\")\n</code></pre> <p>Similarly, the <code>GriffeLoader</code> accepts a number of parameters to configure how the modules are found and loaded.</p> <p>If you don't want to recurse in the submodules:</p> <pre><code>mkdocs = loader.load_module(\"mkdocs\", submodules=False)\n</code></pre>"},{"location":"loading/#navigating-into-the-loaded-objects","title":"Navigating into the loaded objects","text":"<p>Both the <code>load</code> function and the <code>GriffeLoader.load_module</code> method return a <code>Module</code> instance. There are several ways to access members of an object:</p> <ul> <li>through its <code>members</code> attribute, which is a dictionary,   with the usual <code>keys()</code>, <code>values()</code> and <code>items()</code> methods.</li> <li>thanks to its <code>__getitem__</code> method. For example <code>griffe[\"dataclasses\"]</code>   returns the <code>Module</code> instance representing Griffe's <code>dataclasses</code> module.   Since this module also has members, you can chain calls: <code>griffe[\"dataclasses\"][\"Module\"]</code>.   Conveniently, you can chain the names with dots in a single call: <code>griffe[\"dataclasses.Module\"]</code>.   You can even pass a tuple instead of a string: <code>griffe[(\"dataclasses\", \"Module\")]</code>.</li> <li>through the <code>modules</code>,   <code>classes</code>,   <code>functions</code> and   <code>attributes</code> properties,   which take care of filtering members based on their kind, and return dictionaries.</li> </ul> <p>Most of the time, you will only use classes from the <code>griffe.dataclasses</code> and <code>griffe.docstrings.dataclasses</code> modules.</p>"},{"location":"loading/#class-inheritance","title":"Class inheritance","text":"<p>New in version 0.30</p> <p>Inheritance support is experimental</p> <p> Inheritance support was recently added, and might need some corrections before being fully usable. Don't hesitate to report any issue that arises from using inheritance support in Griffe.</p> <p>Griffe supports class inheritance, both when visiting and inspecting modules.</p> <p>To access members of a class that are inherited from base classes, use <code>Object.inherited_members</code>. If this is the first time you access inherited members, the base classes of the given class will be resolved and cached, then the MRO (Method Resolution Order) will be computed for these bases classes, and a dictionary of inherited members will be built and cached. Next times you access it, you'll get the cached dictionary. Make sure to only access <code>inherited_members</code> once everything is loaded by Griffe, to avoid computing things too early. Don't access inherited members in extensions, while visiting or inspecting a module.</p> <p>Important: only classes from already loaded packages will be used when computing inherited members. This gives users control over how deep into inheritance to go, by pre-loading packages from which you want to inherit members. For example, if <code>package_c.ClassC</code> inherits from <code>package_b.ClassB</code>, itself inheriting from <code>package_a.ClassA</code>, and you want to load <code>ClassB</code> members only:</p> <pre><code>from griffe.loader import GriffeLoader\n\nloader = GriffeLoader()\n# note that we don't load package_a\nloader.load_module(\"package_b\")\nloader.load_module(\"package_c\")\n</code></pre> <p>If a base class cannot be resolved during computation of inherited members, Griffe logs a DEBUG message.</p> <p>If you want to access all members at once (both declared and inherited), use <code>Object.all_members</code>.</p> <p>If you want to access only declared members, use <code>Object.members</code>.</p> <p>Accessing <code>Object.attributes</code>, <code>Object.functions</code>, <code>Object.classes</code> or <code>Object.modules</code> will trigger inheritance computation, so make sure to only call it once everything is loaded by Griffe. Don't access inherited members in extensions, while visiting or inspecting a module.</p>"},{"location":"loading/#limitations","title":"Limitations","text":"<p>Currently, there are two limitations to our class inheritance support:</p> <ol> <li> <p>when visiting (static analysis), some objects are not yet properly recognized as classes,     for example named tuples. If you inherit from a named tuple,     its members won't be added to the inherited members of the inheriting class.</p> <pre><code>MyTuple = namedtuple(\"MyTuple\", \"attr1 attr2\")\n\n\nclass MyClass(MyTuple):\n    ...\n</code></pre> </li> <li> <p>when inspecting (dynamic analysis), ephemeral base classes won't be resolved,     and therefore their members won't appear in child classes. To circumvent that,     assign these dynamic classes to variables:</p> <pre><code># instead of\nclass MyClass(namedtuple(\"MyTuple\", \"attr1 attr2\")):\n    ...\n\n\n# do\nMyTuple = namedtuple(\"MyTuple\", \"attr1 attr2\")\n\n\nclass MyClass(MyTuple):\n    ...\n</code></pre> </li> </ol> <p>We will try to lift these limitations in the future.</p>"},{"location":"parsing_docstrings/","title":"Using Griffe as a docstring-parsing library","text":"<p>You can use Griffe to parse arbitrary docstrings. You don't have to load anything through the Griffe loader. You just need to import the <code>Docstring</code> class. Then you can build a <code>Docstring</code> instance and call its <code>parse</code> method, choosing the parsing-style to use:</p> <pre><code>from griffe.dataclasses import Docstring\n\ntext = \"Hello I'm a docstring!\"\ndocstring = Docstring(text, lineno=1)\nparsed = docstring.parse(\"google\")\n</code></pre> <p>If you want to take advantage of the parsers ability to fetch annotations from the object from which the docstring originates, you can manually create the parent objects and link them to the docstring:</p> <pre><code>from griffe.dataclasses import Docstring, Function, Parameters, Parameter, ParameterKind\n\nfunction = Function(\n    \"func\",\n    parameters=Parameters(\n        Parameter(\"param1\", annotation=\"str\", kind=ParameterKind.positional_or_keyword),\n        Parameter(\"param2\", annotation=\"int\", kind=ParameterKind.keyword_only),\n    ),\n)\ntext = \"\"\"\nHello I'm a docstring!\n\nParameters:\n    param1: Description.\n    param2: Description.\n\"\"\"\ndocstring = Docstring(text, lineno=1, parent=function)\nparsed = docstring.parse(\"google\")\n</code></pre> <p>With this the parser will fetch the <code>str</code> and <code>int</code> annotations from the parent function's parameters.</p>"},{"location":"try_it_out/","title":"Try Griffe in your browser","text":"<p>Try Griffe directly in your browser thanks to Pyodide! You can click the \"Run\" button in the top-right corner of each editor, or hit Ctrl+Enter to run the code.</p> <p>In the following example, we import <code>griffe</code> and use it to load itself. Then we output the signature of the <code>Function</code> class as JSON.</p> <p> Editor (session: default) Run <pre>import griffe\ngriffe_pkg = griffe.load(\"griffe\")\ngriffe_pkg[\"dataclasses.Function\"].as_json(indent=2)</pre> Output Clear <pre><code></code></pre> </p> <p>Try it out with another package of your choice! Just replace <code>your-dist-name</code> with a package's distribution name, and <code>your_package_name</code> with the package's import name:</p> <p> Editor (session: default) Run <pre>import micropip\nawait micropip.install(\"your-dist-name\")\ndata = griffe.load(\"your_package_name\")\ndata.as_json(indent=2)[:1000]  # truncate to a thousand characters...</pre> Output Clear <pre><code></code></pre> </p>"},{"location":"usage/","title":"Usage","text":"<p>Redirecting...</p>"},{"location":"reference/griffe/","title":"Index","text":""},{"location":"reference/griffe/#griffe","title":"griffe","text":"<p>griffe package.</p> <p>Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API.</p> <p>Modules:</p> <ul> <li> __main__         \u2013          <p>Entry-point module, in case you use <code>python -m griffe</code>.</p> </li> <li> agents         \u2013          <p>These modules contain the different agents that are able to extract data.</p> </li> <li> c3linear         \u2013          <p>Compute method resolution order. Implements <code>Class.mro</code> attribute.</p> </li> <li> cli         \u2013          <p>Module that contains the command line application.</p> </li> <li> collections         \u2013          <p>This module stores collections of data, useful during parsing.</p> </li> <li> dataclasses         \u2013          <p>This module contains the data classes that represent Python objects.</p> </li> <li> diff         \u2013          <p>This module exports \"breaking changes\" related utilities.</p> </li> <li> docstrings         \u2013          <p>This module exposes objects related to docstrings.</p> </li> <li> encoders         \u2013          <p>This module contains data encoders/serializers and decoders/deserializers.</p> </li> <li> enumerations         \u2013          <p>This module contains all the enumerations of the package.</p> </li> <li> exceptions         \u2013          <p>This module contains all the exceptions specific to Griffe.</p> </li> <li> expressions         \u2013          <p>This module contains the data classes that represent resolvable names and expressions.</p> </li> <li> extensions         \u2013          <p>This module is the public interface to import elements from the base.</p> </li> <li> finder         \u2013          <p>This module contains the code allowing to find modules.</p> </li> <li> git         \u2013          <p>This module contains the code allowing to load modules from specific git commits.</p> </li> <li> importer         \u2013          <p>This module contains utilities to dynamically import objects.</p> </li> <li> loader         \u2013          <p>This module contains the code allowing to load modules data.</p> </li> <li> logger         \u2013          <p>This module contains logging utilities.</p> </li> <li> merger         \u2013          <p>This module contains utilities to merge data together.</p> </li> <li> mixins         \u2013          <p>This module contains some mixins classes about accessing and setting members.</p> </li> <li> stats         \u2013          <p>This module contains utilities to compute loading statistics.</p> </li> <li> tests         \u2013          <p>Test helpers and pytest fixtures.</p> </li> </ul> <p>Classes:</p> <ul> <li> Attribute         \u2013          <p>The class representing a Python module/class/instance attribute.</p> </li> <li> Class         \u2013          <p>The class representing a Python class.</p> </li> <li> Docstring         \u2013          <p>This class represents docstrings.</p> </li> <li> Extension         \u2013          <p>Base class for Griffe extensions.</p> </li> <li> Function         \u2013          <p>The class representing a Python function.</p> </li> <li> Module         \u2013          <p>The class representing a Python module.</p> </li> <li> Object         \u2013          <p>An abstract class representing a Python object.</p> </li> <li> ObjectNode         \u2013          <p>Helper class to represent an object tree.</p> </li> </ul> <p>Functions:</p> <ul> <li> dynamic_import           \u2013            <p>Dynamically import the specified object.</p> </li> <li> find_breaking_changes           \u2013            <p>Find breaking changes between two versions of the same API.</p> </li> <li> get_logger           \u2013            <p>Create and return a new logger instance.</p> </li> <li> load           \u2013            <p>Load and return a module.</p> </li> <li> load_extensions           \u2013            <p>Load configured extensions.</p> </li> <li> load_git           \u2013            <p>Load and return a module from a specific Git reference.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute","title":"Attribute","text":"<pre><code>Attribute(\n    *args: Any,\n    value: str | Expr | None = None,\n    annotation: str | Expr | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python module/class/instance attribute.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> value             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The attribute value, if any.</p> </li> <li> annotation             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The attribute annotation, if any.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this function's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The attribute type annotation.</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> <li> value             (<code>str | Expr | None</code>)         \u2013          <p>The attribute value.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/#griffe.Attribute.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Attribute.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The attribute type annotation.</p>"},{"location":"reference/griffe/#griffe.Attribute.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Attribute.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/#griffe.Attribute.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Attribute.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/#griffe.Attribute.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/#griffe.Attribute.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/#griffe.Attribute.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/#griffe.Attribute.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/#griffe.Attribute.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Attribute.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Attribute.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Attribute.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/#griffe.Attribute.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/#griffe.Attribute.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Attribute.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/#griffe.Attribute.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/#griffe.Attribute.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/#griffe.Attribute.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/#griffe.Attribute.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Attribute.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/#griffe.Attribute.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Attribute.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/#griffe.Attribute.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/#griffe.Attribute.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/#griffe.Attribute.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/#griffe.Attribute.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/#griffe.Attribute.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Attribute.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/#griffe.Attribute.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/#griffe.Attribute.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/#griffe.Attribute.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/#griffe.Attribute.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/#griffe.Attribute.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/#griffe.Attribute.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/#griffe.Attribute.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr | None = value\n</code></pre> <p>The attribute value.</p>"},{"location":"reference/griffe/#griffe.Attribute.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Attribute.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Attribute.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/#griffe.Attribute.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this function's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/#griffe.Attribute.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Attribute.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Attribute.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/#griffe.Class","title":"Class","text":"<pre><code>Class(\n    *args: Any,\n    bases: Sequence[Expr | str] | None = None,\n    decorators: list[Decorator] | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python class.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> bases             (<code>Sequence[Expr | str] | None</code>, default:                 <code>None</code> )         \u2013          <p>The list of base classes, if any.</p> </li> <li> decorators             (<code>list[Decorator] | None</code>, default:                 <code>None</code> )         \u2013          <p>The class decorators, if any.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this class' data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> mro           \u2013            <p>Return a list of classes in order corresponding to Python's MRO.</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> bases             (<code>list[Expr | str]</code>)         \u2013          <p>The class bases.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> decorators             (<code>list[Decorator]</code>)         \u2013          <p>The class decorators.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> overloads             (<code>dict[str, list[Function]]</code>)         \u2013          <p>The overloaded signatures declared in this class.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parameters             (<code>Parameters</code>)         \u2013          <p>The parameters of this class' <code>__init__</code> method, if any.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> resolved_bases             (<code>list[Object]</code>)         \u2013          <p>Resolved class bases.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/#griffe.Class.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.bases","title":"bases  <code>instance-attribute</code>","text":"<pre><code>bases: list[Expr | str] = list(bases) if bases else []\n</code></pre> <p>The class bases.</p>"},{"location":"reference/griffe/#griffe.Class.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/#griffe.Class.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.decorators","title":"decorators  <code>instance-attribute</code>","text":"<pre><code>decorators: list[Decorator] = decorators or []\n</code></pre> <p>The class decorators.</p>"},{"location":"reference/griffe/#griffe.Class.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/#griffe.Class.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/#griffe.Class.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/#griffe.Class.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/#griffe.Class.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/#griffe.Class.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Class.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Class.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/#griffe.Class.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/#griffe.Class.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/#griffe.Class.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/#griffe.Class.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/#griffe.Class.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/#griffe.Class.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Class.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/#griffe.Class.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Class.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/#griffe.Class.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/#griffe.Class.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/#griffe.Class.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/#griffe.Class.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/#griffe.Class.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/#griffe.Class.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: dict[str, list[Function]] = defaultdict(list)\n</code></pre> <p>The overloaded signatures declared in this class.</p>"},{"location":"reference/griffe/#griffe.Class.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/#griffe.Class.parameters","title":"parameters  <code>property</code>","text":"<pre><code>parameters: Parameters\n</code></pre> <p>The parameters of this class' <code>__init__</code> method, if any.</p> <p>This property fetches inherited members, and therefore is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/#griffe.Class.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/#griffe.Class.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/#griffe.Class.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.resolved_bases","title":"resolved_bases  <code>cached</code> <code>property</code>","text":"<pre><code>resolved_bases: list[Object]\n</code></pre> <p>Resolved class bases.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Class.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/#griffe.Class.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/#griffe.Class.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Class.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Class.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/#griffe.Class.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this class' data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/#griffe.Class.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Class.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/#griffe.Class.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.mro","title":"mro","text":"<pre><code>mro() -&gt; list[Class]\n</code></pre> <p>Return a list of classes in order corresponding to Python's MRO.</p>"},{"location":"reference/griffe/#griffe.Class.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Class.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/#griffe.Docstring","title":"Docstring","text":"<pre><code>Docstring(\n    value: str,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    parent: Object | None = None,\n    parser: Literal[\"google\", \"numpy\", \"sphinx\"]\n    | Parser\n    | None = None,\n    parser_options: dict[str, Any] | None = None\n)\n</code></pre> <p>This class represents docstrings.</p> <p>Parameters:</p> <ul> <li> value             (<code>str</code>)         \u2013          <p>The docstring value.</p> </li> <li> lineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The starting line number.</p> </li> <li> endlineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The ending line number.</p> </li> <li> parent             (<code>Object | None</code>, default:                 <code>None</code> )         \u2013          <p>The parent object on which this docstring is attached.</p> </li> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> parser_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this docstring's data as a dictionary.</p> </li> <li> parse           \u2013            <p>Parse the docstring into structured data.</p> </li> </ul> <p>Attributes:</p> <ul> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the docstring.</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the docstring.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines of the docstring.</p> </li> <li> parent             (<code>Object | None</code>)         \u2013          <p>The object this docstring is attached to.</p> </li> <li> parsed             (<code>list[DocstringSection]</code>)         \u2013          <p>The docstring sections, parsed into structured data.</p> </li> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>)         \u2013          <p>The selected docstring parser.</p> </li> <li> parser_options             (<code>dict[str, Any]</code>)         \u2013          <p>The configured parsing options.</p> </li> <li> value             (<code>str</code>)         \u2013          <p>The original value of the docstring, cleaned by <code>inspect.cleandoc</code>.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Docstring.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the docstring.</p>"},{"location":"reference/griffe/#griffe.Docstring.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the docstring.</p>"},{"location":"reference/griffe/#griffe.Docstring.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines of the docstring.</p>"},{"location":"reference/griffe/#griffe.Docstring.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Object | None = parent\n</code></pre> <p>The object this docstring is attached to.</p>"},{"location":"reference/griffe/#griffe.Docstring.parsed","title":"parsed  <code>cached</code> <code>property</code>","text":"<pre><code>parsed: list[DocstringSection]\n</code></pre> <p>The docstring sections, parsed into structured data.</p>"},{"location":"reference/griffe/#griffe.Docstring.parser","title":"parser  <code>instance-attribute</code>","text":"<pre><code>parser: Literal[\n    \"google\", \"numpy\", \"sphinx\"\n] | Parser | None = parser\n</code></pre> <p>The selected docstring parser.</p>"},{"location":"reference/griffe/#griffe.Docstring.parser_options","title":"parser_options  <code>instance-attribute</code>","text":"<pre><code>parser_options: dict[str, Any] = parser_options or {}\n</code></pre> <p>The configured parsing options.</p>"},{"location":"reference/griffe/#griffe.Docstring.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str = cleandoc(rstrip())\n</code></pre> <p>The original value of the docstring, cleaned by <code>inspect.cleandoc</code>.</p>"},{"location":"reference/griffe/#griffe.Docstring.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *,\n    full: bool = False,\n    docstring_parser: Parser | None = None,\n    **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this docstring's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to parse the docstring with. By default, no parsing is done.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization or docstring parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Docstring.parse","title":"parse","text":"<pre><code>parse(\n    parser: Literal[\"google\", \"numpy\", \"sphinx\"]\n    | Parser\n    | None = None,\n    **options: Any\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse the docstring into structured data.</p> <p>Parameters:</p> <ul> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. In order: use the given parser, or the self parser, or no parser (return a single text section).</p> </li> <li> **options             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>         \u2013          <p>The parsed docstring as a list of sections.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension","title":"Extension","text":"<p>Base class for Griffe extensions.</p> <p>Methods:</p> <ul> <li> generic_inspect           \u2013            <p>Extend the base generic inspection with extensions.</p> </li> <li> generic_visit           \u2013            <p>Visit children nodes.</p> </li> <li> inspect           \u2013            <p>Inspect a node.</p> </li> <li> on_attribute_instance           \u2013            <p>Run when an Attribute has been created.</p> </li> <li> on_attribute_node           \u2013            <p>Run when visiting a new attribute node during static/dynamic analysis.</p> </li> <li> on_class_instance           \u2013            <p>Run when a Class has been created.</p> </li> <li> on_class_members           \u2013            <p>Run when members of a Class have been loaded.</p> </li> <li> on_class_node           \u2013            <p>Run when visiting a new class node during static/dynamic analysis.</p> </li> <li> on_function_instance           \u2013            <p>Run when a Function has been created.</p> </li> <li> on_function_node           \u2013            <p>Run when visiting a new function node during static/dynamic analysis.</p> </li> <li> on_instance           \u2013            <p>Run when an Object has been created.</p> </li> <li> on_members           \u2013            <p>Run when members of an Object have been loaded.</p> </li> <li> on_module_instance           \u2013            <p>Run when a Module has been created.</p> </li> <li> on_module_members           \u2013            <p>Run when members of a Module have been loaded.</p> </li> <li> on_module_node           \u2013            <p>Run when visiting a new module node during static/dynamic analysis.</p> </li> <li> on_node           \u2013            <p>Run when visiting a new node during static/dynamic analysis.</p> </li> <li> visit           \u2013            <p>Visit a node.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.generic_inspect","title":"generic_inspect","text":"<pre><code>generic_inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base generic inspection with extensions.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.generic_visit","title":"generic_visit","text":"<pre><code>generic_visit(node: AST) -&gt; None\n</code></pre> <p>Visit children nodes.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit the children of.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_attribute_instance","title":"on_attribute_instance","text":"<pre><code>on_attribute_instance(\n    *, node: AST | ObjectNode, attr: Attribute\n) -&gt; None\n</code></pre> <p>Run when an Attribute has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> attr             (<code>Attribute</code>)         \u2013          <p>The attribute instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_attribute_node","title":"on_attribute_node","text":"<pre><code>on_attribute_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new attribute node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_class_instance","title":"on_class_instance","text":"<pre><code>on_class_instance(\n    *, node: AST | ObjectNode, cls: Class\n) -&gt; None\n</code></pre> <p>Run when a Class has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> cls             (<code>Class</code>)         \u2013          <p>The class instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_class_members","title":"on_class_members","text":"<pre><code>on_class_members(\n    *, node: AST | ObjectNode, cls: Class\n) -&gt; None\n</code></pre> <p>Run when members of a Class have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> cls             (<code>Class</code>)         \u2013          <p>The class instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_class_node","title":"on_class_node","text":"<pre><code>on_class_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new class node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_function_instance","title":"on_function_instance","text":"<pre><code>on_function_instance(\n    *, node: AST | ObjectNode, func: Function\n) -&gt; None\n</code></pre> <p>Run when a Function has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> func             (<code>Function</code>)         \u2013          <p>The function instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_function_node","title":"on_function_node","text":"<pre><code>on_function_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new function node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_instance","title":"on_instance","text":"<pre><code>on_instance(*, node: AST | ObjectNode, obj: Object) -&gt; None\n</code></pre> <p>Run when an Object has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> obj             (<code>Object</code>)         \u2013          <p>The object instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_members","title":"on_members","text":"<pre><code>on_members(*, node: AST | ObjectNode, obj: Object) -&gt; None\n</code></pre> <p>Run when members of an Object have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> obj             (<code>Object</code>)         \u2013          <p>The object instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_module_instance","title":"on_module_instance","text":"<pre><code>on_module_instance(\n    *, node: AST | ObjectNode, mod: Module\n) -&gt; None\n</code></pre> <p>Run when a Module has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> mod             (<code>Module</code>)         \u2013          <p>The module instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_module_members","title":"on_module_members","text":"<pre><code>on_module_members(\n    *, node: AST | ObjectNode, mod: Module\n) -&gt; None\n</code></pre> <p>Run when members of a Module have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> mod             (<code>Module</code>)         \u2013          <p>The module instance.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_module_node","title":"on_module_node","text":"<pre><code>on_module_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new module node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.on_node","title":"on_node","text":"<pre><code>on_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Extension.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Visit a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function","title":"Function","text":"<pre><code>Function(\n    *args: Any,\n    parameters: Parameters | None = None,\n    returns: str | Expr | None = None,\n    decorators: list[Decorator] | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python function.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> parameters             (<code>Parameters | None</code>, default:                 <code>None</code> )         \u2013          <p>The function parameters.</p> </li> <li> returns             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The function return annotation.</p> </li> <li> decorators             (<code>list[Decorator] | None</code>, default:                 <code>None</code> )         \u2013          <p>The function decorators, if any.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this function's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The type annotation of the returned value.</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> decorators             (<code>list[Decorator]</code>)         \u2013          <p>The function decorators.</p> </li> <li> deleter             (<code>Function | None</code>)         \u2013          <p>The deleter linked to this function (property).</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> overloads             (<code>list[Function] | None</code>)         \u2013          <p>The overloaded signatures of this function.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parameters             (<code>Parameters</code>)         \u2013          <p>The function parameters.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> returns             (<code>str | Expr | None</code>)         \u2013          <p>The function return type annotation.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> setter             (<code>Function | None</code>)         \u2013          <p>The setter linked to this function (property).</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/#griffe.Function.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Function.annotation","title":"annotation  <code>property</code>","text":"<pre><code>annotation: str | Expr | None\n</code></pre> <p>The type annotation of the returned value.</p>"},{"location":"reference/griffe/#griffe.Function.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Function.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/#griffe.Function.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Function.decorators","title":"decorators  <code>instance-attribute</code>","text":"<pre><code>decorators: list[Decorator] = decorators or []\n</code></pre> <p>The function decorators.</p>"},{"location":"reference/griffe/#griffe.Function.deleter","title":"deleter  <code>instance-attribute</code>","text":"<pre><code>deleter: Function | None = None\n</code></pre> <p>The deleter linked to this function (property).</p>"},{"location":"reference/griffe/#griffe.Function.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/#griffe.Function.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/#griffe.Function.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/#griffe.Function.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/#griffe.Function.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/#griffe.Function.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Function.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Function.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Function.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/#griffe.Function.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/#griffe.Function.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Function.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/#griffe.Function.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/#griffe.Function.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/#griffe.Function.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/#griffe.Function.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Function.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/#griffe.Function.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Function.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/#griffe.Function.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/#griffe.Function.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/#griffe.Function.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/#griffe.Function.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/#griffe.Function.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Function.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/#griffe.Function.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: list[Function] | None = None\n</code></pre> <p>The overloaded signatures of this function.</p>"},{"location":"reference/griffe/#griffe.Function.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/#griffe.Function.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters: Parameters = parameters or Parameters()\n</code></pre> <p>The function parameters.</p>"},{"location":"reference/griffe/#griffe.Function.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/#griffe.Function.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/#griffe.Function.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/#griffe.Function.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.returns","title":"returns  <code>instance-attribute</code>","text":"<pre><code>returns: str | Expr | None = returns\n</code></pre> <p>The function return type annotation.</p>"},{"location":"reference/griffe/#griffe.Function.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/#griffe.Function.setter","title":"setter  <code>instance-attribute</code>","text":"<pre><code>setter: Function | None = None\n</code></pre> <p>The setter linked to this function (property).</p>"},{"location":"reference/griffe/#griffe.Function.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/#griffe.Function.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Function.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Function.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/#griffe.Function.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this function's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/#griffe.Function.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Function.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/#griffe.Function.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Function.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/#griffe.Module","title":"Module","text":"<pre><code>Module(\n    *args: Any,\n    filepath: Path | list[Path] | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python module.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> filepath             (<code>Path | list[Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The module file path (directory for namespace [sub]packages, none for builtin modules).</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this module's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path of this module.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> imports_future_annotations             (<code>bool</code>)         \u2013          <p>Whether this module import future annotations.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_init_module             (<code>bool</code>)         \u2013          <p>Whether this module is an <code>__init__.py</code> module.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> is_namespace_package             (<code>bool</code>)         \u2013          <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> is_namespace_subpackage             (<code>bool</code>)         \u2013          <p>Whether this module is a namespace subpackage.</p> </li> <li> is_package             (<code>bool</code>)         \u2013          <p>Whether this module is a package (top module).</p> </li> <li> is_subpackage             (<code>bool</code>)         \u2013          <p>Whether this module is a subpackage.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> overloads             (<code>dict[str, list[Function]]</code>)         \u2013          <p>The overloaded signature declared in this module.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/#griffe.Module.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Module.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Module.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/#griffe.Module.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Module.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/#griffe.Module.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/#griffe.Module.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/#griffe.Module.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/#griffe.Module.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path of this module.</p> <p>Raises:</p> <ul> <li> <code>BuiltinModuleError</code>           \u2013          <p>When the instance filepath is None.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Module.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Module.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Module.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/#griffe.Module.imports_future_annotations","title":"imports_future_annotations  <code>property</code>","text":"<pre><code>imports_future_annotations: bool\n</code></pre> <p>Whether this module import future annotations.</p>"},{"location":"reference/griffe/#griffe.Module.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/#griffe.Module.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Module.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/#griffe.Module.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/#griffe.Module.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/#griffe.Module.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/#griffe.Module.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Module.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/#griffe.Module.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Module.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this module is an <code>__init__.py</code> module.</p>"},{"location":"reference/griffe/#griffe.Module.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/#griffe.Module.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p>"},{"location":"reference/griffe/#griffe.Module.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this module is a namespace subpackage.</p>"},{"location":"reference/griffe/#griffe.Module.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this module is a package (top module).</p>"},{"location":"reference/griffe/#griffe.Module.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this module is a subpackage.</p>"},{"location":"reference/griffe/#griffe.Module.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/#griffe.Module.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/#griffe.Module.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/#griffe.Module.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/#griffe.Module.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Module.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/#griffe.Module.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: dict[str, list[Function]] = defaultdict(list)\n</code></pre> <p>The overloaded signature declared in this module.</p>"},{"location":"reference/griffe/#griffe.Module.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/#griffe.Module.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/#griffe.Module.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/#griffe.Module.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/#griffe.Module.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/#griffe.Module.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/#griffe.Module.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Module.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Module.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/#griffe.Module.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this module's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/#griffe.Module.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Module.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/#griffe.Module.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Module.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/#griffe.Object","title":"Object","text":"<pre><code>Object(\n    name: str,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    runtime: bool = True,\n    docstring: Docstring | None = None,\n    parent: Module | Class | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None\n)\n</code></pre> <p>             Bases: <code>GetMembersMixin</code>, <code>SetMembersMixin</code>, <code>ObjectAliasMixin</code>, <code>SerializationMixin</code></p> <p>An abstract class representing a Python object.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The object name, as declared in the code.</p> </li> <li> lineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The object starting line, or None for modules. Lines start at 1.</p> </li> <li> endlineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The object ending line (inclusive), or None for modules.</p> </li> <li> runtime             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether this object is present at runtime or not.</p> </li> <li> docstring             (<code>Docstring | None</code>, default:                 <code>None</code> )         \u2013          <p>The object docstring.</p> </li> <li> parent             (<code>Module | Class | None</code>, default:                 <code>None</code> )         \u2013          <p>The object parent.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> kind             (<code>Kind</code>)         \u2013          <p>The object kind.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/#griffe.Object.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Object.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Object.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/#griffe.Object.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Object.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/#griffe.Object.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/#griffe.Object.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/#griffe.Object.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/#griffe.Object.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/#griffe.Object.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Object.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Object.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/#griffe.Object.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/#griffe.Object.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/#griffe.Object.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Object.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/#griffe.Object.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/#griffe.Object.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/#griffe.Object.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/#griffe.Object.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Object.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/#griffe.Object.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/#griffe.Object.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/#griffe.Object.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: Kind\n</code></pre> <p>The object kind.</p>"},{"location":"reference/griffe/#griffe.Object.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/#griffe.Object.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/#griffe.Object.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/#griffe.Object.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/#griffe.Object.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/#griffe.Object.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/#griffe.Object.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/#griffe.Object.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/#griffe.Object.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/#griffe.Object.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/#griffe.Object.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/#griffe.Object.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/#griffe.Object.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Object.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Object.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/#griffe.Object.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/#griffe.Object.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/#griffe.Object.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/#griffe.Object.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.Object.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/#griffe.ObjectNode","title":"ObjectNode","text":"<pre><code>ObjectNode(\n    obj: Any, name: str, parent: ObjectNode | None = None\n)\n</code></pre> <p>Helper class to represent an object tree.</p> <p>It's not really a tree but more a backward-linked list: each node has a reference to its parent, but not to its child (for simplicity purposes and to avoid bugs).</p> <p>Each node stores an object, its name, and a reference to its parent node.</p> <p>Parameters:</p> <ul> <li> obj             (<code>Any</code>)         \u2013          <p>A Python object.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object's name.</p> </li> <li> parent             (<code>ObjectNode | None</code>, default:                 <code>None</code> )         \u2013          <p>The object's parent node.</p> </li> </ul> <p>Methods:</p> <ul> </ul> <p>Attributes:</p> <ul> <li> alias_target_path             (<code>str | None</code>)         \u2013          <p>Alias target path of this node, if the node should be an alias.</p> </li> <li> children             (<code>Sequence[ObjectNode]</code>)         \u2013          <p>The children of this node.</p> </li> <li> is_builtin_function             (<code>bool</code>)         \u2013          <p>Whether this node's object is a builtin function.</p> </li> <li> is_builtin_method             (<code>bool</code>)         \u2013          <p>Whether this node's object is a builtin method.</p> </li> <li> is_cached_property             (<code>bool</code>)         \u2013          <p>Whether this node's object is a cached property.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this node's object is a class.</p> </li> <li> is_classmethod             (<code>bool</code>)         \u2013          <p>Whether this node's object is a classmethod.</p> </li> <li> is_coroutine             (<code>bool</code>)         \u2013          <p>Whether this node's object is a coroutine.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this node's object is a function.</p> </li> <li> is_method             (<code>bool</code>)         \u2013          <p>Whether this node's object is a method.</p> </li> <li> is_method_descriptor             (<code>bool</code>)         \u2013          <p>Whether this node's object is a method descriptor.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this node's object is a module.</p> </li> <li> is_property             (<code>bool</code>)         \u2013          <p>Whether this node's object is a property.</p> </li> <li> is_staticmethod             (<code>bool</code>)         \u2013          <p>Whether this node's object is a staticmethod.</p> </li> <li> kind             (<code>ObjectKind</code>)         \u2013          <p>The kind of this node.</p> </li> <li> module             (<code>ObjectNode</code>)         \u2013          <p>The object's module.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The Python object's name.</p> </li> <li> obj             (<code>Any</code>)         \u2013          <p>The actual Python object.</p> </li> <li> parent             (<code>ObjectNode | None</code>)         \u2013          <p>The parent node.</p> </li> <li> parent_is_class             (<code>bool</code>)         \u2013          <p>Whether the object of this node's parent is a class.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The object's (Python) path.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.ObjectNode.alias_target_path","title":"alias_target_path  <code>cached</code> <code>property</code>","text":"<pre><code>alias_target_path: str | None\n</code></pre> <p>Alias target path of this node, if the node should be an alias.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.children","title":"children  <code>cached</code> <code>property</code>","text":"<pre><code>children: Sequence[ObjectNode]\n</code></pre> <p>The children of this node.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_builtin_function","title":"is_builtin_function  <code>cached</code> <code>property</code>","text":"<pre><code>is_builtin_function: bool\n</code></pre> <p>Whether this node's object is a builtin function.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_builtin_method","title":"is_builtin_method  <code>cached</code> <code>property</code>","text":"<pre><code>is_builtin_method: bool\n</code></pre> <p>Whether this node's object is a builtin method.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_cached_property","title":"is_cached_property  <code>cached</code> <code>property</code>","text":"<pre><code>is_cached_property: bool\n</code></pre> <p>Whether this node's object is a cached property.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_class","title":"is_class  <code>cached</code> <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this node's object is a class.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_classmethod","title":"is_classmethod  <code>cached</code> <code>property</code>","text":"<pre><code>is_classmethod: bool\n</code></pre> <p>Whether this node's object is a classmethod.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_coroutine","title":"is_coroutine  <code>cached</code> <code>property</code>","text":"<pre><code>is_coroutine: bool\n</code></pre> <p>Whether this node's object is a coroutine.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_function","title":"is_function  <code>cached</code> <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this node's object is a function.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_method","title":"is_method  <code>cached</code> <code>property</code>","text":"<pre><code>is_method: bool\n</code></pre> <p>Whether this node's object is a method.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_method_descriptor","title":"is_method_descriptor  <code>cached</code> <code>property</code>","text":"<pre><code>is_method_descriptor: bool\n</code></pre> <p>Whether this node's object is a method descriptor.</p> <p>Built-in methods (e.g. those implemented in C/Rust) are often method descriptors, rather than normal methods.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_module","title":"is_module  <code>cached</code> <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this node's object is a module.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_property","title":"is_property  <code>cached</code> <code>property</code>","text":"<pre><code>is_property: bool\n</code></pre> <p>Whether this node's object is a property.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.is_staticmethod","title":"is_staticmethod  <code>cached</code> <code>property</code>","text":"<pre><code>is_staticmethod: bool\n</code></pre> <p>Whether this node's object is a staticmethod.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.kind","title":"kind  <code>property</code>","text":"<pre><code>kind: ObjectKind\n</code></pre> <p>The kind of this node.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.module","title":"module  <code>property</code>","text":"<pre><code>module: ObjectNode\n</code></pre> <p>The object's module.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The Python object's name.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj: Any = obj\n</code></pre> <p>The actual Python object.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: ObjectNode | None = parent\n</code></pre> <p>The parent node.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.parent_is_class","title":"parent_is_class  <code>cached</code> <code>property</code>","text":"<pre><code>parent_is_class: bool\n</code></pre> <p>Whether the object of this node's parent is a class.</p>"},{"location":"reference/griffe/#griffe.ObjectNode.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The object's (Python) path.</p>"},{"location":"reference/griffe/#griffe.dynamic_import","title":"dynamic_import","text":"<pre><code>dynamic_import(\n    import_path: str,\n    import_paths: Sequence[str | Path] | None = None,\n) -&gt; Any\n</code></pre> <p>Dynamically import the specified object.</p> <p>It can be a module, class, method, function, attribute, nested arbitrarily.</p> <p>Parameters:</p> <ul> <li> import_path             (<code>str</code>)         \u2013          <p>The path of the object to import.</p> </li> <li> import_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to import the object from.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>           \u2013          <p>When the object's module could not be found.</p> </li> <li> <code>ImportError</code>           \u2013          <p>When there was an import error or when couldn't get the attribute.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The imported object.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.find_breaking_changes","title":"find_breaking_changes","text":"<pre><code>find_breaking_changes(\n    old_obj: Object | Alias,\n    new_obj: Object | Alias,\n    *,\n    ignore_private: bool = True\n) -&gt; Iterator[Breakage]\n</code></pre> <p>Find breaking changes between two versions of the same API.</p> <p>The function will iterate recursively on all objects and yield breaking changes with detailed information.</p> <p>Parameters:</p> <ul> <li> old_obj             (<code>Object | Alias</code>)         \u2013          <p>The old version of an object.</p> </li> <li> new_obj             (<code>Object | Alias</code>)         \u2013          <p>The new version of an object.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Breakage</code>         \u2013          <p>Breaking changes.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sys, griffe\n&gt;&gt;&gt; new = griffe.load(\"pkg\")\n&gt;&gt;&gt; old = griffe.load_git(\"pkg\", \"1.2.3\")\n&gt;&gt;&gt; for breakage in griffe.find_breaking_changes(old, new)\n...     print(breakage.explain(style=style), file=sys.stderr)\n</code></pre>"},{"location":"reference/griffe/#griffe.get_logger","title":"get_logger","text":"<pre><code>get_logger(name: str) -&gt; _Logger\n</code></pre> <p>Create and return a new logger instance.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The logger name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_Logger</code>         \u2013          <p>The logger.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.load","title":"load","text":"<pre><code>load(\n    module: str | Path,\n    *,\n    submodules: bool = True,\n    try_relative_path: bool = True,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True\n) -&gt; Module\n</code></pre> <p>Load and return a module.</p> <p>Example: <pre><code>import griffe\n\nmodule = griffe.load(...)\n</code></pre></p> <p>This is a shortcut for:</p> <pre><code>from griffe.loader import GriffeLoader\n\nloader = GriffeLoader(...)\nmodule = loader.load_module(...)\n</code></pre> <p>See the documentation for the loader: <code>GriffeLoader</code>.</p> <p>Parameters:</p> <ul> <li> module             (<code>str | Path</code>)         \u2013          <p>The module name or path.</p> </li> <li> submodules             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to recurse on the submodules.</p> </li> <li> try_relative_path             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to try finding the module as a relative path.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use.</p> </li> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to search into.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> <li> allow_inspection             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>A loaded module.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.load_extensions","title":"load_extensions","text":"<pre><code>load_extensions(\n    exts: Sequence[\n        str\n        | dict[str, Any]\n        | ExtensionType\n        | type[ExtensionType]\n    ]\n) -&gt; Extensions\n</code></pre> <p>Load configured extensions.</p> <p>Parameters:</p> <ul> <li> exts             (<code>Sequence[str | dict[str, Any] | ExtensionType | type[ExtensionType]]</code>)         \u2013          <p>A sequence of extension, with potential configuration options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Extensions</code>         \u2013          <p>An extensions container.</p> </li> </ul>"},{"location":"reference/griffe/#griffe.load_git","title":"load_git","text":"<pre><code>load_git(\n    module: str | Path,\n    *,\n    ref: str = \"HEAD\",\n    repo: str | Path = \".\",\n    submodules: bool = True,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True\n) -&gt; Module\n</code></pre> <p>Load and return a module from a specific Git reference.</p> <p>This function will create a temporary git worktree at the requested reference before loading <code>module</code> with <code>griffe.load</code>.</p> <p>This function requires that the <code>git</code> executable is installed.</p> <p>Parameters:</p> <ul> <li> module             (<code>str | Path</code>)         \u2013          <p>The module path, relative to the repository root.</p> </li> <li> ref             (<code>str</code>, default:                 <code>'HEAD'</code> )         \u2013          <p>A Git reference such as a commit, tag or branch.</p> </li> <li> repo             (<code>str | Path</code>, default:                 <code>'.'</code> )         \u2013          <p>Path to the repository (i.e. the directory containing the <code>.git</code> directory)</p> </li> <li> submodules             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to recurse on the submodules.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use.</p> </li> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to search into (relative to the repository root).</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> <li> allow_inspection             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>A loaded module.</p> </li> </ul>"},{"location":"reference/griffe/c3linear/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> c3linear","text":""},{"location":"reference/griffe/c3linear/#griffe.c3linear","title":"c3linear","text":"<p>Compute method resolution order. Implements <code>Class.mro</code> attribute.</p> <p>Functions:</p> <ul> <li> c3linear_merge           \u2013            <p>Merge lists of lists in the order defined by the C3Linear algorithm.</p> </li> </ul>"},{"location":"reference/griffe/c3linear/#griffe.c3linear.c3linear_merge","title":"c3linear_merge","text":"<pre><code>c3linear_merge(*lists: list[T]) -&gt; list[T]\n</code></pre> <p>Merge lists of lists in the order defined by the C3Linear algorithm.</p> <p>Parameters:</p> <ul> <li> *lists             (<code>list[T]</code>, default:                 <code>()</code> )         \u2013          <p>Lists of items.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[T]</code>         \u2013          <p>The merged list of items.</p> </li> </ul>"},{"location":"reference/griffe/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"reference/griffe/cli/#griffe.cli","title":"cli","text":"<p>Module that contains the command line application.</p> <p>Functions:</p> <ul> <li> check           \u2013            <p>Load packages data and dump it as JSON.</p> </li> <li> dump           \u2013            <p>Load packages data and dump it as JSON.</p> </li> <li> get_parser           \u2013            <p>Return the CLI argument parser.</p> </li> <li> main           \u2013            <p>Run the main program.</p> </li> </ul>"},{"location":"reference/griffe/cli/#griffe.cli.check","title":"check","text":"<pre><code>check(\n    package: str | Path,\n    against: str | None = None,\n    against_path: str | Path | None = None,\n    *,\n    base_ref: str | None = None,\n    extensions: Sequence[\n        str\n        | dict[str, Any]\n        | ExtensionType\n        | type[ExtensionType]\n    ]\n    | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    allow_inspection: bool = True,\n    verbose: bool = False,\n    color: bool | None = None\n) -&gt; int\n</code></pre> <p>Load packages data and dump it as JSON.</p> <p>Parameters:</p> <ul> <li> package             (<code>str | Path</code>)         \u2013          <p>The package to load and check.</p> </li> <li> against             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Older Git reference (commit, branch, tag) to check against.</p> </li> <li> against_path             (<code>str | Path | None</code>, default:                 <code>None</code> )         \u2013          <p>Path when the \"against\" reference is checked out.</p> </li> <li> base_ref             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Git reference (commit, branch, tag) to check.</p> </li> <li> extensions             (<code>Sequence[str | dict[str, Any] | ExtensionType | type[ExtensionType]] | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use.</p> </li> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to search into.</p> </li> <li> allow_inspection             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> <li> verbose             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Use a verbose output.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p><code>0</code> for success, <code>1</code> for failure.</p> </li> </ul>"},{"location":"reference/griffe/cli/#griffe.cli.dump","title":"dump","text":"<pre><code>dump(\n    packages: Sequence[str],\n    *,\n    output: str | IO | None = None,\n    full: bool = False,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    extensions: Sequence[\n        str\n        | dict[str, Any]\n        | ExtensionType\n        | type[ExtensionType]\n    ]\n    | None = None,\n    resolve_aliases: bool = False,\n    resolve_implicit: bool = False,\n    resolve_external: bool = False,\n    search_paths: Sequence[str | Path] | None = None,\n    append_sys_path: bool = False,\n    allow_inspection: bool = True,\n    stats: bool = False\n) -&gt; int\n</code></pre> <p>Load packages data and dump it as JSON.</p> <p>Parameters:</p> <ul> <li> packages             (<code>Sequence[str]</code>)         \u2013          <p>The packages to load and dump.</p> </li> <li> output             (<code>str | IO | None</code>, default:                 <code>None</code> )         \u2013          <p>Where to output the JSON-serialized data.</p> </li> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to output full or minimal data.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> resolve_aliases             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to resolve aliases (indirect objects references).</p> </li> <li> resolve_implicit             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to resolve every alias or only the explicitly exported ones.</p> </li> <li> resolve_external             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to load additional, unspecified modules to resolve aliases.</p> </li> <li> extensions             (<code>Sequence[str | dict[str, Any] | ExtensionType | type[ExtensionType]] | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use.</p> </li> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to search into.</p> </li> <li> append_sys_path             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to append the contents of <code>sys.path</code> to the search paths.</p> </li> <li> allow_inspection             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> <li> stats             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to compute and log stats about loading.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p><code>0</code> for success, <code>1</code> for failure.</p> </li> </ul>"},{"location":"reference/griffe/cli/#griffe.cli.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>         \u2013          <p>An argparse parser.</p> </li> </ul>"},{"location":"reference/griffe/cli/#griffe.cli.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>griffe</code> or <code>python -m griffe</code>.</p> <p>Parameters:</p> <ul> <li> args             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>An exit code.</p> </li> </ul>"},{"location":"reference/griffe/collections/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> collections","text":""},{"location":"reference/griffe/collections/#griffe.collections","title":"collections","text":"<p>This module stores collections of data, useful during parsing.</p> <p>Classes:</p> <ul> <li> LinesCollection         \u2013          <p>A simple dictionary containing the modules source code lines.</p> </li> <li> ModulesCollection         \u2013          <p>A collection of modules, allowing easy access to members.</p> </li> </ul>"},{"location":"reference/griffe/collections/#griffe.collections.LinesCollection","title":"LinesCollection","text":"<pre><code>LinesCollection()\n</code></pre> <p>A simple dictionary containing the modules source code lines.</p> <p>Methods:</p> <ul> <li> items           \u2013            <p>Return the collection items.</p> </li> <li> keys           \u2013            <p>Return the collection keys.</p> </li> <li> values           \u2013            <p>Return the collection values.</p> </li> </ul>"},{"location":"reference/griffe/collections/#griffe.collections.LinesCollection.items","title":"items","text":"<pre><code>items() -&gt; ItemsView\n</code></pre> <p>Return the collection items.</p> <p>Returns:</p> <ul> <li> <code>ItemsView</code>         \u2013          <p>The collection items.</p> </li> </ul>"},{"location":"reference/griffe/collections/#griffe.collections.LinesCollection.keys","title":"keys","text":"<pre><code>keys() -&gt; KeysView\n</code></pre> <p>Return the collection keys.</p> <p>Returns:</p> <ul> <li> <code>KeysView</code>         \u2013          <p>The collection keys.</p> </li> </ul>"},{"location":"reference/griffe/collections/#griffe.collections.LinesCollection.values","title":"values","text":"<pre><code>values() -&gt; ValuesView\n</code></pre> <p>Return the collection values.</p> <p>Returns:</p> <ul> <li> <code>ValuesView</code>         \u2013          <p>The collection values.</p> </li> </ul>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection","title":"ModulesCollection","text":"<pre><code>ModulesCollection()\n</code></pre> <p>             Bases: <code>GetMembersMixin</code>, <code>SetMembersMixin</code></p> <p>A collection of modules, allowing easy access to members.</p> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> all_members             (<code>dict[str, Module]</code>)         \u2013          <p>Members of the collection.</p> </li> <li> members             (<code>dict[str, Module]</code>)         \u2013          <p>Members (modules) of the collection.</p> </li> </ul>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Module]\n</code></pre> <p>Members of the collection.</p> <p>This property is overwritten to simply return <code>self.members</code>, as <code>all_members</code> does not make sense for a modules collection.</p>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Module] = {}\n</code></pre> <p>Members (modules) of the collection.</p>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/collections/#griffe.collections.ModulesCollection.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/dataclasses/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> dataclasses","text":""},{"location":"reference/griffe/dataclasses/#griffe.dataclasses","title":"dataclasses","text":"<p>This module contains the data classes that represent Python objects.</p> <p>The different objects are modules, classes, functions, and attribute (variables like module/class/instance attributes).</p> <p>Classes:</p> <ul> <li> Alias         \u2013          <p>This class represents an alias, or indirection, to an object declared in another module.</p> </li> <li> Attribute         \u2013          <p>The class representing a Python module/class/instance attribute.</p> </li> <li> Class         \u2013          <p>The class representing a Python class.</p> </li> <li> Decorator         \u2013          <p>This class represents decorators.</p> </li> <li> Docstring         \u2013          <p>This class represents docstrings.</p> </li> <li> Function         \u2013          <p>The class representing a Python function.</p> </li> <li> Kind         \u2013          <p>Enumeration of the different object kinds.</p> </li> <li> Module         \u2013          <p>The class representing a Python module.</p> </li> <li> Object         \u2013          <p>An abstract class representing a Python object.</p> </li> <li> Parameter         \u2013          <p>This class represent a function parameter.</p> </li> <li> ParameterKind         \u2013          <p>Enumeration of the different parameter kinds.</p> </li> <li> Parameters         \u2013          <p>This class is a container for parameters.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias","title":"Alias","text":"<pre><code>Alias(\n    name: str,\n    target: str | Object | Alias,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    runtime: bool = True,\n    parent: Module | Class | Alias | None = None,\n    inherited: bool = False\n)\n</code></pre> <p>             Bases: <code>ObjectAliasMixin</code></p> <p>This class represents an alias, or indirection, to an object declared in another module.</p> <p>Aliases represent objects that are in the scope of a module or class, but were imported from another module.</p> <p>They behave almost exactly like regular objects, to a few exceptions:</p> <ul> <li>line numbers are those of the alias, not the target</li> <li>the path is the alias path, not the canonical one</li> <li>the name can be different from the target's</li> <li>if the target can be resolved, the kind is the target's kind</li> <li>if the target cannot be resolved, the kind becomes Kind.ALIAS</li> </ul> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The alias name.</p> </li> <li> target             (<code>str | Object | Alias</code>)         \u2013          <p>If it's a string, the target resolution is delayed until accessing the target property. If it's an object, or even another alias, the target is immediately set.</p> </li> <li> lineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The alias starting line number.</p> </li> <li> endlineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The alias ending line number.</p> </li> <li> runtime             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether this alias is present at runtime or not.</p> </li> <li> parent             (<code>Module | Class | Alias | None</code>, default:                 <code>None</code> )         \u2013          <p>The alias parent.</p> </li> <li> inherited             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether this alias wraps an inherited member.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this alias' data as a dictionary.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> resolve_target           \u2013            <p>Resolve the target.</p> </li> </ul> <p>Attributes:</p> <ul> <li> alias_endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the alias.</p> </li> <li> alias_lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the alias.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The target endlineno or the alias endlineno.</p> </li> <li> final_target             (<code>Object</code>)         \u2013          <p>The final, resolved target, if possible.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this alias' target has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this alias' target or any of its members has a non-empty docstring.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this alias represents an inherited member.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> kind             (<code>Kind</code>)         \u2013          <p>The target's kind, or <code>Kind.ALIAS</code> if the target cannot be resolved.</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The target lineno or the alias lineno.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to the alias parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The alias name.</p> </li> <li> parent             (<code>Module | Class | Alias | None</code>)         \u2013          <p>The parent of this alias.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path / import path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this alias is public.</p> </li> <li> resolved             (<code>bool</code>)         \u2013          <p>Whether this alias' target is resolved.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this alias is available at runtime.</p> </li> <li> target             (<code>Object | Alias</code>)         \u2013          <p>The resolved target (actual object), if possible.</p> </li> <li> target_path             (<code>str</code>)         \u2013          <p>The path of this alias' target.</p> </li> <li> wildcard             (<code>str | None</code>)         \u2013          <p>The module on which the wildcard import is performed (if any).</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.alias_endlineno","title":"alias_endlineno  <code>instance-attribute</code>","text":"<pre><code>alias_endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.alias_lineno","title":"alias_lineno  <code>instance-attribute</code>","text":"<pre><code>alias_lineno: int | None = lineno\n</code></pre> <p>The starting line number of the alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.endlineno","title":"endlineno  <code>property</code>","text":"<pre><code>endlineno: int | None\n</code></pre> <p>The target endlineno or the alias endlineno.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.final_target","title":"final_target  <code>property</code>","text":"<pre><code>final_target: Object\n</code></pre> <p>The final, resolved target, if possible.</p> <p>This will iterate through the targets until a non-alias object is found.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this alias' target has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this alias' target or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.inherited","title":"inherited  <code>instance-attribute</code>","text":"<pre><code>inherited: bool = inherited\n</code></pre> <p>Whether this alias represents an inherited member.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.kind","title":"kind  <code>property</code>","text":"<pre><code>kind: Kind\n</code></pre> <p>The target's kind, or <code>Kind.ALIAS</code> if the target cannot be resolved.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.lineno","title":"lineno  <code>property</code>","text":"<pre><code>lineno: int | None\n</code></pre> <p>The target lineno or the alias lineno.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to the alias parents.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The alias name.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.parent","title":"parent  <code>property</code> <code>writable</code>","text":"<pre><code>parent: Module | Class | Alias | None\n</code></pre> <p>The parent of this alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path / import path of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this alias is public.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.resolved","title":"resolved  <code>property</code>","text":"<pre><code>resolved: bool\n</code></pre> <p>Whether this alias' target is resolved.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this alias is available at runtime.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.target","title":"target  <code>property</code> <code>writable</code>","text":"<pre><code>target: Object | Alias\n</code></pre> <p>The resolved target (actual object), if possible.</p> <p>Upon accessing this property, if the target is not already resolved, a lookup is done using the modules collection to find the target.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.target_path","title":"target_path  <code>instance-attribute</code>","text":"<pre><code>target_path: str\n</code></pre> <p>The path of this alias' target.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.wildcard","title":"wildcard  <code>property</code>","text":"<pre><code>wildcard: str | None\n</code></pre> <p>The module on which the wildcard import is performed (if any).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this alias' data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Alias.resolve_target","title":"resolve_target","text":"<pre><code>resolve_target() -&gt; None\n</code></pre> <p>Resolve the target.</p> <p>Raises:</p> <ul> <li> <code>AliasResolutionError</code>           \u2013          <p>When the target cannot be resolved. It happens when the target does not exist, or could not be loaded (unhandled dynamic object?), or when the target is from a module that was not loaded and added to the collection.</p> </li> <li> <code>CyclicAliasError</code>           \u2013          <p>When the resolved target is the alias itself.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute","title":"Attribute","text":"<pre><code>Attribute(\n    *args: Any,\n    value: str | Expr | None = None,\n    annotation: str | Expr | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python module/class/instance attribute.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> value             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The attribute value, if any.</p> </li> <li> annotation             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The attribute annotation, if any.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this function's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The attribute type annotation.</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> <li> value             (<code>str | Expr | None</code>)         \u2013          <p>The attribute value.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The attribute type annotation.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr | None = value\n</code></pre> <p>The attribute value.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this function's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Attribute.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class","title":"Class","text":"<pre><code>Class(\n    *args: Any,\n    bases: Sequence[Expr | str] | None = None,\n    decorators: list[Decorator] | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python class.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> bases             (<code>Sequence[Expr | str] | None</code>, default:                 <code>None</code> )         \u2013          <p>The list of base classes, if any.</p> </li> <li> decorators             (<code>list[Decorator] | None</code>, default:                 <code>None</code> )         \u2013          <p>The class decorators, if any.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this class' data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> mro           \u2013            <p>Return a list of classes in order corresponding to Python's MRO.</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> bases             (<code>list[Expr | str]</code>)         \u2013          <p>The class bases.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> decorators             (<code>list[Decorator]</code>)         \u2013          <p>The class decorators.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> overloads             (<code>dict[str, list[Function]]</code>)         \u2013          <p>The overloaded signatures declared in this class.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parameters             (<code>Parameters</code>)         \u2013          <p>The parameters of this class' <code>__init__</code> method, if any.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> resolved_bases             (<code>list[Object]</code>)         \u2013          <p>Resolved class bases.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.bases","title":"bases  <code>instance-attribute</code>","text":"<pre><code>bases: list[Expr | str] = list(bases) if bases else []\n</code></pre> <p>The class bases.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.decorators","title":"decorators  <code>instance-attribute</code>","text":"<pre><code>decorators: list[Decorator] = decorators or []\n</code></pre> <p>The class decorators.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: dict[str, list[Function]] = defaultdict(list)\n</code></pre> <p>The overloaded signatures declared in this class.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.parameters","title":"parameters  <code>property</code>","text":"<pre><code>parameters: Parameters\n</code></pre> <p>The parameters of this class' <code>__init__</code> method, if any.</p> <p>This property fetches inherited members, and therefore is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.resolved_bases","title":"resolved_bases  <code>cached</code> <code>property</code>","text":"<pre><code>resolved_bases: list[Object]\n</code></pre> <p>Resolved class bases.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this class' data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.mro","title":"mro","text":"<pre><code>mro() -&gt; list[Class]\n</code></pre> <p>Return a list of classes in order corresponding to Python's MRO.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Class.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Decorator","title":"Decorator","text":"<pre><code>Decorator(\n    value: str | Expr,\n    *,\n    lineno: int | None,\n    endlineno: int | None\n)\n</code></pre> <p>This class represents decorators.</p> <p>Parameters:</p> <ul> <li> value             (<code>str | Expr</code>)         \u2013          <p>The decorator code.</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this decorator's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> callable_path             (<code>str</code>)         \u2013          <p>The path of the callable used as decorator.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the decorator.</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the decorator.</p> </li> <li> value             (<code>str | Expr</code>)         \u2013          <p>The decorator value (as a Griffe expression or string).</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Decorator.callable_path","title":"callable_path  <code>property</code>","text":"<pre><code>callable_path: str\n</code></pre> <p>The path of the callable used as decorator.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Decorator.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the decorator.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Decorator.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the decorator.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Decorator.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr = value\n</code></pre> <p>The decorator value (as a Griffe expression or string).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Decorator.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this decorator's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring","title":"Docstring","text":"<pre><code>Docstring(\n    value: str,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    parent: Object | None = None,\n    parser: Literal[\"google\", \"numpy\", \"sphinx\"]\n    | Parser\n    | None = None,\n    parser_options: dict[str, Any] | None = None\n)\n</code></pre> <p>This class represents docstrings.</p> <p>Parameters:</p> <ul> <li> value             (<code>str</code>)         \u2013          <p>The docstring value.</p> </li> <li> lineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The starting line number.</p> </li> <li> endlineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The ending line number.</p> </li> <li> parent             (<code>Object | None</code>, default:                 <code>None</code> )         \u2013          <p>The parent object on which this docstring is attached.</p> </li> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> parser_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this docstring's data as a dictionary.</p> </li> <li> parse           \u2013            <p>Parse the docstring into structured data.</p> </li> </ul> <p>Attributes:</p> <ul> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the docstring.</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the docstring.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines of the docstring.</p> </li> <li> parent             (<code>Object | None</code>)         \u2013          <p>The object this docstring is attached to.</p> </li> <li> parsed             (<code>list[DocstringSection]</code>)         \u2013          <p>The docstring sections, parsed into structured data.</p> </li> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>)         \u2013          <p>The selected docstring parser.</p> </li> <li> parser_options             (<code>dict[str, Any]</code>)         \u2013          <p>The configured parsing options.</p> </li> <li> value             (<code>str</code>)         \u2013          <p>The original value of the docstring, cleaned by <code>inspect.cleandoc</code>.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines of the docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Object | None = parent\n</code></pre> <p>The object this docstring is attached to.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.parsed","title":"parsed  <code>cached</code> <code>property</code>","text":"<pre><code>parsed: list[DocstringSection]\n</code></pre> <p>The docstring sections, parsed into structured data.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.parser","title":"parser  <code>instance-attribute</code>","text":"<pre><code>parser: Literal[\n    \"google\", \"numpy\", \"sphinx\"\n] | Parser | None = parser\n</code></pre> <p>The selected docstring parser.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.parser_options","title":"parser_options  <code>instance-attribute</code>","text":"<pre><code>parser_options: dict[str, Any] = parser_options or {}\n</code></pre> <p>The configured parsing options.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str = cleandoc(rstrip())\n</code></pre> <p>The original value of the docstring, cleaned by <code>inspect.cleandoc</code>.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *,\n    full: bool = False,\n    docstring_parser: Parser | None = None,\n    **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this docstring's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to parse the docstring with. By default, no parsing is done.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization or docstring parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Docstring.parse","title":"parse","text":"<pre><code>parse(\n    parser: Literal[\"google\", \"numpy\", \"sphinx\"]\n    | Parser\n    | None = None,\n    **options: Any\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse the docstring into structured data.</p> <p>Parameters:</p> <ul> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. In order: use the given parser, or the self parser, or no parser (return a single text section).</p> </li> <li> **options             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>         \u2013          <p>The parsed docstring as a list of sections.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function","title":"Function","text":"<pre><code>Function(\n    *args: Any,\n    parameters: Parameters | None = None,\n    returns: str | Expr | None = None,\n    decorators: list[Decorator] | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python function.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> parameters             (<code>Parameters | None</code>, default:                 <code>None</code> )         \u2013          <p>The function parameters.</p> </li> <li> returns             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The function return annotation.</p> </li> <li> decorators             (<code>list[Decorator] | None</code>, default:                 <code>None</code> )         \u2013          <p>The function decorators, if any.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this function's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The type annotation of the returned value.</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> decorators             (<code>list[Decorator]</code>)         \u2013          <p>The function decorators.</p> </li> <li> deleter             (<code>Function | None</code>)         \u2013          <p>The deleter linked to this function (property).</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> overloads             (<code>list[Function] | None</code>)         \u2013          <p>The overloaded signatures of this function.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parameters             (<code>Parameters</code>)         \u2013          <p>The function parameters.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> returns             (<code>str | Expr | None</code>)         \u2013          <p>The function return type annotation.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> setter             (<code>Function | None</code>)         \u2013          <p>The setter linked to this function (property).</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.annotation","title":"annotation  <code>property</code>","text":"<pre><code>annotation: str | Expr | None\n</code></pre> <p>The type annotation of the returned value.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.decorators","title":"decorators  <code>instance-attribute</code>","text":"<pre><code>decorators: list[Decorator] = decorators or []\n</code></pre> <p>The function decorators.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.deleter","title":"deleter  <code>instance-attribute</code>","text":"<pre><code>deleter: Function | None = None\n</code></pre> <p>The deleter linked to this function (property).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: list[Function] | None = None\n</code></pre> <p>The overloaded signatures of this function.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters: Parameters = parameters or Parameters()\n</code></pre> <p>The function parameters.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.returns","title":"returns  <code>instance-attribute</code>","text":"<pre><code>returns: str | Expr | None = returns\n</code></pre> <p>The function return type annotation.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.setter","title":"setter  <code>instance-attribute</code>","text":"<pre><code>setter: Function | None = None\n</code></pre> <p>The setter linked to this function (property).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this function's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Function.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Kind","title":"Kind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different object kinds.</p> <p>Attributes:</p> <ul> <li> ALIAS             (<code>str</code>)         \u2013          <p>Aliases (imported objects).</p> </li> <li> ATTRIBUTE             (<code>str</code>)         \u2013          <p>Attributes and properties.</p> </li> <li> CLASS             (<code>str</code>)         \u2013          <p>Classes.</p> </li> <li> FUNCTION             (<code>str</code>)         \u2013          <p>Functions and methods.</p> </li> <li> MODULE             (<code>str</code>)         \u2013          <p>Modules.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Kind.ALIAS","title":"ALIAS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALIAS: str = 'alias'\n</code></pre> <p>Aliases (imported objects).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Kind.ATTRIBUTE","title":"ATTRIBUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE: str = 'attribute'\n</code></pre> <p>Attributes and properties.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Kind.CLASS","title":"CLASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASS: str = 'class'\n</code></pre> <p>Classes.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Kind.FUNCTION","title":"FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FUNCTION: str = 'function'\n</code></pre> <p>Functions and methods.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Kind.MODULE","title":"MODULE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODULE: str = 'module'\n</code></pre> <p>Modules.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module","title":"Module","text":"<pre><code>Module(\n    *args: Any,\n    filepath: Path | list[Path] | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>Object</code></p> <p>The class representing a Python module.</p> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> <li> filepath             (<code>Path | list[Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The module file path (directory for namespace [sub]packages, none for builtin modules).</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>griffe.dataclasses.Object</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this module's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path of this module.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> imports_future_annotations             (<code>bool</code>)         \u2013          <p>Whether this module import future annotations.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_init_module             (<code>bool</code>)         \u2013          <p>Whether this module is an <code>__init__.py</code> module.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> is_namespace_package             (<code>bool</code>)         \u2013          <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> is_namespace_subpackage             (<code>bool</code>)         \u2013          <p>Whether this module is a namespace subpackage.</p> </li> <li> is_package             (<code>bool</code>)         \u2013          <p>Whether this module is a package (top module).</p> </li> <li> is_subpackage             (<code>bool</code>)         \u2013          <p>Whether this module is a subpackage.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> overloads             (<code>dict[str, list[Function]]</code>)         \u2013          <p>The overloaded signature declared in this module.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path of this module.</p> <p>Raises:</p> <ul> <li> <code>BuiltinModuleError</code>           \u2013          <p>When the instance filepath is None.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.imports_future_annotations","title":"imports_future_annotations  <code>property</code>","text":"<pre><code>imports_future_annotations: bool\n</code></pre> <p>Whether this module import future annotations.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this module is an <code>__init__.py</code> module.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this module is a namespace subpackage.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this module is a package (top module).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this module is a subpackage.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: dict[str, list[Function]] = defaultdict(list)\n</code></pre> <p>The overloaded signature declared in this module.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this module's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Module.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object","title":"Object","text":"<pre><code>Object(\n    name: str,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    runtime: bool = True,\n    docstring: Docstring | None = None,\n    parent: Module | Class | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None\n)\n</code></pre> <p>             Bases: <code>GetMembersMixin</code>, <code>SetMembersMixin</code>, <code>ObjectAliasMixin</code>, <code>SerializationMixin</code></p> <p>An abstract class representing a Python object.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The object name, as declared in the code.</p> </li> <li> lineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The object starting line, or None for modules. Lines start at 1.</p> </li> <li> endlineno             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The object ending line (inclusive), or None for modules.</p> </li> <li> runtime             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether this object is present at runtime or not.</p> </li> <li> docstring             (<code>Docstring | None</code>, default:                 <code>None</code> )         \u2013          <p>The object docstring.</p> </li> <li> parent             (<code>Module | Class | None</code>, default:                 <code>None</code> )         \u2013          <p>The object parent.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> filter_members           \u2013            <p>Filter and return members based on predicates.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> <li> has_labels           \u2013            <p>Tell if this object has all the given labels.</p> </li> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_kind           \u2013            <p>Tell if this object is of the given kind.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> <li> member_is_exported           \u2013            <p>Whether a member of this object is \"exported\".</p> </li> <li> resolve           \u2013            <p>Resolve a name within this object's and parents' scope.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> aliases             (<code>dict[str, Alias]</code>)         \u2013          <p>The aliases pointing to this object.</p> </li> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The full dotted path of this object.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> docstring             (<code>Docstring | None</code>)         \u2013          <p>The object docstring.</p> </li> <li> endlineno             (<code>int | None</code>)         \u2013          <p>The ending line number of the object.</p> </li> <li> exports             (<code>set[str] | list[str | ExprName] | None</code>)         \u2013          <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> extra             (<code>dict[str, dict[str, Any]]</code>)         \u2013          <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> filepath             (<code>Path | list[Path]</code>)         \u2013          <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> has_docstring             (<code>bool</code>)         \u2013          <p>Whether this object has a non-empty docstring.</p> </li> <li> has_docstrings             (<code>bool</code>)         \u2013          <p>Whether this object or any of its members has a non-empty docstring.</p> </li> <li> imports             (<code>dict[str, str]</code>)         \u2013          <p>The other objects imported by this object.</p> </li> <li> inherited             (<code>bool</code>)         \u2013          <p>Whether this object (alias) is inherited.</p> </li> <li> inherited_members             (<code>dict[str, Alias]</code>)         \u2013          <p>Members that are inherited from base classes.</p> </li> <li> is_alias             (<code>bool</code>)         \u2013          <p>Whether this object is an alias.</p> </li> <li> is_attribute             (<code>bool</code>)         \u2013          <p>Whether this object is an attribute.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this object is a class.</p> </li> <li> is_collection             (<code>bool</code>)         \u2013          <p>Whether this object is a (modules) collection.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this object is a function.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this object is a module.</p> </li> <li> kind             (<code>Kind</code>)         \u2013          <p>The object kind.</p> </li> <li> labels             (<code>set[str]</code>)         \u2013          <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> lineno             (<code>int | None</code>)         \u2013          <p>The starting line number of the object.</p> </li> <li> lines             (<code>list[str]</code>)         \u2013          <p>The lines containing the source of this object.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>The lines collection attached to this object or its parents.</p> </li> <li> members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The object members (modules, classes, functions, attributes).</p> </li> <li> module             (<code>Module</code>)         \u2013          <p>The parent module of this object.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>The modules collection attached to this object or its parents.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object name.</p> </li> <li> package             (<code>Module</code>)         \u2013          <p>The absolute top module (the package) of this object.</p> </li> <li> parent             (<code>Module | Class | None</code>)         \u2013          <p>The parent of the object (none if top module).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The dotted path of this object.</p> </li> <li> public             (<code>bool | None</code>)         \u2013          <p>Whether this object is public.</p> </li> <li> relative_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> relative_package_filepath             (<code>Path</code>)         \u2013          <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> runtime             (<code>bool</code>)         \u2013          <p>Whether this object is available at runtime.</p> </li> <li> source             (<code>str</code>)         \u2013          <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: set[str] | list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a non-empty docstring.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Whether this object (alias) is inherited.</p> <p>Objects can never be inherited, only aliases can.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.inherited_members","title":"inherited_members  <code>cached</code> <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Whether this object is an alias.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Whether this object is a (modules) collection.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: Kind\n</code></pre> <p>The object kind.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the object is not a module and does not have a parent.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no modules collection can be found in the object or its parents.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the relative path could not be computed.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool]\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>Parameters:</p> <ul> <li> *predicates             (<code>Callable[[Object | Alias], bool]</code>, default:                 <code>()</code> )         \u2013          <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>         \u2013          <p>A dictionary of members.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.has_labels","title":"has_labels","text":"<pre><code>has_labels(labels: set[str]) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>Parameters:</p> <ul> <li> labels             (<code>set[str]</code>)         \u2013          <p>A set of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str | Kind | set[str | Kind]</code>)         \u2013          <p>An instance or set of kinds (strings or enumerations).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.member_is_exported","title":"member_is_exported","text":"<pre><code>member_is_exported(\n    member: Object | Alias, *, explicitely: bool = True\n) -&gt; bool\n</code></pre> <p>Whether a member of this object is \"exported\".</p> <p>By exported, we mean that the object is included in the <code>__all__</code> attribute of its parent module or class. When <code>__all__</code> is not defined, we consider the member to be implicitely exported, unless it's a module and it was not imported, and unless it's not defined at runtime.</p> <p>Parameters:</p> <ul> <li> member             (<code>Object | Alias</code>)         \u2013          <p>The member to verify.</p> </li> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to resolve.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>           \u2013          <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The resolved name.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Object.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameter","title":"Parameter","text":"<pre><code>Parameter(\n    name: str,\n    *,\n    annotation: str | Expr | None = None,\n    kind: ParameterKind | None = None,\n    default: str | Expr | None = None\n)\n</code></pre> <p>This class represent a function parameter.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The parameter name.</p> </li> <li> annotation             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The parameter annotation, if any.</p> </li> <li> kind             (<code>ParameterKind | None</code>, default:                 <code>None</code> )         \u2013          <p>The parameter kind.</p> </li> <li> default             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The parameter default, if any.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this parameter's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The parameter type annotation.</p> </li> <li> default             (<code>str | Expr | None</code>)         \u2013          <p>The parameter default value.</p> </li> <li> kind             (<code>ParameterKind | None</code>)         \u2013          <p>The parameter kind.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The parameter name.</p> </li> <li> required             (<code>bool</code>)         \u2013          <p>Whether this parameter is required.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameter.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The parameter type annotation.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameter.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default: str | Expr | None = default\n</code></pre> <p>The parameter default value.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameter.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: ParameterKind | None = kind\n</code></pre> <p>The parameter kind.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The parameter name.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameter.required","title":"required  <code>property</code>","text":"<pre><code>required: bool\n</code></pre> <p>Whether this parameter is required.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameter.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this parameter's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.ParameterKind","title":"ParameterKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different parameter kinds.</p> <p>Attributes:</p> <ul> <li> keyword_only             (<code>str</code>)         \u2013          <p>Keyword-only parameter.</p> </li> <li> positional_only             (<code>str</code>)         \u2013          <p>Positional-only parameter.</p> </li> <li> positional_or_keyword             (<code>str</code>)         \u2013          <p>Positional or keyword parameter.</p> </li> <li> var_keyword             (<code>str</code>)         \u2013          <p>Variadic keyword parameter.</p> </li> <li> var_positional             (<code>str</code>)         \u2013          <p>Variadic positional parameter.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.ParameterKind.keyword_only","title":"keyword_only  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keyword_only: str = 'keyword-only'\n</code></pre> <p>Keyword-only parameter.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.ParameterKind.positional_only","title":"positional_only  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>positional_only: str = 'positional-only'\n</code></pre> <p>Positional-only parameter.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.ParameterKind.positional_or_keyword","title":"positional_or_keyword  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>positional_or_keyword: str = 'positional or keyword'\n</code></pre> <p>Positional or keyword parameter.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.ParameterKind.var_keyword","title":"var_keyword  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_keyword: str = 'variadic keyword'\n</code></pre> <p>Variadic keyword parameter.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.ParameterKind.var_positional","title":"var_positional  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_positional: str = 'variadic positional'\n</code></pre> <p>Variadic positional parameter.</p>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameters","title":"Parameters","text":"<pre><code>Parameters(*parameters: Parameter)\n</code></pre> <p>This class is a container for parameters.</p> <p>It allows to get parameters using their position (index) or their name:</p> <pre><code>&gt;&gt;&gt; parameters = Parameters(Parameter(\"hello\"))\n&gt;&gt;&gt; parameters[0] is parameters[\"hello\"]\nTrue\n</code></pre> <p>Parameters:</p> <ul> <li> *parameters             (<code>Parameter</code>, default:                 <code>()</code> )         \u2013          <p>The initial parameters to add to the container.</p> </li> </ul> <p>Methods:</p> <ul> <li> add           \u2013            <p>Add a parameter to the container.</p> </li> </ul>"},{"location":"reference/griffe/dataclasses/#griffe.dataclasses.Parameters.add","title":"add","text":"<pre><code>add(parameter: Parameter) -&gt; None\n</code></pre> <p>Add a parameter to the container.</p> <p>Parameters:</p> <ul> <li> parameter             (<code>Parameter</code>)         \u2013          <p>The function parameter to add.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When a parameter with the same name is already present.</p> </li> </ul>"},{"location":"reference/griffe/diff/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> diff","text":""},{"location":"reference/griffe/diff/#griffe.diff","title":"diff","text":"<p>This module exports \"breaking changes\" related utilities.</p> <p>Classes:</p> <ul> <li> AttributeChangedTypeBreakage         \u2013          <p>Specific breakage class for attributes whose type changed.</p> </li> <li> AttributeChangedValueBreakage         \u2013          <p>Specific breakage class for attributes whose value changed.</p> </li> <li> Breakage         \u2013          <p>Breakages can explain what broke from a version to another.</p> </li> <li> BreakageKind         \u2013          <p>Enumeration of the possible API breakages.</p> </li> <li> ClassRemovedBaseBreakage         \u2013          <p>Specific breakage class for removed base classes.</p> </li> <li> ExplanationStyle         \u2013          <p>Enumeration of the possible styles for explanations.</p> </li> <li> ObjectChangedKindBreakage         \u2013          <p>Specific breakage class for objects whose kind changed.</p> </li> <li> ObjectRemovedBreakage         \u2013          <p>Specific breakage class for removed objects.</p> </li> <li> ParameterAddedRequiredBreakage         \u2013          <p>Specific breakage class for new parameters added as required.</p> </li> <li> ParameterChangedDefaultBreakage         \u2013          <p>Specific breakage class for parameters whose default value changed.</p> </li> <li> ParameterChangedKindBreakage         \u2013          <p>Specific breakage class for parameters whose kind changed.</p> </li> <li> ParameterChangedRequiredBreakage         \u2013          <p>Specific breakage class for parameters which became required.</p> </li> <li> ParameterMovedBreakage         \u2013          <p>Specific breakage class for moved parameters.</p> </li> <li> ParameterRemovedBreakage         \u2013          <p>Specific breakage class for removed parameters.</p> </li> <li> ReturnChangedTypeBreakage         \u2013          <p>Specific breakage class for return values which changed type.</p> </li> </ul> <p>Functions:</p> <ul> <li> find_breaking_changes           \u2013            <p>Find breaking changes between two versions of the same API.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.AttributeChangedTypeBreakage","title":"AttributeChangedTypeBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for attributes whose type changed.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.AttributeChangedTypeBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.AttributeChangedTypeBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.AttributeChangedValueBreakage","title":"AttributeChangedValueBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for attributes whose value changed.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.AttributeChangedValueBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.AttributeChangedValueBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.Breakage","title":"Breakage","text":"<pre><code>Breakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>Breakages can explain what broke from a version to another.</p> <p>Parameters:</p> <ul> <li> obj             (<code>Object</code>)         \u2013          <p>The object related to the breakage.</p> </li> <li> old_value             (<code>Any</code>)         \u2013          <p>The old value.</p> </li> <li> new_value             (<code>Any</code>)         \u2013          <p>The new, incompatible value.</p> </li> <li> details             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Some details about the breakage.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.Breakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.Breakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.BreakageKind","title":"BreakageKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the possible API breakages.</p>"},{"location":"reference/griffe/diff/#griffe.diff.ClassRemovedBaseBreakage","title":"ClassRemovedBaseBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for removed base classes.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ClassRemovedBaseBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ClassRemovedBaseBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ExplanationStyle","title":"ExplanationStyle","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the possible styles for explanations.</p> <p>Attributes:</p> <ul> <li> ONE_LINE             (<code>str</code>)         \u2013          <p>Explanations on one-line.</p> </li> <li> VERBOSE             (<code>str</code>)         \u2013          <p>Explanations on multiple lines.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ExplanationStyle.ONE_LINE","title":"ONE_LINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ONE_LINE: str = 'oneline'\n</code></pre> <p>Explanations on one-line.</p>"},{"location":"reference/griffe/diff/#griffe.diff.ExplanationStyle.VERBOSE","title":"VERBOSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VERBOSE: str = 'verbose'\n</code></pre> <p>Explanations on multiple lines.</p>"},{"location":"reference/griffe/diff/#griffe.diff.ObjectChangedKindBreakage","title":"ObjectChangedKindBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for objects whose kind changed.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ObjectChangedKindBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ObjectChangedKindBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ObjectRemovedBreakage","title":"ObjectRemovedBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for removed objects.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ObjectRemovedBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ObjectRemovedBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterAddedRequiredBreakage","title":"ParameterAddedRequiredBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for new parameters added as required.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterAddedRequiredBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterAddedRequiredBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedDefaultBreakage","title":"ParameterChangedDefaultBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for parameters whose default value changed.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedDefaultBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedDefaultBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedKindBreakage","title":"ParameterChangedKindBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for parameters whose kind changed.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedKindBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedKindBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedRequiredBreakage","title":"ParameterChangedRequiredBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for parameters which became required.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedRequiredBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterChangedRequiredBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterMovedBreakage","title":"ParameterMovedBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for moved parameters.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterMovedBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterMovedBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterRemovedBreakage","title":"ParameterRemovedBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for removed parameters.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterRemovedBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ParameterRemovedBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ReturnChangedTypeBreakage","title":"ReturnChangedTypeBreakage","text":"<p>             Bases: <code>Breakage</code></p> <p>Specific breakage class for return values which changed type.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this object's data as a dictionary.</p> </li> <li> explain           \u2013            <p>Explain the breakage by showing old and new value.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ReturnChangedTypeBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.ReturnChangedTypeBreakage.explain","title":"explain","text":"<pre><code>explain(\n    style: ExplanationStyle = ExplanationStyle.ONE_LINE,\n) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <ul> <li> style             (<code>ExplanationStyle</code>, default:                 <code>ONE_LINE</code> )         \u2013          <p>The explanation style to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>An explanation.</p> </li> </ul>"},{"location":"reference/griffe/diff/#griffe.diff.find_breaking_changes","title":"find_breaking_changes","text":"<pre><code>find_breaking_changes(\n    old_obj: Object | Alias,\n    new_obj: Object | Alias,\n    *,\n    ignore_private: bool = True\n) -&gt; Iterator[Breakage]\n</code></pre> <p>Find breaking changes between two versions of the same API.</p> <p>The function will iterate recursively on all objects and yield breaking changes with detailed information.</p> <p>Parameters:</p> <ul> <li> old_obj             (<code>Object | Alias</code>)         \u2013          <p>The old version of an object.</p> </li> <li> new_obj             (<code>Object | Alias</code>)         \u2013          <p>The new version of an object.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Breakage</code>         \u2013          <p>Breaking changes.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sys, griffe\n&gt;&gt;&gt; new = griffe.load(\"pkg\")\n&gt;&gt;&gt; old = griffe.load_git(\"pkg\", \"1.2.3\")\n&gt;&gt;&gt; for breakage in griffe.find_breaking_changes(old, new)\n...     print(breakage.explain(style=style), file=sys.stderr)\n</code></pre>"},{"location":"reference/griffe/encoders/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> encoders","text":""},{"location":"reference/griffe/encoders/#griffe.encoders","title":"encoders","text":"<p>This module contains data encoders/serializers and decoders/deserializers.</p> <p>The available formats are:</p> <ul> <li><code>JSON</code>: see the <code>JSONEncoder</code> and <code>json_decoder</code>.</li> </ul> <p>Classes:</p> <ul> <li> JSONEncoder         \u2013          <p>JSON encoder.</p> </li> </ul> <p>Functions:</p> <ul> <li> json_decoder           \u2013            <p>Decode dictionaries as data classes.</p> </li> </ul>"},{"location":"reference/griffe/encoders/#griffe.encoders.JSONEncoder","title":"JSONEncoder","text":"<pre><code>JSONEncoder(\n    *args: Any,\n    full: bool = False,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    **kwargs: Any\n)\n</code></pre> <p>             Bases: <code>JSONEncoder</code></p> <p>JSON encoder.</p> <p>JSON encoders can be used directly, or through the <code>json.dump</code> or <code>json.dumps</code> methods.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from griffe.encoders import JSONEncoder\n&gt;&gt;&gt; JSONEncoder(full=True).encode(..., **kwargs)\n</code></pre> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from griffe.encoders import JSONEncoder\n&gt;&gt;&gt; json.dumps(..., cls=JSONEncoder, full=True, **kwargs)\n</code></pre> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>See <code>json.JSONEncoder</code>.</p> </li> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to dump full data or base data. If you plan to reload the data in Python memory using the <code>json_decoder</code>, you don't need the full data as it can be infered again using the base data. If you want to feed a non-Python tool instead, dump the full data.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>See <code>json.JSONEncoder</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> default           \u2013            <p>Return a serializable representation of the given object.</p> </li> </ul>"},{"location":"reference/griffe/encoders/#griffe.encoders.JSONEncoder.default","title":"default","text":"<pre><code>default(obj: Any) -&gt; Any\n</code></pre> <p>Return a serializable representation of the given object.</p> <p>Parameters:</p> <ul> <li> obj             (<code>Any</code>)         \u2013          <p>The object to serialize.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>A serializable representation.</p> </li> </ul>"},{"location":"reference/griffe/encoders/#griffe.encoders.json_decoder","title":"json_decoder","text":"<pre><code>json_decoder(\n    obj_dict: dict[str, Any]\n) -&gt; (\n    dict[str, Any] | Object | Alias | Parameter | str | Expr\n)\n</code></pre> <p>Decode dictionaries as data classes.</p> <p>The <code>json.loads</code> method walks the tree from bottom to top.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from griffe.encoders import json_decoder\n&gt;&gt;&gt; json.loads(..., object_hook=json_decoder)\n</code></pre> <p>Parameters:</p> <ul> <li> obj_dict             (<code>dict[str, Any]</code>)         \u2013          <p>The dictionary to decode.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any] | Object | Alias | Parameter | str | Expr</code>         \u2013          <p>An instance of a data class.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> enumerations","text":""},{"location":"reference/griffe/enumerations/#griffe.enumerations","title":"enumerations","text":"<p>This module contains all the enumerations of the package.</p> <p>Classes:</p> <ul> <li> BreakageKind         \u2013          <p>Enumeration of the possible API breakages.</p> </li> <li> DocstringSectionKind         \u2013          <p>Enumeration of the possible docstring section kinds.</p> </li> <li> ExplanationStyle         \u2013          <p>Enumeration of the possible styles for explanations.</p> </li> <li> Kind         \u2013          <p>Enumeration of the different object kinds.</p> </li> <li> ObjectKind         \u2013          <p>Enumeration of the different runtime object kinds.</p> </li> <li> ParameterKind         \u2013          <p>Enumeration of the different parameter kinds.</p> </li> <li> Parser         \u2013          <p>Enumeration of the different docstring parsers.</p> </li> <li> When         \u2013          <p>Enumeration of the different times at which an extension is used.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.BreakageKind","title":"BreakageKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the possible API breakages.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind","title":"DocstringSectionKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the possible docstring section kinds.</p> <p>Attributes:</p> <ul> <li> admonition         \u2013          <p>Admonition block.</p> </li> <li> attributes         \u2013          <p>Attributes section.</p> </li> <li> classes         \u2013          <p>Classes section.</p> </li> <li> deprecated         \u2013          <p>Deprecation section.</p> </li> <li> examples         \u2013          <p>Examples section.</p> </li> <li> functions         \u2013          <p>Functions section.</p> </li> <li> modules         \u2013          <p>Modules section.</p> </li> <li> other_parameters         \u2013          <p>Other parameters (keyword arguments) section.</p> </li> <li> parameters         \u2013          <p>Parameters section.</p> </li> <li> raises         \u2013          <p>Raises (exceptions) section.</p> </li> <li> receives         \u2013          <p>Received value(s) (generators) section.</p> </li> <li> returns         \u2013          <p>Returned value(s) section.</p> </li> <li> text         \u2013          <p>Text section.</p> </li> <li> warns         \u2013          <p>Warnings section.</p> </li> <li> yields         \u2013          <p>Yielded value(s) (generators) section.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.admonition","title":"admonition  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admonition = 'admonition'\n</code></pre> <p>Admonition block.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes = 'attributes'\n</code></pre> <p>Attributes section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.classes","title":"classes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>classes = 'classes'\n</code></pre> <p>Classes section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = 'deprecated'\n</code></pre> <p>Deprecation section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = 'examples'\n</code></pre> <p>Examples section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.functions","title":"functions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>functions = 'functions'\n</code></pre> <p>Functions section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.modules","title":"modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>modules = 'modules'\n</code></pre> <p>Modules section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.other_parameters","title":"other_parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>other_parameters = 'other parameters'\n</code></pre> <p>Other parameters (keyword arguments) section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = 'parameters'\n</code></pre> <p>Parameters section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.raises","title":"raises  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>raises = 'raises'\n</code></pre> <p>Raises (exceptions) section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.receives","title":"receives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>receives = 'receives'\n</code></pre> <p>Received value(s) (generators) section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.returns","title":"returns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>returns = 'returns'\n</code></pre> <p>Returned value(s) section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.text","title":"text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text = 'text'\n</code></pre> <p>Text section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.warns","title":"warns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>warns = 'warns'\n</code></pre> <p>Warnings section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.DocstringSectionKind.yields","title":"yields  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>yields = 'yields'\n</code></pre> <p>Yielded value(s) (generators) section.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ExplanationStyle","title":"ExplanationStyle","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the possible styles for explanations.</p> <p>Attributes:</p> <ul> <li> ONE_LINE             (<code>str</code>)         \u2013          <p>Explanations on one-line.</p> </li> <li> VERBOSE             (<code>str</code>)         \u2013          <p>Explanations on multiple lines.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ExplanationStyle.ONE_LINE","title":"ONE_LINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ONE_LINE: str = 'oneline'\n</code></pre> <p>Explanations on one-line.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ExplanationStyle.VERBOSE","title":"VERBOSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VERBOSE: str = 'verbose'\n</code></pre> <p>Explanations on multiple lines.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Kind","title":"Kind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different object kinds.</p> <p>Attributes:</p> <ul> <li> ALIAS             (<code>str</code>)         \u2013          <p>Aliases (imported objects).</p> </li> <li> ATTRIBUTE             (<code>str</code>)         \u2013          <p>Attributes and properties.</p> </li> <li> CLASS             (<code>str</code>)         \u2013          <p>Classes.</p> </li> <li> FUNCTION             (<code>str</code>)         \u2013          <p>Functions and methods.</p> </li> <li> MODULE             (<code>str</code>)         \u2013          <p>Modules.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Kind.ALIAS","title":"ALIAS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALIAS: str = 'alias'\n</code></pre> <p>Aliases (imported objects).</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Kind.ATTRIBUTE","title":"ATTRIBUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE: str = 'attribute'\n</code></pre> <p>Attributes and properties.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Kind.CLASS","title":"CLASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASS: str = 'class'\n</code></pre> <p>Classes.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Kind.FUNCTION","title":"FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FUNCTION: str = 'function'\n</code></pre> <p>Functions and methods.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Kind.MODULE","title":"MODULE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODULE: str = 'module'\n</code></pre> <p>Modules.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind","title":"ObjectKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different runtime object kinds.</p> <p>Attributes:</p> <ul> <li> ATTRIBUTE             (<code>str</code>)         \u2013          <p>Attributes.</p> </li> <li> BUILTIN_FUNCTION             (<code>str</code>)         \u2013          <p>Built-in functions.</p> </li> <li> BUILTIN_METHOD             (<code>str</code>)         \u2013          <p>Built-in ethods.</p> </li> <li> CACHED_PROPERTY             (<code>str</code>)         \u2013          <p>Cached properties.</p> </li> <li> CLASS             (<code>str</code>)         \u2013          <p>Classes.</p> </li> <li> CLASSMETHOD             (<code>str</code>)         \u2013          <p>Class methods.</p> </li> <li> COROUTINE             (<code>str</code>)         \u2013          <p>Coroutines</p> </li> <li> FUNCTION             (<code>str</code>)         \u2013          <p>Functions.</p> </li> <li> METHOD             (<code>str</code>)         \u2013          <p>Methods.</p> </li> <li> METHOD_DESCRIPTOR             (<code>str</code>)         \u2013          <p>Method descriptors.</p> </li> <li> MODULE             (<code>str</code>)         \u2013          <p>Modules.</p> </li> <li> PROPERTY             (<code>str</code>)         \u2013          <p>Properties.</p> </li> <li> STATICMETHOD             (<code>str</code>)         \u2013          <p>Static methods.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.ATTRIBUTE","title":"ATTRIBUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE: str = 'attribute'\n</code></pre> <p>Attributes.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.BUILTIN_FUNCTION","title":"BUILTIN_FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUILTIN_FUNCTION: str = 'builtin_function'\n</code></pre> <p>Built-in functions.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.BUILTIN_METHOD","title":"BUILTIN_METHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUILTIN_METHOD: str = 'builtin_method'\n</code></pre> <p>Built-in ethods.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.CACHED_PROPERTY","title":"CACHED_PROPERTY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CACHED_PROPERTY: str = 'cached_property'\n</code></pre> <p>Cached properties.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.CLASS","title":"CLASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASS: str = 'class'\n</code></pre> <p>Classes.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.CLASSMETHOD","title":"CLASSMETHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASSMETHOD: str = 'classmethod'\n</code></pre> <p>Class methods.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.COROUTINE","title":"COROUTINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COROUTINE: str = 'coroutine'\n</code></pre> <p>Coroutines</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.FUNCTION","title":"FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FUNCTION: str = 'function'\n</code></pre> <p>Functions.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.METHOD","title":"METHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METHOD: str = 'method'\n</code></pre> <p>Methods.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.METHOD_DESCRIPTOR","title":"METHOD_DESCRIPTOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METHOD_DESCRIPTOR: str = 'method_descriptor'\n</code></pre> <p>Method descriptors.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.MODULE","title":"MODULE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODULE: str = 'module'\n</code></pre> <p>Modules.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.PROPERTY","title":"PROPERTY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PROPERTY: str = 'property'\n</code></pre> <p>Properties.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ObjectKind.STATICMETHOD","title":"STATICMETHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STATICMETHOD: str = 'staticmethod'\n</code></pre> <p>Static methods.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ParameterKind","title":"ParameterKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different parameter kinds.</p> <p>Attributes:</p> <ul> <li> keyword_only             (<code>str</code>)         \u2013          <p>Keyword-only parameter.</p> </li> <li> positional_only             (<code>str</code>)         \u2013          <p>Positional-only parameter.</p> </li> <li> positional_or_keyword             (<code>str</code>)         \u2013          <p>Positional or keyword parameter.</p> </li> <li> var_keyword             (<code>str</code>)         \u2013          <p>Variadic keyword parameter.</p> </li> <li> var_positional             (<code>str</code>)         \u2013          <p>Variadic positional parameter.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ParameterKind.keyword_only","title":"keyword_only  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keyword_only: str = 'keyword-only'\n</code></pre> <p>Keyword-only parameter.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ParameterKind.positional_only","title":"positional_only  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>positional_only: str = 'positional-only'\n</code></pre> <p>Positional-only parameter.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ParameterKind.positional_or_keyword","title":"positional_or_keyword  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>positional_or_keyword: str = 'positional or keyword'\n</code></pre> <p>Positional or keyword parameter.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ParameterKind.var_keyword","title":"var_keyword  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_keyword: str = 'variadic keyword'\n</code></pre> <p>Variadic keyword parameter.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.ParameterKind.var_positional","title":"var_positional  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_positional: str = 'variadic positional'\n</code></pre> <p>Variadic positional parameter.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Parser","title":"Parser","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different docstring parsers.</p> <p>Attributes:</p> <ul> <li> google         \u2013          <p>Google-style docstrings parser.</p> </li> <li> numpy         \u2013          <p>Numpydoc-style docstrings parser.</p> </li> <li> sphinx         \u2013          <p>Sphinx-style docstrings parser.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Parser.google","title":"google  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>google = 'google'\n</code></pre> <p>Google-style docstrings parser.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Parser.numpy","title":"numpy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>numpy = 'numpy'\n</code></pre> <p>Numpydoc-style docstrings parser.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.Parser.sphinx","title":"sphinx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sphinx = 'sphinx'\n</code></pre> <p>Sphinx-style docstrings parser.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.When","title":"When","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different times at which an extension is used.</p> <p>Attributes:</p> <ul> <li> after_all             (<code>int</code>)         \u2013          <p>For each node, after the visit/inspection.</p> </li> <li> after_children             (<code>int</code>)         \u2013          <p>For each node, after the children have been visited/inspected, and before finishing the visit/inspection.</p> </li> <li> before_all             (<code>int</code>)         \u2013          <p>For each node, before the visit/inspection.</p> </li> <li> before_children             (<code>int</code>)         \u2013          <p>For each node, after the visit has started, and before the children visit/inspection.</p> </li> </ul>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.When.after_all","title":"after_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>after_all: int = 4\n</code></pre> <p>For each node, after the visit/inspection.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.When.after_children","title":"after_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>after_children: int = 3\n</code></pre> <p>For each node, after the children have been visited/inspected, and before finishing the visit/inspection.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.When.before_all","title":"before_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>before_all: int = 1\n</code></pre> <p>For each node, before the visit/inspection.</p>"},{"location":"reference/griffe/enumerations/#griffe.enumerations.When.before_children","title":"before_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>before_children: int = 2\n</code></pre> <p>For each node, after the visit has started, and before the children visit/inspection.</p>"},{"location":"reference/griffe/exceptions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exceptions","text":""},{"location":"reference/griffe/exceptions/#griffe.exceptions","title":"exceptions","text":"<p>This module contains all the exceptions specific to Griffe.</p> <p>Classes:</p> <ul> <li> AliasResolutionError         \u2013          <p>Exception for alias that cannot be resolved.</p> </li> <li> BuiltinModuleError         \u2013          <p>Exception raised when trying to access the filepath of a builtin module.</p> </li> <li> CyclicAliasError         \u2013          <p>Exception raised when a cycle is detected in aliases.</p> </li> <li> ExtensionError         \u2013          <p>Base class for errors raised by extensions.</p> </li> <li> ExtensionNotLoadedError         \u2013          <p>Exception raised when an extension could not be loaded.</p> </li> <li> GitError         \u2013          <p>Exception raised for errors related to Git.</p> </li> <li> GriffeError         \u2013          <p>The base exception for all Griffe errors.</p> </li> <li> LastNodeError         \u2013          <p>Exception raised when trying to access a next or previous node.</p> </li> <li> LoadingError         \u2013          <p>The base exception for all Griffe errors.</p> </li> <li> NameResolutionError         \u2013          <p>Exception for names that cannot be resolved in a object scope.</p> </li> <li> RootNodeError         \u2013          <p>Exception raised when trying to use siblings properties on a root node.</p> </li> <li> UnhandledEditableModuleError         \u2013          <p>Exception for unhandled editables modules, when searching modules.</p> </li> <li> UnimportableModuleError         \u2013          <p>Exception for modules that cannot be imported.</p> </li> </ul>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.AliasResolutionError","title":"AliasResolutionError","text":"<pre><code>AliasResolutionError(alias: Alias)\n</code></pre> <p>             Bases: <code>GriffeError</code></p> <p>Exception for alias that cannot be resolved.</p> <p>Parameters:</p> <ul> <li> alias             (<code>Alias</code>)         \u2013          <p>The alias that could not be resolved.</p> </li> </ul> <p>Methods:</p> <ul> </ul> <p>Attributes:</p> <ul> <li> alias             (<code>Alias</code>)         \u2013          <p>The alias that triggered the error.</p> </li> </ul>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.AliasResolutionError.alias","title":"alias  <code>instance-attribute</code>","text":"<pre><code>alias: Alias = alias\n</code></pre> <p>The alias that triggered the error.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.BuiltinModuleError","title":"BuiltinModuleError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Exception raised when trying to access the filepath of a builtin module.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.CyclicAliasError","title":"CyclicAliasError","text":"<pre><code>CyclicAliasError(chain: list[str])\n</code></pre> <p>             Bases: <code>GriffeError</code></p> <p>Exception raised when a cycle is detected in aliases.</p> <p>Parameters:</p> <ul> <li> chain             (<code>list[str]</code>)         \u2013          <p>The cyclic chain of items (such as target path).</p> </li> </ul> <p>Methods:</p> <ul> </ul> <p>Attributes:</p> <ul> <li> chain             (<code>list[str]</code>)         \u2013          <p>The chain of aliases that created the cycle.</p> </li> </ul>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.CyclicAliasError.chain","title":"chain  <code>instance-attribute</code>","text":"<pre><code>chain: list[str] = chain\n</code></pre> <p>The chain of aliases that created the cycle.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.ExtensionError","title":"ExtensionError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Base class for errors raised by extensions.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.ExtensionNotLoadedError","title":"ExtensionNotLoadedError","text":"<p>             Bases: <code>ExtensionError</code></p> <p>Exception raised when an extension could not be loaded.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.GitError","title":"GitError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Exception raised for errors related to Git.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.GriffeError","title":"GriffeError","text":"<p>             Bases: <code>Exception</code></p> <p>The base exception for all Griffe errors.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.LastNodeError","title":"LastNodeError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Exception raised when trying to access a next or previous node.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.LoadingError","title":"LoadingError","text":"<p>             Bases: <code>GriffeError</code></p> <p>The base exception for all Griffe errors.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.NameResolutionError","title":"NameResolutionError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Exception for names that cannot be resolved in a object scope.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.RootNodeError","title":"RootNodeError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Exception raised when trying to use siblings properties on a root node.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.UnhandledEditableModuleError","title":"UnhandledEditableModuleError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Exception for unhandled editables modules, when searching modules.</p>"},{"location":"reference/griffe/exceptions/#griffe.exceptions.UnimportableModuleError","title":"UnimportableModuleError","text":"<p>             Bases: <code>GriffeError</code></p> <p>Exception for modules that cannot be imported.</p>"},{"location":"reference/griffe/expressions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> expressions","text":""},{"location":"reference/griffe/expressions/#griffe.expressions","title":"expressions","text":"<p>This module contains the data classes that represent resolvable names and expressions.</p> <p>Classes:</p> <ul> <li> Expr         \u2013          <p>Base class for expressions.</p> </li> <li> ExprAttribute         \u2013          <p>Attributes like <code>a.b</code>.</p> </li> <li> ExprBinOp         \u2013          <p>Binary operations like <code>a + b</code>.</p> </li> <li> ExprBoolOp         \u2013          <p>Boolean operations like <code>a or b</code>.</p> </li> <li> ExprCall         \u2013          <p>Calls like <code>f()</code>.</p> </li> <li> ExprCompare         \u2013          <p>Comparisons like <code>a &gt; b</code>.</p> </li> <li> ExprComprehension         \u2013          <p>Comprehensions like <code>a for b in c if d</code>.</p> </li> <li> ExprConstant         \u2013          <p>Constants like <code>\"a\"</code> or <code>1</code>.</p> </li> <li> ExprDict         \u2013          <p>Dictionaries like <code>{\"a\": 0}</code>.</p> </li> <li> ExprDictComp         \u2013          <p>Dict comprehensions like <code>{k: v for k, v in a}</code>.</p> </li> <li> ExprExtSlice         \u2013          <p>Extended slice like <code>a[x:y, z]</code>.</p> </li> <li> ExprFormatted         \u2013          <p>Formatted string like <code>{1 + 1}</code>.</p> </li> <li> ExprGeneratorExp         \u2013          <p>Generator expressions like <code>a for b in c for d in e</code>.</p> </li> <li> ExprIfExp         \u2013          <p>Conditions like <code>a if b else c</code>.</p> </li> <li> ExprJoinedStr         \u2013          <p>Joined strings like <code>f\"a {b} c\"</code>.</p> </li> <li> ExprKeyword         \u2013          <p>Keyword arguments like <code>a=b</code>.</p> </li> <li> ExprLambda         \u2013          <p>Lambda expressions like <code>lambda a: a.b</code>.</p> </li> <li> ExprList         \u2013          <p>Lists like <code>[0, 1, 2]</code>.</p> </li> <li> ExprListComp         \u2013          <p>List comprehensions like <code>[a for b in c]</code>.</p> </li> <li> ExprName         \u2013          <p>This class represents a Python object identified by a name in a given scope.</p> </li> <li> ExprNamedExpr         \u2013          <p>Named/assignment expressions like <code>a := b</code>.</p> </li> <li> ExprParameter         \u2013          <p>Parameters in function signatures like <code>a: int = 0</code>.</p> </li> <li> ExprSet         \u2013          <p>Sets like <code>{0, 1, 2}</code>.</p> </li> <li> ExprSetComp         \u2013          <p>Set comprehensions like <code>{a for b in c}</code>.</p> </li> <li> ExprSlice         \u2013          <p>Slices like <code>[a:b:c]</code>.</p> </li> <li> ExprSubscript         \u2013          <p>Subscripts like <code>a[b]</code>.</p> </li> <li> ExprTuple         \u2013          <p>Tuples like <code>(0, 1, 2)</code>.</p> </li> <li> ExprUnaryOp         \u2013          <p>Unary operations like <code>-1</code>.</p> </li> <li> ExprVarKeyword         \u2013          <p>Variadic keyword parameters like <code>**kwargs</code>.</p> </li> <li> ExprVarPositional         \u2013          <p>Variadic positional parameters like <code>*args</code>.</p> </li> <li> ExprYield         \u2013          <p>Yield statements like <code>yield a</code>.</p> </li> </ul> <p>Functions:</p> <ul> <li> get_expression           \u2013            <p>Build an expression from an AST.</p> </li> <li> safe_get_expression           \u2013            <p>Safely (no exception) build a resolvable annotation.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr","title":"Expr  <code>dataclass</code>","text":"<p>Base class for expressions.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> <li> iterate           \u2013            <p>Iterate on the expression elements.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.Expr.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <ul> <li> flat             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>str | Expr</code>         \u2013          <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute","title":"ExprAttribute  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Attributes like <code>a.b</code>.</p> <p>Methods:</p> <ul> <li> append           \u2013            <p>Append a name to this attribute.</p> </li> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The canonical path of this attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> first             (<code>str | Expr</code>)         \u2013          <p>The first part of this attribute (on the left).</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> last             (<code>ExprName</code>)         \u2013          <p>The last part of this attribute (on the right).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The path of this attribute.</p> </li> <li> values             (<code>list[str | Expr]</code>)         \u2013          <p>The different parts of the dotted chain.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The canonical path of this attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.first","title":"first  <code>property</code>","text":"<pre><code>first: str | Expr\n</code></pre> <p>The first part of this attribute (on the left).</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.last","title":"last  <code>property</code>","text":"<pre><code>last: ExprName\n</code></pre> <p>The last part of this attribute (on the right).</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The path of this attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: list[str | Expr]\n</code></pre> <p>The different parts of the dotted chain.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.append","title":"append","text":"<pre><code>append(value: ExprName) -&gt; None\n</code></pre> <p>Append a name to this attribute.</p> <p>Parameters:</p> <ul> <li> value             (<code>ExprName</code>)         \u2013          <p>The expression name to append.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprAttribute.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp","title":"ExprBinOp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Binary operations like <code>a + b</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> left             (<code>str | Expr</code>)         \u2013          <p>Left part.</p> </li> <li> operator             (<code>str</code>)         \u2013          <p>Binary operator.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> right             (<code>str | Expr</code>)         \u2013          <p>Right part.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: str | Expr\n</code></pre> <p>Left part.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre> <p>Binary operator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right: str | Expr\n</code></pre> <p>Right part.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBinOp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp","title":"ExprBoolOp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Boolean operations like <code>a or b</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> operator             (<code>str</code>)         \u2013          <p>Boolean operator.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> values             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Operands.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre> <p>Boolean operator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: Sequence[str | Expr]\n</code></pre> <p>Operands.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprBoolOp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall","title":"ExprCall  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Calls like <code>f()</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> arguments             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Passed arguments.</p> </li> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> function             (<code>Expr</code>)         \u2013          <p>Function called.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.arguments","title":"arguments  <code>instance-attribute</code>","text":"<pre><code>arguments: Sequence[str | Expr]\n</code></pre> <p>Passed arguments.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function: Expr\n</code></pre> <p>Function called.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCall.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare","title":"ExprCompare  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Comparisons like <code>a &gt; b</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> comparators             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Things compared.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> left             (<code>str | Expr</code>)         \u2013          <p>Left part.</p> </li> <li> operators             (<code>Sequence[str]</code>)         \u2013          <p>Comparison operators.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.comparators","title":"comparators  <code>instance-attribute</code>","text":"<pre><code>comparators: Sequence[str | Expr]\n</code></pre> <p>Things compared.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: str | Expr\n</code></pre> <p>Left part.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.operators","title":"operators  <code>instance-attribute</code>","text":"<pre><code>operators: Sequence[str]\n</code></pre> <p>Comparison operators.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprCompare.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension","title":"ExprComprehension  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Comprehensions like <code>a for b in c if d</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> conditions             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Conditions to include the target in the result.</p> </li> <li> is_async             (<code>bool</code>)         \u2013          <p>Async comprehension or not.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> iterable             (<code>str | Expr</code>)         \u2013          <p>Value iterated on.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> target             (<code>str | Expr</code>)         \u2013          <p>Comprehension target (value added to the result).</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.conditions","title":"conditions  <code>instance-attribute</code>","text":"<pre><code>conditions: Sequence[str | Expr]\n</code></pre> <p>Conditions to include the target in the result.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.is_async","title":"is_async  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_async: bool = False\n</code></pre> <p>Async comprehension or not.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.iterable","title":"iterable  <code>instance-attribute</code>","text":"<pre><code>iterable: str | Expr\n</code></pre> <p>Value iterated on.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.target","title":"target  <code>instance-attribute</code>","text":"<pre><code>target: str | Expr\n</code></pre> <p>Comprehension target (value added to the result).</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprComprehension.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant","title":"ExprConstant  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Constants like <code>\"a\"</code> or <code>1</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>str</code>)         \u2013          <p>Constant value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Constant value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprConstant.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict","title":"ExprDict  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Dictionaries like <code>{\"a\": 0}</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> keys             (<code>Sequence[str | Expr | None]</code>)         \u2013          <p>Dict keys.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> values             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Dict values.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.keys","title":"keys  <code>instance-attribute</code>","text":"<pre><code>keys: Sequence[str | Expr | None]\n</code></pre> <p>Dict keys.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: Sequence[str | Expr]\n</code></pre> <p>Dict values.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDict.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp","title":"ExprDictComp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Dict comprehensions like <code>{k: v for k, v in a}</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> generators             (<code>Sequence[Expr]</code>)         \u2013          <p>Generators iterated on.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> key             (<code>str | Expr</code>)         \u2013          <p>Target key.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>str | Expr</code>)         \u2013          <p>Target value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.key","title":"key  <code>instance-attribute</code>","text":"<pre><code>key: str | Expr\n</code></pre> <p>Target key.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Target value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprDictComp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice","title":"ExprExtSlice  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Extended slice like <code>a[x:y, z]</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> dims             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Dims.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.dims","title":"dims  <code>instance-attribute</code>","text":"<pre><code>dims: Sequence[str | Expr]\n</code></pre> <p>Dims.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprExtSlice.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted","title":"ExprFormatted  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Formatted string like <code>{1 + 1}</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>str | Expr</code>)         \u2013          <p>Formatted value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Formatted value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprFormatted.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp","title":"ExprGeneratorExp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Generator expressions like <code>a for b in c for d in e</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> element             (<code>str | Expr</code>)         \u2013          <p>Yielded element.</p> </li> <li> generators             (<code>Sequence[Expr]</code>)         \u2013          <p>Generators iterated on.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element: str | Expr\n</code></pre> <p>Yielded element.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprGeneratorExp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp","title":"ExprIfExp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Conditions like <code>a if b else c</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> body             (<code>str | Expr</code>)         \u2013          <p>Value if test.</p> </li> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> orelse             (<code>str | Expr</code>)         \u2013          <p>Other expression.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> test             (<code>str | Expr</code>)         \u2013          <p>Condition.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: str | Expr\n</code></pre> <p>Value if test.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.orelse","title":"orelse  <code>instance-attribute</code>","text":"<pre><code>orelse: str | Expr\n</code></pre> <p>Other expression.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.test","title":"test  <code>instance-attribute</code>","text":"<pre><code>test: str | Expr\n</code></pre> <p>Condition.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprIfExp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr","title":"ExprJoinedStr  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Joined strings like <code>f\"a {b} c\"</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> values             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Joined values.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: Sequence[str | Expr]\n</code></pre> <p>Joined values.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprJoinedStr.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword","title":"ExprKeyword  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Keyword arguments like <code>a=b</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Name.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>str | Expr</code>)         \u2013          <p>Value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprKeyword.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda","title":"ExprLambda  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Lambda expressions like <code>lambda a: a.b</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> body             (<code>str | Expr</code>)         \u2013          <p>Lambda's body.</p> </li> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> parameters             (<code>Sequence[ExprParameter]</code>)         \u2013          <p>Lambda's parameters.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: str | Expr\n</code></pre> <p>Lambda's body.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters: Sequence[ExprParameter]\n</code></pre> <p>Lambda's parameters.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprLambda.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList","title":"ExprList  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Lists like <code>[0, 1, 2]</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> elements             (<code>Sequence[Expr]</code>)         \u2013          <p>List elements.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.elements","title":"elements  <code>instance-attribute</code>","text":"<pre><code>elements: Sequence[Expr]\n</code></pre> <p>List elements.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprList.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp","title":"ExprListComp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>List comprehensions like <code>[a for b in c]</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> element             (<code>str | Expr</code>)         \u2013          <p>Target value.</p> </li> <li> generators             (<code>Sequence[Expr]</code>)         \u2013          <p>Generators iterated on.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element: str | Expr\n</code></pre> <p>Target value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprListComp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName","title":"ExprName  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>This class represents a Python object identified by a name in a given scope.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The canonical name (resolved one, not alias name).</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Actual name.</p> </li> <li> parent             (<code>str | ExprName | Module | Class | None</code>)         \u2013          <p>Parent (for resolution in its scope).</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The full, resolved name.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The canonical name (resolved one, not alias name).</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Actual name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.parent","title":"parent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parent: str | ExprName | Module | Class | None = None\n</code></pre> <p>Parent (for resolution in its scope).</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The full, resolved name.</p> <p>If it was given when creating the name, return that. If a callable was given, call it and return its result. It the name cannot be resolved, return the source.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprName.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr","title":"ExprNamedExpr  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Named/assignment expressions like <code>a := b</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> target             (<code>Expr</code>)         \u2013          <p>Target name.</p> </li> <li> value             (<code>str | Expr</code>)         \u2013          <p>Value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.target","title":"target  <code>instance-attribute</code>","text":"<pre><code>target: Expr\n</code></pre> <p>Target name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprNamedExpr.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter","title":"ExprParameter  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Parameters in function signatures like <code>a: int = 0</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> <li> iterate           \u2013            <p>Iterate on the expression elements.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>Expr | None</code>)         \u2013          <p>Parameter type.</p> </li> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> default             (<code>Expr | None</code>)         \u2013          <p>Parameter default.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> kind             (<code>str</code>)         \u2013          <p>Parameter kind.</p> </li> <li> name             (<code>str | None</code>)         \u2013          <p>Parameter name.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.annotation","title":"annotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>annotation: Expr | None = None\n</code></pre> <p>Parameter type.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: Expr | None = None\n</code></pre> <p>Parameter default.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: str\n</code></pre> <p>Parameter kind.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre> <p>Parameter name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprParameter.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <ul> <li> flat             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>str | Expr</code>         \u2013          <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet","title":"ExprSet  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Sets like <code>{0, 1, 2}</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> elements             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Set elements.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.elements","title":"elements  <code>instance-attribute</code>","text":"<pre><code>elements: Sequence[str | Expr]\n</code></pre> <p>Set elements.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSet.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp","title":"ExprSetComp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Set comprehensions like <code>{a for b in c}</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> element             (<code>str | Expr</code>)         \u2013          <p>Target value.</p> </li> <li> generators             (<code>Sequence[Expr]</code>)         \u2013          <p>Generators iterated on.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element: str | Expr\n</code></pre> <p>Target value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSetComp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice","title":"ExprSlice  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Slices like <code>[a:b:c]</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> lower             (<code>str | Expr | None</code>)         \u2013          <p>Lower bound.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> step             (<code>str | Expr | None</code>)         \u2013          <p>Iteration step.</p> </li> <li> upper             (<code>str | Expr | None</code>)         \u2013          <p>Upper bound.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.lower","title":"lower  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lower: str | Expr | None = None\n</code></pre> <p>Lower bound.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.step","title":"step  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>step: str | Expr | None = None\n</code></pre> <p>Iteration step.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.upper","title":"upper  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>upper: str | Expr | None = None\n</code></pre> <p>Upper bound.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSlice.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript","title":"ExprSubscript  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Subscripts like <code>a[b]</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>The canonical path of this subscript's left part.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> left             (<code>Expr</code>)         \u2013          <p>Left part.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The path of this subscript's left part.</p> </li> <li> slice             (<code>Expr</code>)         \u2013          <p>Slice part.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The canonical path of this subscript's left part.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: Expr\n</code></pre> <p>Left part.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The path of this subscript's left part.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.slice","title":"slice  <code>instance-attribute</code>","text":"<pre><code>slice: Expr\n</code></pre> <p>Slice part.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprSubscript.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple","title":"ExprTuple  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Tuples like <code>(0, 1, 2)</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> elements             (<code>Sequence[str | Expr]</code>)         \u2013          <p>Tuple elements.</p> </li> <li> implicit             (<code>bool</code>)         \u2013          <p>Whether the tuple is implicit (e.g. without parentheses in a subscript's slice).</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.elements","title":"elements  <code>instance-attribute</code>","text":"<pre><code>elements: Sequence[str | Expr]\n</code></pre> <p>Tuple elements.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.implicit","title":"implicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>implicit: bool = False\n</code></pre> <p>Whether the tuple is implicit (e.g. without parentheses in a subscript's slice).</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprTuple.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp","title":"ExprUnaryOp  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Unary operations like <code>-1</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> operator             (<code>str</code>)         \u2013          <p>Unary operator.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>str | Expr</code>)         \u2013          <p>Value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre> <p>Unary operator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprUnaryOp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword","title":"ExprVarKeyword  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Variadic keyword parameters like <code>**kwargs</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>Expr</code>)         \u2013          <p>Double-starred value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Expr\n</code></pre> <p>Double-starred value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarKeyword.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional","title":"ExprVarPositional  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Variadic positional parameters like <code>*args</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>Expr</code>)         \u2013          <p>Starred value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Expr\n</code></pre> <p>Starred value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprVarPositional.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield","title":"ExprYield  <code>dataclass</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Yield statements like <code>yield a</code>.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return the expression as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> canonical_name             (<code>str</code>)         \u2013          <p>Name of the expressed name/attribute.</p> </li> <li> canonical_path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> classname             (<code>str</code>)         \u2013          <p>The expression class name.</p> </li> <li> is_classvar             (<code>bool</code>)         \u2013          <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> is_generator             (<code>bool</code>)         \u2013          <p>Whether this expression is a generator.</p> </li> <li> is_iterator             (<code>bool</code>)         \u2013          <p>Whether this expression is an iterator.</p> </li> <li> is_tuple             (<code>bool</code>)         \u2013          <p>Whether this expression is a tuple.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Path of the expressed name/attribute.</p> </li> <li> value             (<code>str | Expr | None</code>)         \u2013          <p>Yielded value.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str | Expr | None = None\n</code></pre> <p>Yielded value.</p>"},{"location":"reference/griffe/expressions/#griffe.expressions.ExprYield.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Configuration options (none available yet).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.get_expression","title":"get_expression","text":"<pre><code>get_expression(\n    node: AST | None,\n    parent: Module | Class,\n    *,\n    parse_strings: bool | None = None\n) -&gt; Expr | None\n</code></pre> <p>Build an expression from an AST.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | None</code>)         \u2013          <p>The annotation node.</p> </li> <li> parent             (<code>Module | Class</code>)         \u2013          <p>The parent used to resolve the name.</p> </li> <li> parse_strings             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Whether to try and parse strings as type annotations.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr | None</code>         \u2013          <p>A string or resovable name or expression.</p> </li> </ul>"},{"location":"reference/griffe/expressions/#griffe.expressions.safe_get_expression","title":"safe_get_expression","text":"<pre><code>safe_get_expression(\n    node: AST | None,\n    parent: Module | Class,\n    *,\n    parse_strings: bool | None = None,\n    log_level: LogLevel | None = LogLevel.error,\n    msg_format: str = \"{path}:{lineno}: Failed to get expression from {node_class}: {error}\"\n) -&gt; Expr | None\n</code></pre> <p>Safely (no exception) build a resolvable annotation.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | None</code>)         \u2013          <p>The annotation node.</p> </li> <li> parent             (<code>Module | Class</code>)         \u2013          <p>The parent used to resolve the name.</p> </li> <li> parse_strings             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Whether to try and parse strings as type annotations.</p> </li> <li> log_level             (<code>LogLevel | None</code>, default:                 <code>error</code> )         \u2013          <p>Log level to use to log a message. None to disable logging.</p> </li> <li> msg_format             (<code>str</code>, default:                 <code>'{path}:{lineno}: Failed to get expression from {node_class}: {error}'</code> )         \u2013          <p>A format string for the log message. Available placeholders: path, lineno, node, error.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr | None</code>         \u2013          <p>A string or resovable name or expression.</p> </li> </ul>"},{"location":"reference/griffe/finder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> finder","text":""},{"location":"reference/griffe/finder/#griffe.finder","title":"finder","text":"<p>This module contains the code allowing to find modules.</p> <p>Classes:</p> <ul> <li> ModuleFinder         \u2013          <p>The Griffe finder, allowing to find modules on the file system.</p> </li> <li> NamespacePackage         \u2013          <p>This class is a simple placeholder used during the process of finding packages.</p> </li> <li> Package         \u2013          <p>This class is a simple placeholder used during the process of finding packages.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder","title":"ModuleFinder","text":"<pre><code>ModuleFinder(\n    search_paths: Sequence[str | Path] | None = None,\n)\n</code></pre> <p>The Griffe finder, allowing to find modules on the file system.</p> <p>Parameters:</p> <ul> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>Optional paths to search into.</p> </li> </ul> <p>Methods:</p> <ul> <li> find_package           \u2013            <p>Find a package or namespace package.</p> </li> <li> find_spec           \u2013            <p>Find the top module of a module.</p> </li> <li> iter_submodules           \u2013            <p>Iterate on a module's submodules, if any.</p> </li> <li> submodules           \u2013            <p>Return the list of a module's submodules.</p> </li> </ul> <p>Attributes:</p> <ul> <li> accepted_py_module_extensions             (<code>list[str]</code>)         \u2013          <p>List of extensions supported by the finder.</p> </li> <li> extensions_set             (<code>set[str]</code>)         \u2013          <p>Set of extensions supported by the finder.</p> </li> <li> search_paths         \u2013          <p>The finder search paths.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder.accepted_py_module_extensions","title":"accepted_py_module_extensions  <code>class-attribute</code>","text":"<pre><code>accepted_py_module_extensions: list[str] = [\n    \".py\",\n    \".pyc\",\n    \".pyo\",\n    \".pyd\",\n    \".pyi\",\n    \".so\",\n]\n</code></pre> <p>List of extensions supported by the finder.</p>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder.extensions_set","title":"extensions_set  <code>class-attribute</code>","text":"<pre><code>extensions_set: set[str] = set(\n    accepted_py_module_extensions\n)\n</code></pre> <p>Set of extensions supported by the finder.</p>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder.search_paths","title":"search_paths  <code>instance-attribute</code>","text":"<pre><code>search_paths = [\n    path if isinstance(path, Path) else Path(path)\n    for path in search_paths or path\n]\n</code></pre> <p>The finder search paths.</p>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder.find_package","title":"find_package","text":"<pre><code>find_package(\n    module_name: str,\n) -&gt; Package | NamespacePackage\n</code></pre> <p>Find a package or namespace package.</p> <p>Parameters:</p> <ul> <li> module_name             (<code>str</code>)         \u2013          <p>The module name.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>           \u2013          <p>When the module cannot be found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Package | NamespacePackage</code>         \u2013          <p>A package or namespace package wrapper.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder.find_spec","title":"find_spec","text":"<pre><code>find_spec(\n    module: str | Path, *, try_relative_path: bool = True\n) -&gt; tuple[str, Package | NamespacePackage]\n</code></pre> <p>Find the top module of a module.</p> <p>If a Path is passed, only try to find the module as a file path. If a string is passed, first try to find the module as a file path, then look into the search paths.</p> <p>Parameters:</p> <ul> <li> module             (<code>str | Path</code>)         \u2013          <p>The module name or path.</p> </li> <li> try_relative_path             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to try finding the module as a relative path, when the given module is not already a path.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>When a Path was passed and the module could not be found:</p> <ul> <li>the directory has no <code>__init__.py</code> file in it</li> <li>the path does not exist</li> </ul> </li> <li> <code>ModuleNotFoundError</code>           \u2013          <p>When a string was passed and the module could not be found:</p> <ul> <li>no <code>module/__init__.py</code></li> <li>no <code>module.py</code></li> <li>no <code>module.pth</code></li> <li>no <code>module</code> directory (namespace packages)</li> <li>or unsupported .pth file</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, Package | NamespacePackage]</code>         \u2013          <p>The name of the module, and an instance representing its (namespace) package.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder.iter_submodules","title":"iter_submodules","text":"<pre><code>iter_submodules(\n    path: Path | list[Path], seen: set | None = None\n) -&gt; Iterator[NamePartsAndPathType]\n</code></pre> <p>Iterate on a module's submodules, if any.</p> <p>Parameters:</p> <ul> <li> path             (<code>Path | list[Path]</code>)         \u2013          <p>The module path.</p> </li> <li> seen             (<code>set | None</code>, default:                 <code>None</code> )         \u2013          <p>If not none, this set is used to skip some files. The goal is to replicate the behavior of Python by only using the first packages (with <code>__init__</code> modules) of the same name found in different namespace packages. As soon as we find an <code>__init__</code> module, we add its parent path to the <code>seen</code> set, which will be reused when scanning the next namespace packages.</p> </li> </ul> <p>Yields:</p> <ul> <li> name_parts (            <code>tuple[str, ...]</code> )        \u2013          <p>The parts of a submodule name.</p> </li> <li> filepath (            <code>Path</code> )        \u2013          <p>A submodule filepath.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.ModuleFinder.submodules","title":"submodules","text":"<pre><code>submodules(module: Module) -&gt; list[NamePartsAndPathType]\n</code></pre> <p>Return the list of a module's submodules.</p> <p>Parameters:</p> <ul> <li> module             (<code>Module</code>)         \u2013          <p>The parent module.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[NamePartsAndPathType]</code>         \u2013          <p>A list of tuples containing the parts of the submodule name and its path.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.NamespacePackage","title":"NamespacePackage","text":"<pre><code>NamespacePackage(name: str, path: list[Path])\n</code></pre> <p>This class is a simple placeholder used during the process of finding packages.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The package name.</p> </li> <li> path             (<code>list[Path]</code>)         \u2013          <p>The package paths.</p> </li> </ul> <p>Methods:</p> <ul> </ul> <p>Attributes:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>Namespace package name.</p> </li> <li> path             (<code>list[Path]</code>)         \u2013          <p>Namespace package folder paths.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.NamespacePackage.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>Namespace package name.</p>"},{"location":"reference/griffe/finder/#griffe.finder.NamespacePackage.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: list[Path] = path\n</code></pre> <p>Namespace package folder paths.</p>"},{"location":"reference/griffe/finder/#griffe.finder.Package","title":"Package","text":"<pre><code>Package(name: str, path: Path, stubs: Path | None = None)\n</code></pre> <p>This class is a simple placeholder used during the process of finding packages.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The package name.</p> </li> <li> path             (<code>Path</code>)         \u2013          <p>The package path(s).</p> </li> <li> stubs             (<code>Path | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional path to the related stubs file (.pyi).</p> </li> </ul> <p>Methods:</p> <ul> </ul> <p>Attributes:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>Package name.</p> </li> <li> path             (<code>Path</code>)         \u2013          <p>Package folder path.</p> </li> <li> stubs             (<code>Path | None</code>)         \u2013          <p>Package stubs file.</p> </li> </ul>"},{"location":"reference/griffe/finder/#griffe.finder.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>Package name.</p>"},{"location":"reference/griffe/finder/#griffe.finder.Package.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: Path = path\n</code></pre> <p>Package folder path.</p>"},{"location":"reference/griffe/finder/#griffe.finder.Package.stubs","title":"stubs  <code>instance-attribute</code>","text":"<pre><code>stubs: Path | None = stubs\n</code></pre> <p>Package stubs file.</p>"},{"location":"reference/griffe/git/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> git","text":""},{"location":"reference/griffe/git/#griffe.git","title":"git","text":"<p>This module contains the code allowing to load modules from specific git commits.</p> <pre><code>from griffe.git import load_git\n\n# where `repo` is the folder *containing* `.git`\nold_api = load_git(\"my_module\", commit=\"v0.1.0\", repo=\"path/to/repo\")\n</code></pre> <p>Functions:</p> <ul> <li> load_git           \u2013            <p>Load and return a module from a specific Git reference.</p> </li> </ul>"},{"location":"reference/griffe/git/#griffe.git.load_git","title":"load_git","text":"<pre><code>load_git(\n    module: str | Path,\n    *,\n    ref: str = \"HEAD\",\n    repo: str | Path = \".\",\n    submodules: bool = True,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True\n) -&gt; Module\n</code></pre> <p>Load and return a module from a specific Git reference.</p> <p>This function will create a temporary git worktree at the requested reference before loading <code>module</code> with <code>griffe.load</code>.</p> <p>This function requires that the <code>git</code> executable is installed.</p> <p>Parameters:</p> <ul> <li> module             (<code>str | Path</code>)         \u2013          <p>The module path, relative to the repository root.</p> </li> <li> ref             (<code>str</code>, default:                 <code>'HEAD'</code> )         \u2013          <p>A Git reference such as a commit, tag or branch.</p> </li> <li> repo             (<code>str | Path</code>, default:                 <code>'.'</code> )         \u2013          <p>Path to the repository (i.e. the directory containing the <code>.git</code> directory)</p> </li> <li> submodules             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to recurse on the submodules.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use.</p> </li> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to search into (relative to the repository root).</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> <li> allow_inspection             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>A loaded module.</p> </li> </ul>"},{"location":"reference/griffe/importer/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> importer","text":""},{"location":"reference/griffe/importer/#griffe.importer","title":"importer","text":"<p>This module contains utilities to dynamically import objects.</p> <p>Functions:</p> <ul> <li> dynamic_import           \u2013            <p>Dynamically import the specified object.</p> </li> <li> sys_path           \u2013            <p>Redefine <code>sys.path</code> temporarily.</p> </li> </ul>"},{"location":"reference/griffe/importer/#griffe.importer.dynamic_import","title":"dynamic_import","text":"<pre><code>dynamic_import(\n    import_path: str,\n    import_paths: Sequence[str | Path] | None = None,\n) -&gt; Any\n</code></pre> <p>Dynamically import the specified object.</p> <p>It can be a module, class, method, function, attribute, nested arbitrarily.</p> <p>Parameters:</p> <ul> <li> import_path             (<code>str</code>)         \u2013          <p>The path of the object to import.</p> </li> <li> import_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to import the object from.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>           \u2013          <p>When the object's module could not be found.</p> </li> <li> <code>ImportError</code>           \u2013          <p>When there was an import error or when couldn't get the attribute.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The imported object.</p> </li> </ul>"},{"location":"reference/griffe/importer/#griffe.importer.sys_path","title":"sys_path","text":"<pre><code>sys_path(*paths: str | Path) -&gt; Iterator[None]\n</code></pre> <p>Redefine <code>sys.path</code> temporarily.</p> <p>Parameters:</p> <ul> <li> *paths             (<code>str | Path</code>, default:                 <code>()</code> )         \u2013          <p>The paths to use when importing modules. If no paths are given, keep <code>sys.path</code> untouched.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Iterator[None]</code>         \u2013          <p>Nothing.</p> </li> </ul>"},{"location":"reference/griffe/loader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> loader","text":""},{"location":"reference/griffe/loader/#griffe.loader","title":"loader","text":"<p>This module contains the code allowing to load modules data.</p> <p>This is the entrypoint to use griffe programatically:</p> <pre><code>from griffe.loader import GriffeLoader\n\ngriffe = GriffeLoader()\nfastapi = griffe.load_module(\"fastapi\")\n</code></pre> <p>Classes:</p> <ul> <li> GriffeLoader         \u2013          <p>The Griffe loader, allowing to load data from modules.</p> </li> </ul> <p>Functions:</p> <ul> <li> load           \u2013            <p>Load and return a module.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader","title":"GriffeLoader","text":"<pre><code>GriffeLoader(\n    *,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True,\n    store_source: bool = True\n)\n</code></pre> <p>The Griffe loader, allowing to load data from modules.</p> <p>Parameters:</p> <ul> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use.</p> </li> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to search into.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> <li> allow_inspection             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> </ul> <p>Methods:</p> <ul> <li> expand_exports           \u2013            <p>Expand exports: try to recursively expand all module exports (<code>__all__</code> values).</p> </li> <li> expand_wildcards           \u2013            <p>Expand wildcards: try to recursively expand all found wildcards.</p> </li> <li> load_module           \u2013            <p>Load a module.</p> </li> <li> resolve_aliases           \u2013            <p>Resolve aliases.</p> </li> <li> resolve_module_aliases           \u2013            <p>Follow aliases: try to recursively resolve all found aliases.</p> </li> <li> stats           \u2013            <p>Compute some statistics.</p> </li> </ul> <p>Attributes:</p> <ul> <li> allow_inspection             (<code>bool</code>)         \u2013          <p>Whether to allow inspecting (importing) modules for which we can't find sources.</p> </li> <li> docstring_options             (<code>dict[str, Any]</code>)         \u2013          <p>Configured parsing options.</p> </li> <li> docstring_parser             (<code>Parser | None</code>)         \u2013          <p>Selected docstring parser.</p> </li> <li> extensions             (<code>Extensions</code>)         \u2013          <p>Loaded Griffe extensions.</p> </li> <li> finder             (<code>ModuleFinder</code>)         \u2013          <p>The module source finder.</p> </li> <li> lines_collection             (<code>LinesCollection</code>)         \u2013          <p>Collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection</code>)         \u2013          <p>Collection of modules.</p> </li> <li> store_source             (<code>bool</code>)         \u2013          <p>Whether to store source code in the lines collection.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.allow_inspection","title":"allow_inspection  <code>instance-attribute</code>","text":"<pre><code>allow_inspection: bool = allow_inspection\n</code></pre> <p>Whether to allow inspecting (importing) modules for which we can't find sources.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.docstring_options","title":"docstring_options  <code>instance-attribute</code>","text":"<pre><code>docstring_options: dict[str, Any] = docstring_options or {}\n</code></pre> <p>Configured parsing options.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.docstring_parser","title":"docstring_parser  <code>instance-attribute</code>","text":"<pre><code>docstring_parser: Parser | None = docstring_parser\n</code></pre> <p>Selected docstring parser.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.extensions","title":"extensions  <code>instance-attribute</code>","text":"<pre><code>extensions: Extensions = extensions or Extensions()\n</code></pre> <p>Loaded Griffe extensions.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.finder","title":"finder  <code>instance-attribute</code>","text":"<pre><code>finder: ModuleFinder = ModuleFinder(search_paths)\n</code></pre> <p>The module source finder.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.lines_collection","title":"lines_collection  <code>instance-attribute</code>","text":"<pre><code>lines_collection: LinesCollection = (\n    lines_collection or LinesCollection()\n)\n</code></pre> <p>Collection of source code lines.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.modules_collection","title":"modules_collection  <code>instance-attribute</code>","text":"<pre><code>modules_collection: ModulesCollection = (\n    modules_collection or ModulesCollection()\n)\n</code></pre> <p>Collection of modules.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.store_source","title":"store_source  <code>instance-attribute</code>","text":"<pre><code>store_source: bool = store_source\n</code></pre> <p>Whether to store source code in the lines collection.</p>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.expand_exports","title":"expand_exports","text":"<pre><code>expand_exports(\n    module: Module, seen: set | None = None\n) -&gt; None\n</code></pre> <p>Expand exports: try to recursively expand all module exports (<code>__all__</code> values).</p> <p>Parameters:</p> <ul> <li> module             (<code>Module</code>)         \u2013          <p>The module to recurse on.</p> </li> <li> seen             (<code>set | None</code>, default:                 <code>None</code> )         \u2013          <p>Used to avoid infinite recursion.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.expand_wildcards","title":"expand_wildcards","text":"<pre><code>expand_wildcards(\n    obj: Object,\n    *,\n    external: bool = False,\n    seen: set | None = None\n) -&gt; None\n</code></pre> <p>Expand wildcards: try to recursively expand all found wildcards.</p> <p>Parameters:</p> <ul> <li> obj             (<code>Object</code>)         \u2013          <p>The object and its members to recurse on.</p> </li> <li> external             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>When true, try to load unspecified modules to expand wildcards.</p> </li> <li> seen             (<code>set | None</code>, default:                 <code>None</code> )         \u2013          <p>Used to avoid infinite recursion.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.load_module","title":"load_module","text":"<pre><code>load_module(\n    module: str | Path,\n    *,\n    submodules: bool = True,\n    try_relative_path: bool = True\n) -&gt; Module\n</code></pre> <p>Load a module.</p> <p>Parameters:</p> <ul> <li> module             (<code>str | Path</code>)         \u2013          <p>The module name or path.</p> </li> <li> submodules             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to recurse on the submodules.</p> </li> <li> try_relative_path             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to try finding the module as a relative path.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>LoadingError</code>           \u2013          <p>When loading a module failed for various reasons.</p> </li> <li> <code>ModuleNotFoundError</code>           \u2013          <p>When a module was not found and inspection is disallowed.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>A module.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.resolve_aliases","title":"resolve_aliases","text":"<pre><code>resolve_aliases(\n    *,\n    implicit: bool = False,\n    external: bool = False,\n    max_iterations: int | None = None\n) -&gt; tuple[set[str], int]\n</code></pre> <p>Resolve aliases.</p> <p>Parameters:</p> <ul> <li> implicit             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>When false, only try to resolve an alias if it is explicitely exported.</p> </li> <li> external             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>When false, don't try to load unspecified modules to resolve aliases.</p> </li> <li> max_iterations             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Maximum number of iterations on the loader modules collection.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[set[str], int]</code>         \u2013          <p>The unresolved aliases and the number of iterations done.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.resolve_module_aliases","title":"resolve_module_aliases","text":"<pre><code>resolve_module_aliases(\n    obj: Object | Alias,\n    *,\n    implicit: bool = False,\n    external: bool = False,\n    seen: set[str] | None = None,\n    load_failures: set[str] | None = None\n) -&gt; tuple[set[str], set[str]]\n</code></pre> <p>Follow aliases: try to recursively resolve all found aliases.</p> <p>Parameters:</p> <ul> <li> obj             (<code>Object | Alias</code>)         \u2013          <p>The object and its members to recurse on.</p> </li> <li> implicit             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>When false, only try to resolve an alias if it is explicitely exported.</p> </li> <li> external             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>When false, don't try to load unspecified modules to resolve aliases.</p> </li> <li> seen             (<code>set[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Used to avoid infinite recursion.</p> </li> <li> load_failures             (<code>set[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Set of external packages we failed to load (to prevent retries).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[set[str], set[str]]</code>         \u2013          <p>Both sets of resolved and unresolved aliases.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.GriffeLoader.stats","title":"stats","text":"<pre><code>stats() -&gt; dict\n</code></pre> <p>Compute some statistics.</p> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>Some statistics.</p> </li> </ul>"},{"location":"reference/griffe/loader/#griffe.loader.load","title":"load","text":"<pre><code>load(\n    module: str | Path,\n    *,\n    submodules: bool = True,\n    try_relative_path: bool = True,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True\n) -&gt; Module\n</code></pre> <p>Load and return a module.</p> <p>Example: <pre><code>import griffe\n\nmodule = griffe.load(...)\n</code></pre></p> <p>This is a shortcut for:</p> <pre><code>from griffe.loader import GriffeLoader\n\nloader = GriffeLoader(...)\nmodule = loader.load_module(...)\n</code></pre> <p>See the documentation for the loader: <code>GriffeLoader</code>.</p> <p>Parameters:</p> <ul> <li> module             (<code>str | Path</code>)         \u2013          <p>The module name or path.</p> </li> <li> submodules             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to recurse on the submodules.</p> </li> <li> try_relative_path             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to try finding the module as a relative path.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use.</p> </li> <li> search_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>The paths to search into.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> <li> allow_inspection             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>A loaded module.</p> </li> </ul>"},{"location":"reference/griffe/logger/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> logger","text":""},{"location":"reference/griffe/logger/#griffe.logger","title":"logger","text":"<p>This module contains logging utilities.</p> <p>We provide the <code>patch_loggers</code> function so dependant libraries can patch loggers as they see fit.</p> <p>For example, to fit in the MkDocs logging configuration and prefix each log message with the module name:</p> <pre><code>import logging\nfrom griffe.logger import patch_loggers\n\n\nclass LoggerAdapter(logging.LoggerAdapter):\n    def __init__(self, prefix, logger):\n        super().__init__(logger, {})\n        self.prefix = prefix\n\n    def process(self, msg, kwargs):\n        return f\"{self.prefix}: {msg}\", kwargs\n\n\ndef get_logger(name):\n    logger = logging.getLogger(f\"mkdocs.plugins.{name}\")\n    return LoggerAdapter(name, logger)\n\n\npatch_loggers(get_logger)\n</code></pre> <p>Classes:</p> <ul> <li> LogLevel         \u2013          <p>Enumeration of available log levels.</p> </li> </ul> <p>Functions:</p> <ul> <li> get_logger           \u2013            <p>Create and return a new logger instance.</p> </li> <li> patch_loggers           \u2013            <p>Patch loggers.</p> </li> </ul>"},{"location":"reference/griffe/logger/#griffe.logger.LogLevel","title":"LogLevel","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of available log levels.</p>"},{"location":"reference/griffe/logger/#griffe.logger.get_logger","title":"get_logger","text":"<pre><code>get_logger(name: str) -&gt; _Logger\n</code></pre> <p>Create and return a new logger instance.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The logger name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_Logger</code>         \u2013          <p>The logger.</p> </li> </ul>"},{"location":"reference/griffe/logger/#griffe.logger.patch_loggers","title":"patch_loggers","text":"<pre><code>patch_loggers(\n    get_logger_func: Callable[[str], Any]\n) -&gt; None\n</code></pre> <p>Patch loggers.</p> <p>Parameters:</p> <ul> <li> get_logger_func             (<code>Callable[[str], Any]</code>)         \u2013          <p>A function accepting a name as parameter and returning a logger.</p> </li> </ul>"},{"location":"reference/griffe/merger/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> merger","text":""},{"location":"reference/griffe/merger/#griffe.merger","title":"merger","text":"<p>This module contains utilities to merge data together.</p> <p>Functions:</p> <ul> <li> merge_stubs           \u2013            <p>Merge stubs into a module.</p> </li> </ul>"},{"location":"reference/griffe/merger/#griffe.merger.merge_stubs","title":"merge_stubs","text":"<pre><code>merge_stubs(mod1: Module, mod2: Module) -&gt; Module\n</code></pre> <p>Merge stubs into a module.</p> <p>Parameters:</p> <ul> <li> mod1             (<code>Module</code>)         \u2013          <p>A regular module or stubs module.</p> </li> <li> mod2             (<code>Module</code>)         \u2013          <p>A regular module or stubs module.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When both modules are regular modules (no stubs is passed).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>The regular module.</p> </li> </ul>"},{"location":"reference/griffe/mixins/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> mixins","text":""},{"location":"reference/griffe/mixins/#griffe.mixins","title":"mixins","text":"<p>This module contains some mixins classes about accessing and setting members.</p> <p>Classes:</p> <ul> <li> DelMembersMixin         \u2013          <p>Mixin class to share methods for deleting members.</p> </li> <li> GetMembersMixin         \u2013          <p>Mixin class to share methods for accessing members.</p> </li> <li> ObjectAliasMixin         \u2013          <p>A mixin for methods that appear both in objects and aliases, unchanged.</p> </li> <li> SerializationMixin         \u2013          <p>A mixin that adds de/serialization conveniences.</p> </li> <li> SetMembersMixin         \u2013          <p>Mixin class to share methods for setting members.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.DelMembersMixin","title":"DelMembersMixin","text":"<p>Mixin class to share methods for deleting members.</p> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.DelMembersMixin.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/mixins/#griffe.mixins.DelMembersMixin.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/mixins/#griffe.mixins.GetMembersMixin","title":"GetMembersMixin","text":"<p>Mixin class to share methods for accessing members.</p> <p>Methods:</p> <ul> <li> __getitem__           \u2013            <p>Get a member with its name or path.</p> </li> <li> get_member           \u2013            <p>Get a member with its name or path.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.GetMembersMixin.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/mixins/#griffe.mixins.GetMembersMixin.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin","title":"ObjectAliasMixin","text":"<p>A mixin for methods that appear both in objects and aliases, unchanged.</p> <p>Methods:</p> <ul> <li> is_exported           \u2013            <p>Tell if this object/alias is implicitely exported by its parent.</p> </li> <li> is_public           \u2013            <p>Whether this object is considered public.</p> </li> </ul> <p>Attributes:</p> <ul> <li> all_members             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>All members (declared and inherited).</p> </li> <li> attributes             (<code>dict[str, Attribute]</code>)         \u2013          <p>The attribute members.</p> </li> <li> classes             (<code>dict[str, Class]</code>)         \u2013          <p>The class members.</p> </li> <li> functions             (<code>dict[str, Function]</code>)         \u2013          <p>The function members.</p> </li> <li> is_explicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is explicitely exported by its parent.</p> </li> <li> is_implicitely_exported             (<code>bool</code>)         \u2013          <p>Whether this object/alias is implicitely exported by its parent.</p> </li> <li> modules             (<code>dict[str, Module]</code>)         \u2013          <p>The module members.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.is_explicitely_exported","title":"is_explicitely_exported  <code>property</code>","text":"<pre><code>is_explicitely_exported: bool\n</code></pre> <p>Whether this object/alias is explicitely exported by its parent.</p>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.is_implicitely_exported","title":"is_implicitely_exported  <code>property</code>","text":"<pre><code>is_implicitely_exported: bool\n</code></pre> <p>Whether this object/alias is implicitely exported by its parent.</p>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.is_exported","title":"is_exported","text":"<pre><code>is_exported(*, explicitely: bool = True) -&gt; bool\n</code></pre> <p>Tell if this object/alias is implicitely exported by its parent.</p> <p>Parameters:</p> <ul> <li> explicitely             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to only return True when <code>__all__</code> is defined.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.ObjectAliasMixin.is_public","title":"is_public","text":"<pre><code>is_public(\n    *, strict: bool = False, check_name: bool = True\n) -&gt; bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>In strict mode, the object is public only if it is explicitely exported (listed in <code>__all__</code>).     Strict mode should only be used for module members.</li> <li>Otherwise, if name checks are enabled, the object is private if its name starts with an underscore.</li> <li>Otherwise, if the object is an alias, and is neither inherited from a base class,     nor a member of a parent alias, it is not public.</li> <li>Otherwise, the object is public.</li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.SerializationMixin","title":"SerializationMixin","text":"<p>A mixin that adds de/serialization conveniences.</p> <p>Methods:</p> <ul> <li> as_json           \u2013            <p>Return this object's data as a JSON string.</p> </li> <li> from_json           \u2013            <p>Create an instance of this class from a JSON string.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.SerializationMixin.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <ul> <li> full             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return full info, or just base info.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options passed to encoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A JSON string.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.SerializationMixin.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_string             (<code>str</code>)         \u2013          <p>JSON to decode into Object.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional options passed to decoder.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_ObjType</code>         \u2013          <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.SetMembersMixin","title":"SetMembersMixin","text":"<p>             Bases: <code>DelMembersMixin</code></p> <p>Mixin class to share methods for setting members.</p> <p>Methods:</p> <ul> <li> __delitem__           \u2013            <p>Delete a member with its name or path.</p> </li> <li> __setitem__           \u2013            <p>Set a member with its name or path.</p> </li> <li> del_member           \u2013            <p>Delete a member with its name or path.</p> </li> <li> set_member           \u2013            <p>Set a member with its name or path.</p> </li> </ul>"},{"location":"reference/griffe/mixins/#griffe.mixins.SetMembersMixin.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/griffe/mixins/#griffe.mixins.SetMembersMixin.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/griffe/mixins/#griffe.mixins.SetMembersMixin.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/griffe/mixins/#griffe.mixins.SetMembersMixin.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <ul> <li> key             (<code>str | Sequence[str]</code>)         \u2013          <p>The name or path of the member.</p> </li> <li> value             (<code>Object | Alias</code>)         \u2013          <p>The member.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\", qux)\n</code></pre>"},{"location":"reference/griffe/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/griffe/stats/#griffe.stats","title":"stats","text":"<p>This module contains utilities to compute loading statistics.</p> <p>Functions:</p> <ul> <li> stats           \u2013            <p>Return some loading statistics.</p> </li> </ul>"},{"location":"reference/griffe/stats/#griffe.stats.stats","title":"stats","text":"<pre><code>stats(loader: GriffeLoader) -&gt; dict\n</code></pre> <p>Return some loading statistics.</p> <p>Parameters:</p> <ul> <li> loader             (<code>GriffeLoader</code>)         \u2013          <p>The loader to compute stats from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>Some statistics.</p> </li> </ul>"},{"location":"reference/griffe/tests/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> tests","text":""},{"location":"reference/griffe/tests/#griffe.tests","title":"tests","text":"<p>Test helpers and pytest fixtures.</p> <p>Classes:</p> <ul> <li> TmpPackage         \u2013          <p>A temporary package.</p> </li> </ul> <p>Functions:</p> <ul> <li> htree           \u2013            <p>Link objects together, horizontally.</p> </li> <li> module_vtree           \u2013            <p>Link objects together, vertically.</p> </li> <li> temporary_inspected_module           \u2013            <p>Create and inspect a temporary module with the given code.</p> </li> <li> temporary_pyfile           \u2013            <p>Create a Python file containing the given code in a temporary directory.</p> </li> <li> temporary_pypackage           \u2013            <p>Create a package containing the given modules in a temporary directory.</p> </li> <li> temporary_visited_module           \u2013            <p>Create and visit a temporary module with the given code.</p> </li> <li> temporary_visited_package           \u2013            <p>Create and visit a temporary package.</p> </li> <li> vtree           \u2013            <p>Link objects together, vertically.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.TmpPackage","title":"TmpPackage  <code>dataclass</code>","text":"<p>A temporary package.</p> <p>Attributes:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The package name, as to dynamically import it.</p> </li> <li> path             (<code>Path</code>)         \u2013          <p>The package path.</p> </li> <li> tmpdir             (<code>Path</code>)         \u2013          <p>The temporary directory containing the package.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.TmpPackage.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The package name, as to dynamically import it.</p>"},{"location":"reference/griffe/tests/#griffe.tests.TmpPackage.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: Path\n</code></pre> <p>The package path.</p>"},{"location":"reference/griffe/tests/#griffe.tests.TmpPackage.tmpdir","title":"tmpdir  <code>instance-attribute</code>","text":"<pre><code>tmpdir: Path\n</code></pre> <p>The temporary directory containing the package.</p>"},{"location":"reference/griffe/tests/#griffe.tests.htree","title":"htree","text":"<pre><code>htree(*objects: Object) -&gt; Object\n</code></pre> <p>Link objects together, horizontally.</p> <p>Parameters:</p> <ul> <li> *objects             (<code>Object</code>, default:                 <code>()</code> )         \u2013          <p>A sequence of objects. All objects starting at the second become members of the first.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no objects are provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Object</code>         \u2013          <p>The first given object, with all the other objects as members of it.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.module_vtree","title":"module_vtree","text":"<pre><code>module_vtree(\n    path: str,\n    *,\n    leaf_package: bool = True,\n    return_leaf: bool = False\n) -&gt; Module\n</code></pre> <p>Link objects together, vertically.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The complete module path, like <code>\"a.b.c.d\"</code>.</p> </li> <li> leaf_package             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether the deepest module should also be a package.</p> </li> <li> return_leaf             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return the leaf instead of the root.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no objects are provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>The top or leaf module.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.temporary_inspected_module","title":"temporary_inspected_module","text":"<pre><code>temporary_inspected_module(\n    code: str,\n    *,\n    module_name: str = \"module\",\n    import_paths: list[Path] | None = None,\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None\n) -&gt; Iterator[Module]\n</code></pre> <p>Create and inspect a temporary module with the given code.</p> <p>Parameters:</p> <ul> <li> code             (<code>str</code>)         \u2013          <p>The code of the module.</p> </li> <li> module_name             (<code>str</code>, default:                 <code>'module'</code> )         \u2013          <p>The name of the temporary module.</p> </li> <li> import_paths             (<code>list[Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>Paths to import the module from.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use when visiting the AST.</p> </li> <li> parent             (<code>Module | None</code>, default:                 <code>None</code> )         \u2013          <p>The optional parent of this module.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Module</code>         \u2013          <p>The inspected module.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.temporary_pyfile","title":"temporary_pyfile","text":"<pre><code>temporary_pyfile(\n    code: str, *, module_name: str = \"module\"\n) -&gt; Iterator[tuple[str, Path]]\n</code></pre> <p>Create a Python file containing the given code in a temporary directory.</p> <p>Parameters:</p> <ul> <li> code             (<code>str</code>)         \u2013          <p>The code to write to the temporary file.</p> </li> <li> module_name             (<code>str</code>, default:                 <code>'module'</code> )         \u2013          <p>The name of the temporary module.</p> </li> </ul> <p>Yields:</p> <ul> <li> module_name (            <code>str</code> )        \u2013          <p>The module name, as to dynamically import it.</p> </li> <li> module_path (            <code>Path</code> )        \u2013          <p>The module path.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.temporary_pypackage","title":"temporary_pypackage","text":"<pre><code>temporary_pypackage(\n    package: str,\n    modules: Sequence[str]\n    | Mapping[str, str]\n    | None = None,\n    *,\n    init: bool = True\n) -&gt; Iterator[TmpPackage]\n</code></pre> <p>Create a package containing the given modules in a temporary directory.</p> <p>Parameters:</p> <ul> <li> package             (<code>str</code>)         \u2013          <p>The package name. Example: <code>\"a\"</code> gives a package named <code>a</code>, while <code>\"a/b\"</code> gives a namespace package named <code>a</code> with a package inside named <code>b</code>. If <code>init</code> is false, then <code>b</code> is also a namespace package.</p> </li> <li> modules             (<code>Sequence[str] | Mapping[str, str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional modules to create in the package. If a list, simply touch the files: <code>[\"b.py\", \"c/d.py\", \"e/f\"]</code>. If a dict, keys are the file names and values their contents: <code>{\"b.py\": \"b = 1\", \"c/d.py\": \"print('hey from c')\"}</code>.</p> </li> <li> init             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to create an <code>__init__</code> module in the leaf package.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>TmpPackage</code>         \u2013          <p>A temporary package.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.temporary_visited_module","title":"temporary_visited_module","text":"<pre><code>temporary_visited_module(\n    code: str,\n    *,\n    module_name: str = \"module\",\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None\n) -&gt; Iterator[Module]\n</code></pre> <p>Create and visit a temporary module with the given code.</p> <p>Parameters:</p> <ul> <li> code             (<code>str</code>)         \u2013          <p>The code of the module.</p> </li> <li> module_name             (<code>str</code>, default:                 <code>'module'</code> )         \u2013          <p>The name of the temporary module.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use when visiting the AST.</p> </li> <li> parent             (<code>Module | None</code>, default:                 <code>None</code> )         \u2013          <p>The optional parent of this module.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Module</code>         \u2013          <p>The visited module.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.temporary_visited_package","title":"temporary_visited_package","text":"<pre><code>temporary_visited_package(\n    package: str,\n    modules: Sequence[str]\n    | Mapping[str, str]\n    | None = None,\n    *,\n    init: bool = True\n) -&gt; Iterator[Module]\n</code></pre> <p>Create and visit a temporary package.</p> <p>Parameters:</p> <ul> <li> package             (<code>str</code>)         \u2013          <p>The package name. Example: <code>\"a\"</code> gives a package named <code>a</code>, while <code>\"a/b\"</code> gives a namespace package named <code>a</code> with a package inside named <code>b</code>. If <code>init</code> is false, then <code>b</code> is also a namespace package.</p> </li> <li> modules             (<code>Sequence[str] | Mapping[str, str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional modules to create in the package. If a list, simply touch the files: <code>[\"b.py\", \"c/d.py\", \"e/f\"]</code>. If a dict, keys are the file names and values their contents: <code>{\"b.py\": \"b = 1\", \"c/d.py\": \"print('hey from c')\"}</code>.</p> </li> <li> init             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to create an <code>__init__</code> module in the leaf package.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Module</code>         \u2013          <p>A module.</p> </li> </ul>"},{"location":"reference/griffe/tests/#griffe.tests.vtree","title":"vtree","text":"<pre><code>vtree(\n    *objects: Object, return_leaf: bool = False\n) -&gt; Object\n</code></pre> <p>Link objects together, vertically.</p> <p>Parameters:</p> <ul> <li> *objects             (<code>Object</code>, default:                 <code>()</code> )         \u2013          <p>A sequence of objects. The first one is at the top of the tree.</p> </li> <li> return_leaf             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return the leaf instead of the root.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When no objects are provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Object</code>         \u2013          <p>The top or leaf object.</p> </li> </ul>"},{"location":"reference/griffe/agents/","title":"Index","text":""},{"location":"reference/griffe/agents/#griffe.agents","title":"agents","text":"<p>These modules contain the different agents that are able to extract data.</p> <p>Modules:</p> <ul> <li> inspector         \u2013          <p>This module defines introspection mechanisms.</p> </li> <li> nodes         \u2013          <p>This module contains utilities for extracting information from nodes.</p> </li> <li> visitor         \u2013          <p>Code parsing and data extraction utilies.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> inspector","text":""},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector","title":"inspector","text":"<p>This module defines introspection mechanisms.</p> <p>Sometimes we cannot get the source code of a module or an object, typically built-in modules like <code>itertools</code>. The only way to know what they are made of is to actually import them and inspect their contents.</p> <p>Sometimes, even if the source code is available, loading the object is desired because it was created or modified dynamically, and our node visitor is not powerful enough to infer all these dynamic modifications. In this case, we always try to visit the code first, and only then we load the object to update the data with introspection.</p> <p>This module exposes a public function, <code>inspect()</code>, which inspects the module using <code>inspect.getmembers()</code>, and returns a new <code>Module</code> instance, populating its members recursively, by using a <code>NodeVisitor</code>-like class.</p> <p>The inspection agent works similarly to the regular \"node visitor\" agent, in that it maintains a state with the current object being handled, and recursively handle its members.</p> <p>Classes:</p> <ul> <li> Inspector         \u2013          <p>This class is used to instantiate an inspector.</p> </li> </ul> <p>Functions:</p> <ul> <li> inspect           \u2013            <p>Inspect a module.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector","title":"Inspector","text":"<pre><code>Inspector(\n    module_name: str,\n    filepath: Path | None,\n    extensions: Extensions,\n    parent: Module | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n)\n</code></pre> <p>This class is used to instantiate an inspector.</p> <p>Inspectors iterate on objects members to extract data from them.</p> <p>Parameters:</p> <ul> <li> module_name             (<code>str</code>)         \u2013          <p>The module name.</p> </li> <li> filepath             (<code>Path | None</code>)         \u2013          <p>The optional filepath.</p> </li> <li> extensions             (<code>Extensions</code>)         \u2013          <p>Extensions to use when inspecting.</p> </li> <li> parent             (<code>Module | None</code>, default:                 <code>None</code> )         \u2013          <p>The module parent.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Methods:</p> <ul> <li> generic_inspect           \u2013            <p>Extend the base generic inspection with extensions.</p> </li> <li> get_module           \u2013            <p>Build and return the object representing the module attached to this inspector.</p> </li> <li> handle_attribute           \u2013            <p>Handle an attribute.</p> </li> <li> handle_function           \u2013            <p>Handle a function.</p> </li> <li> inspect           \u2013            <p>Extend the base inspection with extensions.</p> </li> <li> inspect_attribute           \u2013            <p>Inspect an attribute.</p> </li> <li> inspect_builtin_function           \u2013            <p>Inspect a builtin function.</p> </li> <li> inspect_builtin_method           \u2013            <p>Inspect a builtin method.</p> </li> <li> inspect_cached_property           \u2013            <p>Inspect a cached property.</p> </li> <li> inspect_class           \u2013            <p>Inspect a class.</p> </li> <li> inspect_classmethod           \u2013            <p>Inspect a class method.</p> </li> <li> inspect_coroutine           \u2013            <p>Inspect a coroutine.</p> </li> <li> inspect_function           \u2013            <p>Inspect a function.</p> </li> <li> inspect_method           \u2013            <p>Inspect a method.</p> </li> <li> inspect_method_descriptor           \u2013            <p>Inspect a method descriptor.</p> </li> <li> inspect_module           \u2013            <p>Inspect a module.</p> </li> <li> inspect_property           \u2013            <p>Inspect a property.</p> </li> <li> inspect_staticmethod           \u2013            <p>Inspect a static method.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.generic_inspect","title":"generic_inspect","text":"<pre><code>generic_inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base generic inspection with extensions.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.get_module","title":"get_module","text":"<pre><code>get_module(\n    import_paths: Sequence[str | Path] | None = None,\n) -&gt; Module\n</code></pre> <p>Build and return the object representing the module attached to this inspector.</p> <p>This method triggers a complete inspection of the module members.</p> <p>Parameters:</p> <ul> <li> import_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>Paths replacing <code>sys.path</code> to import the module.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>A module instance.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.handle_attribute","title":"handle_attribute","text":"<pre><code>handle_attribute(\n    node: ObjectNode, annotation: str | Expr | None = None\n) -&gt; None\n</code></pre> <p>Handle an attribute.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> <li> annotation             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>A potentiel annotation.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.handle_function","title":"handle_function","text":"<pre><code>handle_function(\n    node: ObjectNode, labels: set | None = None\n) -&gt; None\n</code></pre> <p>Handle a function.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> <li> labels             (<code>set | None</code>, default:                 <code>None</code> )         \u2013          <p>Labels to add to the data object.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base inspection with extensions.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_attribute","title":"inspect_attribute","text":"<pre><code>inspect_attribute(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect an attribute.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_builtin_function","title":"inspect_builtin_function","text":"<pre><code>inspect_builtin_function(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a builtin function.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_builtin_method","title":"inspect_builtin_method","text":"<pre><code>inspect_builtin_method(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a builtin method.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_cached_property","title":"inspect_cached_property","text":"<pre><code>inspect_cached_property(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a cached property.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_class","title":"inspect_class","text":"<pre><code>inspect_class(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a class.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_classmethod","title":"inspect_classmethod","text":"<pre><code>inspect_classmethod(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a class method.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_coroutine","title":"inspect_coroutine","text":"<pre><code>inspect_coroutine(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a coroutine.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_function","title":"inspect_function","text":"<pre><code>inspect_function(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a function.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_method","title":"inspect_method","text":"<pre><code>inspect_method(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a method.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_method_descriptor","title":"inspect_method_descriptor","text":"<pre><code>inspect_method_descriptor(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a method descriptor.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_module","title":"inspect_module","text":"<pre><code>inspect_module(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a module.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_property","title":"inspect_property","text":"<pre><code>inspect_property(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a property.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.Inspector.inspect_staticmethod","title":"inspect_staticmethod","text":"<pre><code>inspect_staticmethod(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a static method.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/agents/inspector/#griffe.agents.inspector.inspect","title":"inspect","text":"<pre><code>inspect(\n    module_name: str,\n    *,\n    filepath: Path | None = None,\n    import_paths: Sequence[str | Path] | None = None,\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None\n) -&gt; Module\n</code></pre> <p>Inspect a module.</p> <p>Parameters:</p> <ul> <li> module_name             (<code>str</code>)         \u2013          <p>The module name (as when importing [from] it).</p> </li> <li> filepath             (<code>Path | None</code>, default:                 <code>None</code> )         \u2013          <p>The module file path.</p> </li> <li> import_paths             (<code>Sequence[str | Path] | None</code>, default:                 <code>None</code> )         \u2013          <p>Paths to import the module from.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use when inspecting the module.</p> </li> <li> parent             (<code>Module | None</code>, default:                 <code>None</code> )         \u2013          <p>The optional parent of this module.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>The module, with its members populated.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> visitor","text":""},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor","title":"visitor","text":"<p>Code parsing and data extraction utilies.</p> <p>This module exposes a public function, <code>visit()</code>, which parses the module code using <code>parse()</code>, and returns a new <code>Module</code> instance, populating its members recursively, by using a <code>NodeVisitor</code>-like class.</p> <p>Classes:</p> <ul> <li> Visitor         \u2013          <p>This class is used to instantiate a visitor.</p> </li> </ul> <p>Functions:</p> <ul> <li> visit           \u2013            <p>Parse and visit a module file.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor","title":"Visitor","text":"<pre><code>Visitor(\n    module_name: str,\n    filepath: Path,\n    code: str,\n    extensions: Extensions,\n    parent: Module | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n)\n</code></pre> <p>This class is used to instantiate a visitor.</p> <p>Visitors iterate on AST nodes to extract data from them.</p> <p>Parameters:</p> <ul> <li> module_name             (<code>str</code>)         \u2013          <p>The module name.</p> </li> <li> filepath             (<code>Path</code>)         \u2013          <p>The module filepath.</p> </li> <li> code             (<code>str</code>)         \u2013          <p>The module source code.</p> </li> <li> extensions             (<code>Extensions</code>)         \u2013          <p>The extensions to use when visiting.</p> </li> <li> parent             (<code>Module | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional parent for the final module object.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Methods:</p> <ul> <li> decorators_to_labels           \u2013            <p>Build and return a set of labels based on decorators.</p> </li> <li> generic_visit           \u2013            <p>Extend the base generic visit with extensions.</p> </li> <li> get_base_property           \u2013            <p>Check decorators to return the base property in case of setters and deleters.</p> </li> <li> get_module           \u2013            <p>Build and return the object representing the module attached to this visitor.</p> </li> <li> handle_attribute           \u2013            <p>Handle an attribute (assignment) node.</p> </li> <li> handle_function           \u2013            <p>Handle a function definition node.</p> </li> <li> visit           \u2013            <p>Extend the base visit with extensions.</p> </li> <li> visit_annassign           \u2013            <p>Visit an annotated assignment node.</p> </li> <li> visit_assign           \u2013            <p>Visit an assignment node.</p> </li> <li> visit_asyncfunctiondef           \u2013            <p>Visit an async function definition node.</p> </li> <li> visit_augassign           \u2013            <p>Visit an augmented assignment node.</p> </li> <li> visit_classdef           \u2013            <p>Visit a class definition node.</p> </li> <li> visit_functiondef           \u2013            <p>Visit a function definition node.</p> </li> <li> visit_if           \u2013            <p>Visit an \"if\" node.</p> </li> <li> visit_import           \u2013            <p>Visit an import node.</p> </li> <li> visit_importfrom           \u2013            <p>Visit an \"import from\" node.</p> </li> <li> visit_module           \u2013            <p>Visit a module node.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.decorators_to_labels","title":"decorators_to_labels","text":"<pre><code>decorators_to_labels(\n    decorators: list[Decorator],\n) -&gt; set[str]\n</code></pre> <p>Build and return a set of labels based on decorators.</p> <p>Parameters:</p> <ul> <li> decorators             (<code>list[Decorator]</code>)         \u2013          <p>The decorators to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>set[str]</code>         \u2013          <p>A set of labels.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.generic_visit","title":"generic_visit","text":"<pre><code>generic_visit(node: AST) -&gt; None\n</code></pre> <p>Extend the base generic visit with extensions.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.get_base_property","title":"get_base_property","text":"<pre><code>get_base_property(\n    decorators: list[Decorator], function: Function\n) -&gt; str | None\n</code></pre> <p>Check decorators to return the base property in case of setters and deleters.</p> <p>Parameters:</p> <ul> <li> decorators             (<code>list[Decorator]</code>)         \u2013          <p>The decorators to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> base_property (            <code>str | None</code> )        \u2013          <p>The property for which the setter/deleted is set.</p> </li> <li> property_function (            <code>str | None</code> )        \u2013          <p>Either <code>\"setter\"</code> or <code>\"deleter\"</code>.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.get_module","title":"get_module","text":"<pre><code>get_module() -&gt; Module\n</code></pre> <p>Build and return the object representing the module attached to this visitor.</p> <p>This method triggers a complete visit of the module nodes.</p> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>A module instance.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.handle_attribute","title":"handle_attribute","text":"<pre><code>handle_attribute(\n    node: Assign | AnnAssign,\n    annotation: str | Expr | None = None,\n) -&gt; None\n</code></pre> <p>Handle an attribute (assignment) node.</p> <p>Parameters:</p> <ul> <li> node             (<code>Assign | AnnAssign</code>)         \u2013          <p>The node to visit.</p> </li> <li> annotation             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>A potential annotation.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.handle_function","title":"handle_function","text":"<pre><code>handle_function(\n    node: AsyncFunctionDef | FunctionDef,\n    labels: set | None = None,\n) -&gt; None\n</code></pre> <p>Handle a function definition node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AsyncFunctionDef | FunctionDef</code>)         \u2013          <p>The node to visit.</p> </li> <li> labels             (<code>set | None</code>, default:                 <code>None</code> )         \u2013          <p>Labels to add to the data object.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Extend the base visit with extensions.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_annassign","title":"visit_annassign","text":"<pre><code>visit_annassign(node: AnnAssign) -&gt; None\n</code></pre> <p>Visit an annotated assignment node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AnnAssign</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_assign","title":"visit_assign","text":"<pre><code>visit_assign(node: Assign) -&gt; None\n</code></pre> <p>Visit an assignment node.</p> <p>Parameters:</p> <ul> <li> node             (<code>Assign</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_asyncfunctiondef","title":"visit_asyncfunctiondef","text":"<pre><code>visit_asyncfunctiondef(node: AsyncFunctionDef) -&gt; None\n</code></pre> <p>Visit an async function definition node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AsyncFunctionDef</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_augassign","title":"visit_augassign","text":"<pre><code>visit_augassign(node: AugAssign) -&gt; None\n</code></pre> <p>Visit an augmented assignment node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AugAssign</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_classdef","title":"visit_classdef","text":"<pre><code>visit_classdef(node: ClassDef) -&gt; None\n</code></pre> <p>Visit a class definition node.</p> <p>Parameters:</p> <ul> <li> node             (<code>ClassDef</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_functiondef","title":"visit_functiondef","text":"<pre><code>visit_functiondef(node: FunctionDef) -&gt; None\n</code></pre> <p>Visit a function definition node.</p> <p>Parameters:</p> <ul> <li> node             (<code>FunctionDef</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_if","title":"visit_if","text":"<pre><code>visit_if(node: If) -&gt; None\n</code></pre> <p>Visit an \"if\" node.</p> <p>Parameters:</p> <ul> <li> node             (<code>If</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_import","title":"visit_import","text":"<pre><code>visit_import(node: Import) -&gt; None\n</code></pre> <p>Visit an import node.</p> <p>Parameters:</p> <ul> <li> node             (<code>Import</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_importfrom","title":"visit_importfrom","text":"<pre><code>visit_importfrom(node: ImportFrom) -&gt; None\n</code></pre> <p>Visit an \"import from\" node.</p> <p>Parameters:</p> <ul> <li> node             (<code>ImportFrom</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.Visitor.visit_module","title":"visit_module","text":"<pre><code>visit_module(node: Module) -&gt; None\n</code></pre> <p>Visit a module node.</p> <p>Parameters:</p> <ul> <li> node             (<code>Module</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/agents/visitor/#griffe.agents.visitor.visit","title":"visit","text":"<pre><code>visit(\n    module_name: str,\n    filepath: Path,\n    code: str,\n    *,\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None\n) -&gt; Module\n</code></pre> <p>Parse and visit a module file.</p> <p>Parameters:</p> <ul> <li> module_name             (<code>str</code>)         \u2013          <p>The module name (as when importing [from] it).</p> </li> <li> filepath             (<code>Path</code>)         \u2013          <p>The module file path.</p> </li> <li> code             (<code>str</code>)         \u2013          <p>The module contents.</p> </li> <li> extensions             (<code>Extensions | None</code>, default:                 <code>None</code> )         \u2013          <p>The extensions to use when visiting the AST.</p> </li> <li> parent             (<code>Module | None</code>, default:                 <code>None</code> )         \u2013          <p>The optional parent of this module.</p> </li> <li> docstring_parser             (<code>Parser | None</code>, default:                 <code>None</code> )         \u2013          <p>The docstring parser to use. By default, no parsing is done.</p> </li> <li> docstring_options             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional docstring parsing options.</p> </li> <li> lines_collection             (<code>LinesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of source code lines.</p> </li> <li> modules_collection             (<code>ModulesCollection | None</code>, default:                 <code>None</code> )         \u2013          <p>A collection of modules.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>         \u2013          <p>The module, with its members populated.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> nodes","text":""},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes","title":"nodes","text":"<p>This module contains utilities for extracting information from nodes.</p> <p>Classes:</p> <ul> <li> ObjectKind         \u2013          <p>Enumeration of the different runtime object kinds.</p> </li> <li> ObjectNode         \u2013          <p>Helper class to represent an object tree.</p> </li> </ul> <p>Functions:</p> <ul> <li> ast_children           \u2013            <p>Return the children of an AST node.</p> </li> <li> ast_first_child           \u2013            <p>Return the first child of this node.</p> </li> <li> ast_kind           \u2013            <p>Return the kind of an AST node.</p> </li> <li> ast_last_child           \u2013            <p>Return the lasts child of this node.</p> </li> <li> ast_next           \u2013            <p>Return the next sibling of this node.</p> </li> <li> ast_next_siblings           \u2013            <p>Return the next siblings of this node, starting from the closest.</p> </li> <li> ast_previous           \u2013            <p>Return the previous sibling of this node.</p> </li> <li> ast_previous_siblings           \u2013            <p>Return the previous siblings of this node, starting from the closest.</p> </li> <li> ast_siblings           \u2013            <p>Return the siblings of this node.</p> </li> <li> get__all__           \u2013            <p>Get the values declared in <code>__all__</code>.</p> </li> <li> get_call_keyword_arguments           \u2013            <p>Get the list of keyword argument names and values from a Call node.</p> </li> <li> get_docstring           \u2013            <p>Extract a docstring.</p> </li> <li> get_expression           \u2013            <p>Build an expression from an AST.</p> </li> <li> get_instance_names           \u2013            <p>Extract names from an assignment node, only for instance attributes.</p> </li> <li> get_name           \u2013            <p>Extract name from an assignment node.</p> </li> <li> get_names           \u2013            <p>Extract names from an assignment node.</p> </li> <li> get_value           \u2013            <p>Get the string representation of a node.</p> </li> <li> relative_to_absolute           \u2013            <p>Convert a relative import path to an absolute one.</p> </li> <li> safe_get__all__           \u2013            <p>Safely (no exception) extract values in <code>__all__</code>.</p> </li> <li> safe_get_expression           \u2013            <p>Safely (no exception) build a resolvable annotation.</p> </li> <li> safe_get_value           \u2013            <p>Safely (no exception) get the string representation of a node.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind","title":"ObjectKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different runtime object kinds.</p> <p>Attributes:</p> <ul> <li> ATTRIBUTE             (<code>str</code>)         \u2013          <p>Attributes.</p> </li> <li> BUILTIN_FUNCTION             (<code>str</code>)         \u2013          <p>Built-in functions.</p> </li> <li> BUILTIN_METHOD             (<code>str</code>)         \u2013          <p>Built-in ethods.</p> </li> <li> CACHED_PROPERTY             (<code>str</code>)         \u2013          <p>Cached properties.</p> </li> <li> CLASS             (<code>str</code>)         \u2013          <p>Classes.</p> </li> <li> CLASSMETHOD             (<code>str</code>)         \u2013          <p>Class methods.</p> </li> <li> COROUTINE             (<code>str</code>)         \u2013          <p>Coroutines</p> </li> <li> FUNCTION             (<code>str</code>)         \u2013          <p>Functions.</p> </li> <li> METHOD             (<code>str</code>)         \u2013          <p>Methods.</p> </li> <li> METHOD_DESCRIPTOR             (<code>str</code>)         \u2013          <p>Method descriptors.</p> </li> <li> MODULE             (<code>str</code>)         \u2013          <p>Modules.</p> </li> <li> PROPERTY             (<code>str</code>)         \u2013          <p>Properties.</p> </li> <li> STATICMETHOD             (<code>str</code>)         \u2013          <p>Static methods.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.ATTRIBUTE","title":"ATTRIBUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE: str = 'attribute'\n</code></pre> <p>Attributes.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.BUILTIN_FUNCTION","title":"BUILTIN_FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUILTIN_FUNCTION: str = 'builtin_function'\n</code></pre> <p>Built-in functions.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.BUILTIN_METHOD","title":"BUILTIN_METHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUILTIN_METHOD: str = 'builtin_method'\n</code></pre> <p>Built-in ethods.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.CACHED_PROPERTY","title":"CACHED_PROPERTY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CACHED_PROPERTY: str = 'cached_property'\n</code></pre> <p>Cached properties.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.CLASS","title":"CLASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASS: str = 'class'\n</code></pre> <p>Classes.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.CLASSMETHOD","title":"CLASSMETHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASSMETHOD: str = 'classmethod'\n</code></pre> <p>Class methods.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.COROUTINE","title":"COROUTINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COROUTINE: str = 'coroutine'\n</code></pre> <p>Coroutines</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.FUNCTION","title":"FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FUNCTION: str = 'function'\n</code></pre> <p>Functions.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.METHOD","title":"METHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METHOD: str = 'method'\n</code></pre> <p>Methods.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.METHOD_DESCRIPTOR","title":"METHOD_DESCRIPTOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METHOD_DESCRIPTOR: str = 'method_descriptor'\n</code></pre> <p>Method descriptors.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.MODULE","title":"MODULE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODULE: str = 'module'\n</code></pre> <p>Modules.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.PROPERTY","title":"PROPERTY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PROPERTY: str = 'property'\n</code></pre> <p>Properties.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectKind.STATICMETHOD","title":"STATICMETHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STATICMETHOD: str = 'staticmethod'\n</code></pre> <p>Static methods.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode","title":"ObjectNode","text":"<pre><code>ObjectNode(\n    obj: Any, name: str, parent: ObjectNode | None = None\n)\n</code></pre> <p>Helper class to represent an object tree.</p> <p>It's not really a tree but more a backward-linked list: each node has a reference to its parent, but not to its child (for simplicity purposes and to avoid bugs).</p> <p>Each node stores an object, its name, and a reference to its parent node.</p> <p>Parameters:</p> <ul> <li> obj             (<code>Any</code>)         \u2013          <p>A Python object.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The object's name.</p> </li> <li> parent             (<code>ObjectNode | None</code>, default:                 <code>None</code> )         \u2013          <p>The object's parent node.</p> </li> </ul> <p>Methods:</p> <ul> </ul> <p>Attributes:</p> <ul> <li> alias_target_path             (<code>str | None</code>)         \u2013          <p>Alias target path of this node, if the node should be an alias.</p> </li> <li> children             (<code>Sequence[ObjectNode]</code>)         \u2013          <p>The children of this node.</p> </li> <li> is_builtin_function             (<code>bool</code>)         \u2013          <p>Whether this node's object is a builtin function.</p> </li> <li> is_builtin_method             (<code>bool</code>)         \u2013          <p>Whether this node's object is a builtin method.</p> </li> <li> is_cached_property             (<code>bool</code>)         \u2013          <p>Whether this node's object is a cached property.</p> </li> <li> is_class             (<code>bool</code>)         \u2013          <p>Whether this node's object is a class.</p> </li> <li> is_classmethod             (<code>bool</code>)         \u2013          <p>Whether this node's object is a classmethod.</p> </li> <li> is_coroutine             (<code>bool</code>)         \u2013          <p>Whether this node's object is a coroutine.</p> </li> <li> is_function             (<code>bool</code>)         \u2013          <p>Whether this node's object is a function.</p> </li> <li> is_method             (<code>bool</code>)         \u2013          <p>Whether this node's object is a method.</p> </li> <li> is_method_descriptor             (<code>bool</code>)         \u2013          <p>Whether this node's object is a method descriptor.</p> </li> <li> is_module             (<code>bool</code>)         \u2013          <p>Whether this node's object is a module.</p> </li> <li> is_property             (<code>bool</code>)         \u2013          <p>Whether this node's object is a property.</p> </li> <li> is_staticmethod             (<code>bool</code>)         \u2013          <p>Whether this node's object is a staticmethod.</p> </li> <li> kind             (<code>ObjectKind</code>)         \u2013          <p>The kind of this node.</p> </li> <li> module             (<code>ObjectNode</code>)         \u2013          <p>The object's module.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The Python object's name.</p> </li> <li> obj             (<code>Any</code>)         \u2013          <p>The actual Python object.</p> </li> <li> parent             (<code>ObjectNode | None</code>)         \u2013          <p>The parent node.</p> </li> <li> parent_is_class             (<code>bool</code>)         \u2013          <p>Whether the object of this node's parent is a class.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The object's (Python) path.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.alias_target_path","title":"alias_target_path  <code>cached</code> <code>property</code>","text":"<pre><code>alias_target_path: str | None\n</code></pre> <p>Alias target path of this node, if the node should be an alias.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.children","title":"children  <code>cached</code> <code>property</code>","text":"<pre><code>children: Sequence[ObjectNode]\n</code></pre> <p>The children of this node.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_builtin_function","title":"is_builtin_function  <code>cached</code> <code>property</code>","text":"<pre><code>is_builtin_function: bool\n</code></pre> <p>Whether this node's object is a builtin function.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_builtin_method","title":"is_builtin_method  <code>cached</code> <code>property</code>","text":"<pre><code>is_builtin_method: bool\n</code></pre> <p>Whether this node's object is a builtin method.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_cached_property","title":"is_cached_property  <code>cached</code> <code>property</code>","text":"<pre><code>is_cached_property: bool\n</code></pre> <p>Whether this node's object is a cached property.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_class","title":"is_class  <code>cached</code> <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this node's object is a class.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_classmethod","title":"is_classmethod  <code>cached</code> <code>property</code>","text":"<pre><code>is_classmethod: bool\n</code></pre> <p>Whether this node's object is a classmethod.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_coroutine","title":"is_coroutine  <code>cached</code> <code>property</code>","text":"<pre><code>is_coroutine: bool\n</code></pre> <p>Whether this node's object is a coroutine.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_function","title":"is_function  <code>cached</code> <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this node's object is a function.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_method","title":"is_method  <code>cached</code> <code>property</code>","text":"<pre><code>is_method: bool\n</code></pre> <p>Whether this node's object is a method.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_method_descriptor","title":"is_method_descriptor  <code>cached</code> <code>property</code>","text":"<pre><code>is_method_descriptor: bool\n</code></pre> <p>Whether this node's object is a method descriptor.</p> <p>Built-in methods (e.g. those implemented in C/Rust) are often method descriptors, rather than normal methods.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_module","title":"is_module  <code>cached</code> <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this node's object is a module.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_property","title":"is_property  <code>cached</code> <code>property</code>","text":"<pre><code>is_property: bool\n</code></pre> <p>Whether this node's object is a property.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.is_staticmethod","title":"is_staticmethod  <code>cached</code> <code>property</code>","text":"<pre><code>is_staticmethod: bool\n</code></pre> <p>Whether this node's object is a staticmethod.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.kind","title":"kind  <code>property</code>","text":"<pre><code>kind: ObjectKind\n</code></pre> <p>The kind of this node.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.module","title":"module  <code>property</code>","text":"<pre><code>module: ObjectNode\n</code></pre> <p>The object's module.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The Python object's name.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj: Any = obj\n</code></pre> <p>The actual Python object.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: ObjectNode | None = parent\n</code></pre> <p>The parent node.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.parent_is_class","title":"parent_is_class  <code>cached</code> <code>property</code>","text":"<pre><code>parent_is_class: bool\n</code></pre> <p>Whether the object of this node's parent is a class.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ObjectNode.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The object's (Python) path.</p>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_children","title":"ast_children","text":"<pre><code>ast_children(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the children of an AST node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>AST</code>         \u2013          <p>The node children.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_first_child","title":"ast_first_child","text":"<pre><code>ast_first_child(node: AST) -&gt; AST\n</code></pre> <p>Return the first child of this node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>           \u2013          <p>When the node does not have children.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>         \u2013          <p>The child.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_kind","title":"ast_kind","text":"<pre><code>ast_kind(node: AST) -&gt; str\n</code></pre> <p>Return the kind of an AST node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The node kind.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_last_child","title":"ast_last_child","text":"<pre><code>ast_last_child(node: AST) -&gt; AST\n</code></pre> <p>Return the lasts child of this node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>           \u2013          <p>When the node does not have children.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>         \u2013          <p>The child.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_next","title":"ast_next","text":"<pre><code>ast_next(node: AST) -&gt; AST\n</code></pre> <p>Return the next sibling of this node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>           \u2013          <p>When the node does not have next siblings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>         \u2013          <p>The sibling.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_next_siblings","title":"ast_next_siblings","text":"<pre><code>ast_next_siblings(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the next siblings of this node, starting from the closest.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>AST</code>         \u2013          <p>The next siblings.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_previous","title":"ast_previous","text":"<pre><code>ast_previous(node: AST) -&gt; AST\n</code></pre> <p>Return the previous sibling of this node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>           \u2013          <p>When the node does not have previous siblings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>         \u2013          <p>The sibling.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_previous_siblings","title":"ast_previous_siblings","text":"<pre><code>ast_previous_siblings(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the previous siblings of this node, starting from the closest.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>AST</code>         \u2013          <p>The previous siblings.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.ast_siblings","title":"ast_siblings","text":"<pre><code>ast_siblings(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the siblings of this node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The AST node.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>AST</code>         \u2013          <p>The siblings.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get__all__","title":"get__all__","text":"<pre><code>get__all__(\n    node: Assign | AugAssign, parent: Module\n) -&gt; list[str | ExprName]\n</code></pre> <p>Get the values declared in <code>__all__</code>.</p> <p>Parameters:</p> <ul> <li> node             (<code>Assign | AugAssign</code>)         \u2013          <p>The assignment node.</p> </li> <li> parent             (<code>Module</code>)         \u2013          <p>The parent module.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str | ExprName]</code>         \u2013          <p>A set of names.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get_call_keyword_arguments","title":"get_call_keyword_arguments","text":"<pre><code>get_call_keyword_arguments(\n    node: Call, parent: Module | Class\n) -&gt; dict[str, Any]\n</code></pre> <p>Get the list of keyword argument names and values from a Call node.</p> <p>Parameters:</p> <ul> <li> node             (<code>Call</code>)         \u2013          <p>The node to extract the keyword arguments from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>The keyword argument names and values.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get_docstring","title":"get_docstring","text":"<pre><code>get_docstring(\n    node: AST, *, strict: bool = False\n) -&gt; tuple[str | None, int | None, int | None]\n</code></pre> <p>Extract a docstring.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to extract the docstring from.</p> </li> <li> strict             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to skip searching the body (functions).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str | None, int | None, int | None]</code>         \u2013          <p>A tuple with the value and line numbers of the docstring.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get_expression","title":"get_expression","text":"<pre><code>get_expression(\n    node: AST | None,\n    parent: Module | Class,\n    *,\n    parse_strings: bool | None = None\n) -&gt; Expr | None\n</code></pre> <p>Build an expression from an AST.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | None</code>)         \u2013          <p>The annotation node.</p> </li> <li> parent             (<code>Module | Class</code>)         \u2013          <p>The parent used to resolve the name.</p> </li> <li> parse_strings             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Whether to try and parse strings as type annotations.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr | None</code>         \u2013          <p>A string or resovable name or expression.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get_instance_names","title":"get_instance_names","text":"<pre><code>get_instance_names(node: AST) -&gt; list[str]\n</code></pre> <p>Extract names from an assignment node, only for instance attributes.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to extract names from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>A list of names.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get_name","title":"get_name","text":"<pre><code>get_name(node: AST) -&gt; str\n</code></pre> <p>Extract name from an assignment node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to extract names from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A list of names.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get_names","title":"get_names","text":"<pre><code>get_names(node: AST) -&gt; list[str]\n</code></pre> <p>Extract names from an assignment node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to extract names from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>A list of names.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.get_value","title":"get_value","text":"<pre><code>get_value(node: AST | None) -&gt; str | None\n</code></pre> <p>Get the string representation of a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | None</code>)         \u2013          <p>The node to represent.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>The representing code for the node.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.relative_to_absolute","title":"relative_to_absolute","text":"<pre><code>relative_to_absolute(\n    node: ImportFrom, name: alias, current_module: Module\n) -&gt; str\n</code></pre> <p>Convert a relative import path to an absolute one.</p> <p>Parameters:</p> <ul> <li> node             (<code>ImportFrom</code>)         \u2013          <p>The \"from ... import ...\" AST node.</p> </li> <li> name             (<code>alias</code>)         \u2013          <p>The imported name.</p> </li> <li> current_module             (<code>Module</code>)         \u2013          <p>The module in which the import happens.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The absolute import path.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.safe_get__all__","title":"safe_get__all__","text":"<pre><code>safe_get__all__(\n    node: Assign | AugAssign,\n    parent: Module,\n    log_level: LogLevel = LogLevel.debug,\n) -&gt; list[str | ExprName]\n</code></pre> <p>Safely (no exception) extract values in <code>__all__</code>.</p> <p>Parameters:</p> <ul> <li> node             (<code>Assign | AugAssign</code>)         \u2013          <p>The <code>__all__</code> assignment node.</p> </li> <li> parent             (<code>Module</code>)         \u2013          <p>The parent used to resolve the names.</p> </li> <li> log_level             (<code>LogLevel</code>, default:                 <code>debug</code> )         \u2013          <p>Log level to use to log a message.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str | ExprName]</code>         \u2013          <p>A list of strings or resovable names.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.safe_get_expression","title":"safe_get_expression","text":"<pre><code>safe_get_expression(\n    node: AST | None,\n    parent: Module | Class,\n    *,\n    parse_strings: bool | None = None,\n    log_level: LogLevel | None = LogLevel.error,\n    msg_format: str = \"{path}:{lineno}: Failed to get expression from {node_class}: {error}\"\n) -&gt; Expr | None\n</code></pre> <p>Safely (no exception) build a resolvable annotation.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | None</code>)         \u2013          <p>The annotation node.</p> </li> <li> parent             (<code>Module | Class</code>)         \u2013          <p>The parent used to resolve the name.</p> </li> <li> parse_strings             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Whether to try and parse strings as type annotations.</p> </li> <li> log_level             (<code>LogLevel | None</code>, default:                 <code>error</code> )         \u2013          <p>Log level to use to log a message. None to disable logging.</p> </li> <li> msg_format             (<code>str</code>, default:                 <code>'{path}:{lineno}: Failed to get expression from {node_class}: {error}'</code> )         \u2013          <p>A format string for the log message. Available placeholders: path, lineno, node, error.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr | None</code>         \u2013          <p>A string or resovable name or expression.</p> </li> </ul>"},{"location":"reference/griffe/agents/nodes/#griffe.agents.nodes.safe_get_value","title":"safe_get_value","text":"<pre><code>safe_get_value(\n    node: AST | None, filepath: str | Path | None = None\n) -&gt; str | None\n</code></pre> <p>Safely (no exception) get the string representation of a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | None</code>)         \u2013          <p>The node to represent.</p> </li> <li> filepath             (<code>str | Path | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional filepath from where the node comes.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>The representing code for the node.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/","title":"Index","text":""},{"location":"reference/griffe/docstrings/#griffe.docstrings","title":"docstrings","text":"<p>This module exposes objects related to docstrings.</p> <p>Modules:</p> <ul> <li> dataclasses         \u2013          <p>This module contains the dataclasses related to docstrings.</p> </li> <li> google         \u2013          <p>This module defines functions to parse Google-style docstrings into structured data.</p> </li> <li> numpy         \u2013          <p>This module defines functions to parse Numpy-style docstrings into structured data.</p> </li> <li> parsers         \u2013          <p>This module imports all the defined parsers.</p> </li> <li> sphinx         \u2013          <p>This module defines functions to parse Sphinx docstrings into structured data.</p> </li> <li> utils         \u2013          <p>This module contains utilities for docstrings parsers.</p> </li> </ul> <p>Classes:</p> <ul> <li> Parser         \u2013          <p>Enumeration of the different docstring parsers.</p> </li> </ul> <p>Functions:</p> <ul> <li> parse           \u2013            <p>Parse the docstring.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/#griffe.docstrings.Parser","title":"Parser","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different docstring parsers.</p> <p>Attributes:</p> <ul> <li> google         \u2013          <p>Google-style docstrings parser.</p> </li> <li> numpy         \u2013          <p>Numpydoc-style docstrings parser.</p> </li> <li> sphinx         \u2013          <p>Sphinx-style docstrings parser.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/#griffe.docstrings.Parser.google","title":"google  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>google = 'google'\n</code></pre> <p>Google-style docstrings parser.</p>"},{"location":"reference/griffe/docstrings/#griffe.docstrings.Parser.numpy","title":"numpy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>numpy = 'numpy'\n</code></pre> <p>Numpydoc-style docstrings parser.</p>"},{"location":"reference/griffe/docstrings/#griffe.docstrings.Parser.sphinx","title":"sphinx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sphinx = 'sphinx'\n</code></pre> <p>Sphinx-style docstrings parser.</p>"},{"location":"reference/griffe/docstrings/#griffe.docstrings.parse","title":"parse","text":"<pre><code>parse(\n    docstring: Docstring,\n    parser: Literal[\"google\", \"numpy\", \"sphinx\"]\n    | Parser\n    | None,\n    **options: Any\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse the docstring.</p> <p>Parameters:</p> <ul> <li> docstring             (<code>Docstring</code>)         \u2013          <p>The docstring to parse.</p> </li> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>)         \u2013          <p>The docstring parser to use. If None, return a single text section.</p> </li> <li> **options             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>The options accepted by the parser.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>         \u2013          <p>A list of docstring sections.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> dataclasses","text":""},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses","title":"dataclasses","text":"<p>This module contains the dataclasses related to docstrings.</p> <p>Classes:</p> <ul> <li> DocstringAdmonition         \u2013          <p>This class represents an admonition.</p> </li> <li> DocstringAttribute         \u2013          <p>This class represents a documented module/class attribute.</p> </li> <li> DocstringClass         \u2013          <p>This class represents a documented class.</p> </li> <li> DocstringDeprecated         \u2013          <p>This class represents a documented deprecated item.</p> </li> <li> DocstringElement         \u2013          <p>This base class represents annotated, nameless elements.</p> </li> <li> DocstringFunction         \u2013          <p>This class represents a documented function.</p> </li> <li> DocstringModule         \u2013          <p>This class represents a documented module.</p> </li> <li> DocstringNamedElement         \u2013          <p>This base class represents annotated, named elements.</p> </li> <li> DocstringParameter         \u2013          <p>This class represent a documented function parameter.</p> </li> <li> DocstringRaise         \u2013          <p>This class represents a documented raise value.</p> </li> <li> DocstringReceive         \u2013          <p>This class represents a documented receive value.</p> </li> <li> DocstringReturn         \u2013          <p>This class represents a documented return value.</p> </li> <li> DocstringSection         \u2013          <p>This class represents a docstring section.</p> </li> <li> DocstringSectionAdmonition         \u2013          <p>This class represents an admonition section.</p> </li> <li> DocstringSectionAttributes         \u2013          <p>This class represents an attributes section.</p> </li> <li> DocstringSectionClasses         \u2013          <p>This class represents a classes section.</p> </li> <li> DocstringSectionDeprecated         \u2013          <p>This class represents a deprecated section.</p> </li> <li> DocstringSectionExamples         \u2013          <p>This class represents an examples section.</p> </li> <li> DocstringSectionFunctions         \u2013          <p>This class represents a functions/methods section.</p> </li> <li> DocstringSectionKind         \u2013          <p>Enumeration of the possible docstring section kinds.</p> </li> <li> DocstringSectionModules         \u2013          <p>This class represents a modules section.</p> </li> <li> DocstringSectionOtherParameters         \u2013          <p>This class represents an other parameters section.</p> </li> <li> DocstringSectionParameters         \u2013          <p>This class represents a parameters section.</p> </li> <li> DocstringSectionRaises         \u2013          <p>This class represents a raises section.</p> </li> <li> DocstringSectionReceives         \u2013          <p>This class represents a receives section.</p> </li> <li> DocstringSectionReturns         \u2013          <p>This class represents a returns section.</p> </li> <li> DocstringSectionText         \u2013          <p>This class represents a text section.</p> </li> <li> DocstringSectionWarns         \u2013          <p>This class represents a warns section.</p> </li> <li> DocstringSectionYields         \u2013          <p>This class represents a yields section.</p> </li> <li> DocstringWarn         \u2013          <p>This class represents a documented warn value.</p> </li> <li> DocstringYield         \u2013          <p>This class represents a documented yield value.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringAdmonition","title":"DocstringAdmonition","text":"<p>             Bases: <code>DocstringElement</code></p> <p>This class represents an admonition.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> contents             (<code>str</code>)         \u2013          <p>The contents of this admonition.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> kind             (<code>str | Expr | None</code>)         \u2013          <p>The kind of this admonition.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringAdmonition.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringAdmonition.contents","title":"contents  <code>property</code> <code>writable</code>","text":"<pre><code>contents: str\n</code></pre> <p>The contents of this admonition.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringAdmonition.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringAdmonition.kind","title":"kind  <code>property</code> <code>writable</code>","text":"<pre><code>kind: str | Expr | None\n</code></pre> <p>The kind of this admonition.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringAdmonition.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringAttribute","title":"DocstringAttribute","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represents a documented module/class attribute.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringClass","title":"DocstringClass","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represents a documented class.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringClass.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringClass.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringClass.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringClass.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringClass.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringDeprecated","title":"DocstringDeprecated","text":"<p>             Bases: <code>DocstringElement</code></p> <p>This class represents a documented deprecated item.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> version             (<code>str</code>)         \u2013          <p>The version of this deprecation.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringDeprecated.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringDeprecated.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringDeprecated.version","title":"version  <code>property</code> <code>writable</code>","text":"<pre><code>version: str\n</code></pre> <p>The version of this deprecation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringDeprecated.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringElement","title":"DocstringElement","text":"<pre><code>DocstringElement(\n    *,\n    description: str,\n    annotation: str | Expr | None = None\n)\n</code></pre> <p>This base class represents annotated, nameless elements.</p> <p>Parameters:</p> <ul> <li> annotation             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The element annotation, if any.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringElement.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringElement.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringElement.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringFunction","title":"DocstringFunction","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represents a documented function.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringFunction.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringFunction.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringFunction.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringFunction.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringFunction.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringModule","title":"DocstringModule","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represents a documented module.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringNamedElement","title":"DocstringNamedElement","text":"<pre><code>DocstringNamedElement(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringElement</code></p> <p>This base class represents annotated, named elements.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> annotation             (<code>str | Expr | None</code>, default:                 <code>None</code> )         \u2013          <p>The element annotation, if any.</p> </li> <li> value             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The element value, as a string.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringNamedElement.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringNamedElement.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringNamedElement.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringNamedElement.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringNamedElement.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringParameter","title":"DocstringParameter","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represent a documented function parameter.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> default             (<code>str | None</code>)         \u2013          <p>The default value of this parameter.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringParameter.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringParameter.default","title":"default  <code>property</code> <code>writable</code>","text":"<pre><code>default: str | None\n</code></pre> <p>The default value of this parameter.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringParameter.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringParameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringParameter.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringParameter.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringRaise","title":"DocstringRaise","text":"<p>             Bases: <code>DocstringElement</code></p> <p>This class represents a documented raise value.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringReceive","title":"DocstringReceive","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represents a documented receive value.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringReturn","title":"DocstringReturn","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represents a documented return value.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSection","title":"DocstringSection","text":"<pre><code>DocstringSection(title: str | None = None)\n</code></pre> <p>This class represents a docstring section.</p> <p>Parameters:</p> <ul> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> kind             (<code>DocstringSectionKind</code>)         \u2013          <p>The section kind.</p> </li> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> <li> value             (<code>Any</code>)         \u2013          <p>The section value.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSection.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind\n</code></pre> <p>The section kind.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSection.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSection.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Any = None\n</code></pre> <p>The section value.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSection.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionAdmonition","title":"DocstringSectionAdmonition","text":"<pre><code>DocstringSectionAdmonition(\n    kind: str, text: str, title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents an admonition section.</p> <p>Parameters:</p> <ul> <li> kind             (<code>str</code>)         \u2013          <p>The admonition kind.</p> </li> <li> text             (<code>str</code>)         \u2013          <p>The admonition text.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionAdmonition.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionAdmonition.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionAttributes","title":"DocstringSectionAttributes","text":"<pre><code>DocstringSectionAttributes(\n    value: list[DocstringAttribute],\n    title: str | None = None,\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents an attributes section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringAttribute]</code>)         \u2013          <p>The section attributes.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionAttributes.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionAttributes.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionClasses","title":"DocstringSectionClasses","text":"<pre><code>DocstringSectionClasses(\n    value: list[DocstringClass], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a classes section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringClass]</code>)         \u2013          <p>The section classes.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionClasses.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionClasses.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionDeprecated","title":"DocstringSectionDeprecated","text":"<pre><code>DocstringSectionDeprecated(\n    version: str, text: str, title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a deprecated section.</p> <p>Parameters:</p> <ul> <li> version             (<code>str</code>)         \u2013          <p>The deprecation version.</p> </li> <li> text             (<code>str</code>)         \u2013          <p>The deprecation text.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionDeprecated.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionDeprecated.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionExamples","title":"DocstringSectionExamples","text":"<pre><code>DocstringSectionExamples(\n    value: list[tuple[Literal[text, examples], str]],\n    title: str | None = None,\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents an examples section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[tuple[Literal[text, examples], str]]</code>)         \u2013          <p>The section examples.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionExamples.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionExamples.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionFunctions","title":"DocstringSectionFunctions","text":"<pre><code>DocstringSectionFunctions(\n    value: list[DocstringFunction], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a functions/methods section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringFunction]</code>)         \u2013          <p>The section functions.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionFunctions.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionFunctions.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind","title":"DocstringSectionKind","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the possible docstring section kinds.</p> <p>Attributes:</p> <ul> <li> admonition         \u2013          <p>Admonition block.</p> </li> <li> attributes         \u2013          <p>Attributes section.</p> </li> <li> classes         \u2013          <p>Classes section.</p> </li> <li> deprecated         \u2013          <p>Deprecation section.</p> </li> <li> examples         \u2013          <p>Examples section.</p> </li> <li> functions         \u2013          <p>Functions section.</p> </li> <li> modules         \u2013          <p>Modules section.</p> </li> <li> other_parameters         \u2013          <p>Other parameters (keyword arguments) section.</p> </li> <li> parameters         \u2013          <p>Parameters section.</p> </li> <li> raises         \u2013          <p>Raises (exceptions) section.</p> </li> <li> receives         \u2013          <p>Received value(s) (generators) section.</p> </li> <li> returns         \u2013          <p>Returned value(s) section.</p> </li> <li> text         \u2013          <p>Text section.</p> </li> <li> warns         \u2013          <p>Warnings section.</p> </li> <li> yields         \u2013          <p>Yielded value(s) (generators) section.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.admonition","title":"admonition  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admonition = 'admonition'\n</code></pre> <p>Admonition block.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes = 'attributes'\n</code></pre> <p>Attributes section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.classes","title":"classes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>classes = 'classes'\n</code></pre> <p>Classes section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = 'deprecated'\n</code></pre> <p>Deprecation section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = 'examples'\n</code></pre> <p>Examples section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.functions","title":"functions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>functions = 'functions'\n</code></pre> <p>Functions section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.modules","title":"modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>modules = 'modules'\n</code></pre> <p>Modules section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.other_parameters","title":"other_parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>other_parameters = 'other parameters'\n</code></pre> <p>Other parameters (keyword arguments) section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = 'parameters'\n</code></pre> <p>Parameters section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.raises","title":"raises  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>raises = 'raises'\n</code></pre> <p>Raises (exceptions) section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.receives","title":"receives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>receives = 'receives'\n</code></pre> <p>Received value(s) (generators) section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.returns","title":"returns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>returns = 'returns'\n</code></pre> <p>Returned value(s) section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.text","title":"text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text = 'text'\n</code></pre> <p>Text section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.warns","title":"warns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>warns = 'warns'\n</code></pre> <p>Warnings section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionKind.yields","title":"yields  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>yields = 'yields'\n</code></pre> <p>Yielded value(s) (generators) section.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionModules","title":"DocstringSectionModules","text":"<pre><code>DocstringSectionModules(\n    value: list[DocstringModule], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a modules section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringModule]</code>)         \u2013          <p>The section modules.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionModules.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionModules.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionOtherParameters","title":"DocstringSectionOtherParameters","text":"<p>             Bases: <code>DocstringSectionParameters</code></p> <p>This class represents an other parameters section.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionOtherParameters.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionOtherParameters.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionParameters","title":"DocstringSectionParameters","text":"<pre><code>DocstringSectionParameters(\n    value: list[DocstringParameter],\n    title: str | None = None,\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a parameters section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringParameter]</code>)         \u2013          <p>The section parameters.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionParameters.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionParameters.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionRaises","title":"DocstringSectionRaises","text":"<pre><code>DocstringSectionRaises(\n    value: list[DocstringRaise], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a raises section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringRaise]</code>)         \u2013          <p>The section exceptions.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionRaises.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionRaises.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionReceives","title":"DocstringSectionReceives","text":"<pre><code>DocstringSectionReceives(\n    value: list[DocstringReceive], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a receives section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringReceive]</code>)         \u2013          <p>The section received items.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionReceives.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionReceives.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionReturns","title":"DocstringSectionReturns","text":"<pre><code>DocstringSectionReturns(\n    value: list[DocstringReturn], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a returns section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringReturn]</code>)         \u2013          <p>The section returned items.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionReturns.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionReturns.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionText","title":"DocstringSectionText","text":"<pre><code>DocstringSectionText(value: str, title: str | None = None)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a text section.</p> <p>Parameters:</p> <ul> <li> value             (<code>str</code>)         \u2013          <p>The section text.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionText.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionText.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionWarns","title":"DocstringSectionWarns","text":"<pre><code>DocstringSectionWarns(\n    value: list[DocstringWarn], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a warns section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringWarn]</code>)         \u2013          <p>The section warnings.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionWarns.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionWarns.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionYields","title":"DocstringSectionYields","text":"<pre><code>DocstringSectionYields(\n    value: list[DocstringYield], title: str | None = None\n)\n</code></pre> <p>             Bases: <code>DocstringSection</code></p> <p>This class represents a yields section.</p> <p>Parameters:</p> <ul> <li> value             (<code>list[DocstringYield]</code>)         \u2013          <p>The section yielded items.</p> </li> <li> title             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>An optional title.</p> </li> </ul> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> title             (<code>str | None</code>)         \u2013          <p>The section title.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionYields.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringSectionYields.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <ul> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional serialization options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>A dictionary.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringWarn","title":"DocstringWarn","text":"<p>             Bases: <code>DocstringElement</code></p> <p>This class represents a documented warn value.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/dataclasses/#griffe.docstrings.dataclasses.DocstringYield","title":"DocstringYield","text":"<p>             Bases: <code>DocstringNamedElement</code></p> <p>This class represents a documented yield value.</p> <p>Methods:</p> <ul> <li> as_dict           \u2013            <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> annotation             (<code>str | Expr | None</code>)         \u2013          <p>The element annotation.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The element description.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The element name.</p> </li> <li> value             (<code>str | None</code>)         \u2013          <p>The element value, if any</p> </li> </ul>"},{"location":"reference/griffe/docstrings/google/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> google","text":""},{"location":"reference/griffe/docstrings/google/#griffe.docstrings.google","title":"google","text":"<p>This module defines functions to parse Google-style docstrings into structured data.</p> <p>Functions:</p> <ul> <li> parse           \u2013            <p>Parse a docstring.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/google/#griffe.docstrings.google.parse","title":"parse","text":"<pre><code>parse(\n    docstring: Docstring,\n    *,\n    ignore_init_summary: bool = False,\n    trim_doctest_flags: bool = True,\n    returns_multiple_items: bool = True,\n    warn_unknown_params: bool = True,\n    returns_named_value: bool = True,\n    returns_type_in_property_summary: bool = False,\n    **options: Any\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse a docstring.</p> <p>This function iterates on lines of a docstring to build sections. It then returns this list of sections.</p> <p>Parameters:</p> <ul> <li> docstring             (<code>Docstring</code>)         \u2013          <p>The docstring to parse.</p> </li> <li> ignore_init_summary             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p> </li> <li> trim_doctest_flags             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to remove doctest flags from Python example blocks.</p> </li> <li> returns_multiple_items             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether the <code>Returns</code> section has multiple items.</p> </li> <li> warn_unknown_params             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Warn about documented parameters not appearing in the signature.</p> </li> <li> returns_named_value             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to parse <code>thing: Description</code> in returns sections as a name and description, rather than a type and description. When true, type must be wrapped in parentheses: <code>(int): Description.</code>. When false, parentheses are optional but the items cannot be named: <code>int: Description</code>.</p> </li> <li> returns_type_in_property_summary             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to parse the return type of properties at the beginning of their summary: <code>str: Summary of the property</code>.</p> </li> <li> **options             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>         \u2013          <p>A list of docstring sections.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/numpy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> numpy","text":""},{"location":"reference/griffe/docstrings/numpy/#griffe.docstrings.numpy","title":"numpy","text":"<p>This module defines functions to parse Numpy-style docstrings into structured data.</p> <p>Based on https://numpydoc.readthedocs.io/en/latest/format.html, it seems Numpydoc is a superset of RST. Since fully parsing RST is a non-goal of this project, some things are stripped from the Numpydoc specification.</p> <p>Rejected as non particularly Pythonic or useful as sections:</p> <ul> <li>See also: this section feels too subjective (specially crafted as a standard for Numpy itself),     and there are may ways to reference related items in a docstring, depending on the chosen markup.</li> </ul> <p>Rejected as naturally handled by the user-chosen markup:</p> <ul> <li>Warnings: this is just markup.</li> <li>Notes: again, just markup.</li> <li>References: again, just markup.</li> </ul> <p>Functions:</p> <ul> <li> parse           \u2013            <p>Parse a docstring.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/numpy/#griffe.docstrings.numpy.parse","title":"parse","text":"<pre><code>parse(\n    docstring: Docstring,\n    *,\n    ignore_init_summary: bool = False,\n    trim_doctest_flags: bool = True,\n    allow_section_blank_line: bool = False,\n    warn_unknown_params: bool = True,\n    **options: Any\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse a docstring.</p> <p>This function iterates on lines of a docstring to build sections. It then returns this list of sections.</p> <p>Parameters:</p> <ul> <li> docstring             (<code>Docstring</code>)         \u2013          <p>The docstring to parse.</p> </li> <li> ignore_init_summary             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p> </li> <li> trim_doctest_flags             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to remove doctest flags from Python example blocks.</p> </li> <li> allow_section_blank_line             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to continue a section if there's an empty line between items in a formatted block, like Parameters or Returns. If True, you can still create a new section using two empty lines.</p> </li> <li> warn_unknown_params             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Warn about documented parameters not appearing in the signature.</p> </li> <li> **options             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>         \u2013          <p>A list of docstring sections.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/parsers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> parsers","text":""},{"location":"reference/griffe/docstrings/parsers/#griffe.docstrings.parsers","title":"parsers","text":"<p>This module imports all the defined parsers.</p> <p>Classes:</p> <ul> <li> Parser         \u2013          <p>Enumeration of the different docstring parsers.</p> </li> </ul> <p>Functions:</p> <ul> <li> parse           \u2013            <p>Parse the docstring.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/parsers/#griffe.docstrings.parsers.Parser","title":"Parser","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different docstring parsers.</p> <p>Attributes:</p> <ul> <li> google         \u2013          <p>Google-style docstrings parser.</p> </li> <li> numpy         \u2013          <p>Numpydoc-style docstrings parser.</p> </li> <li> sphinx         \u2013          <p>Sphinx-style docstrings parser.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/parsers/#griffe.docstrings.parsers.Parser.google","title":"google  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>google = 'google'\n</code></pre> <p>Google-style docstrings parser.</p>"},{"location":"reference/griffe/docstrings/parsers/#griffe.docstrings.parsers.Parser.numpy","title":"numpy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>numpy = 'numpy'\n</code></pre> <p>Numpydoc-style docstrings parser.</p>"},{"location":"reference/griffe/docstrings/parsers/#griffe.docstrings.parsers.Parser.sphinx","title":"sphinx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sphinx = 'sphinx'\n</code></pre> <p>Sphinx-style docstrings parser.</p>"},{"location":"reference/griffe/docstrings/parsers/#griffe.docstrings.parsers.parse","title":"parse","text":"<pre><code>parse(\n    docstring: Docstring,\n    parser: Literal[\"google\", \"numpy\", \"sphinx\"]\n    | Parser\n    | None,\n    **options: Any\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse the docstring.</p> <p>Parameters:</p> <ul> <li> docstring             (<code>Docstring</code>)         \u2013          <p>The docstring to parse.</p> </li> <li> parser             (<code>Literal['google', 'numpy', 'sphinx'] | Parser | None</code>)         \u2013          <p>The docstring parser to use. If None, return a single text section.</p> </li> <li> **options             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>The options accepted by the parser.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>         \u2013          <p>A list of docstring sections.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/sphinx/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> sphinx","text":""},{"location":"reference/griffe/docstrings/sphinx/#griffe.docstrings.sphinx","title":"sphinx","text":"<p>This module defines functions to parse Sphinx docstrings into structured data.</p> <p>Credits to Patrick Lannigan (@plannigan) who originally added the parser in the pytkdocs project. See https://github.com/mkdocstrings/pytkdocs/pull/71.</p> <p>Classes:</p> <ul> <li> FieldType         \u2013          <p>Maps directive names to parser functions.</p> </li> <li> ParsedDirective         \u2013          <p>Directive information that has been parsed from a docstring.</p> </li> <li> ParsedValues         \u2013          <p>Values parsed from the docstring to be used to produce sections.</p> </li> </ul> <p>Functions:</p> <ul> <li> parse           \u2013            <p>Parse a Sphinx-styled docstring.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/sphinx/#griffe.docstrings.sphinx.FieldType","title":"FieldType  <code>dataclass</code>","text":"<p>Maps directive names to parser functions.</p> <p>Methods:</p> <ul> <li> matches           \u2013            <p>Check if a line matches the field type.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/sphinx/#griffe.docstrings.sphinx.FieldType.matches","title":"matches","text":"<pre><code>matches(line: str) -&gt; bool\n</code></pre> <p>Check if a line matches the field type.</p> <p>Parameters:</p> <ul> <li> line             (<code>str</code>)         \u2013          <p>Line to check against</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the line matches the field type, False otherwise.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/sphinx/#griffe.docstrings.sphinx.ParsedDirective","title":"ParsedDirective  <code>dataclass</code>","text":"<p>Directive information that has been parsed from a docstring.</p>"},{"location":"reference/griffe/docstrings/sphinx/#griffe.docstrings.sphinx.ParsedValues","title":"ParsedValues  <code>dataclass</code>","text":"<p>Values parsed from the docstring to be used to produce sections.</p>"},{"location":"reference/griffe/docstrings/sphinx/#griffe.docstrings.sphinx.parse","title":"parse","text":"<pre><code>parse(\n    docstring: Docstring, **options: Any\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse a Sphinx-styled docstring.</p> <p>Parameters:</p> <ul> <li> docstring             (<code>Docstring</code>)         \u2013          <p>The docstring to parse.</p> </li> <li> **options             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>         \u2013          <p>A list of docstring sections.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/utils/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utils","text":""},{"location":"reference/griffe/docstrings/utils/#griffe.docstrings.utils","title":"utils","text":"<p>This module contains utilities for docstrings parsers.</p> <p>Functions:</p> <ul> <li> parse_annotation           \u2013            <p>Parse a string into a true name or expression that can be resolved later.</p> </li> <li> warning           \u2013            <p>Create and return a warn function.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/utils/#griffe.docstrings.utils.parse_annotation","title":"parse_annotation","text":"<pre><code>parse_annotation(\n    annotation: str,\n    docstring: Docstring,\n    log_level: LogLevel = LogLevel.error,\n) -&gt; str | Expr\n</code></pre> <p>Parse a string into a true name or expression that can be resolved later.</p> <p>Parameters:</p> <ul> <li> annotation             (<code>str</code>)         \u2013          <p>The annotation to parse.</p> </li> <li> docstring             (<code>Docstring</code>)         \u2013          <p>The docstring in which the annotation appears. The docstring's parent is accessed to bind a resolver to the resulting name/expression.</p> </li> <li> log_level             (<code>LogLevel</code>, default:                 <code>error</code> )         \u2013          <p>Log level to use to log a message.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | Expr</code>         \u2013          <p>The string unchanged, or a new name or expression.</p> </li> </ul>"},{"location":"reference/griffe/docstrings/utils/#griffe.docstrings.utils.warning","title":"warning","text":"<pre><code>warning(name: str) -&gt; WarningCallable\n</code></pre> <p>Create and return a warn function.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The logger name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>WarningCallable</code>         \u2013          <p>A function used to log parsing warnings.</p> </li> </ul> <p>This function logs a warning message by prefixing it with the filepath and line number.</p> <p>Parameters of the returned function:</p> <ul> <li> docstring             (<code>Docstring</code>)         \u2013          <p>The docstring object.</p> </li> <li> offset             (<code>int</code>)         \u2013          <p>The offset in the docstring lines.</p> </li> <li> message             (<code>str</code>)         \u2013          <p>The message to log.</p> </li> </ul>"},{"location":"reference/griffe/extensions/","title":"Index","text":""},{"location":"reference/griffe/extensions/#griffe.extensions","title":"extensions","text":"<p>This module is the public interface to import elements from the base.</p> <p>Modules:</p> <ul> <li> base         \u2013          <p>This module contains the base classes for dealing with extensions.</p> </li> <li> hybrid         \u2013          <p>Deprecated. This extension provides an hybrid behavior while loading data.</p> </li> </ul> <p>Classes:</p> <ul> <li> Extension         \u2013          <p>Base class for Griffe extensions.</p> </li> <li> Extensions         \u2013          <p>This class helps iterating on extensions that should run at different times.</p> </li> <li> InspectorExtension         \u2013          <p>Deprecated in favor of <code>Extension</code>. The object inspector extension base class, to inherit from.</p> </li> <li> VisitorExtension         \u2013          <p>Deprecated in favor of <code>Extension</code>. The node visitor extension base class, to inherit from.</p> </li> <li> When         \u2013          <p>Enumeration of the different times at which an extension is used.</p> </li> </ul> <p>Functions:</p> <ul> <li> load_extensions           \u2013            <p>Load configured extensions.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension","title":"Extension","text":"<p>Base class for Griffe extensions.</p> <p>Methods:</p> <ul> <li> generic_inspect           \u2013            <p>Extend the base generic inspection with extensions.</p> </li> <li> generic_visit           \u2013            <p>Visit children nodes.</p> </li> <li> inspect           \u2013            <p>Inspect a node.</p> </li> <li> on_attribute_instance           \u2013            <p>Run when an Attribute has been created.</p> </li> <li> on_attribute_node           \u2013            <p>Run when visiting a new attribute node during static/dynamic analysis.</p> </li> <li> on_class_instance           \u2013            <p>Run when a Class has been created.</p> </li> <li> on_class_members           \u2013            <p>Run when members of a Class have been loaded.</p> </li> <li> on_class_node           \u2013            <p>Run when visiting a new class node during static/dynamic analysis.</p> </li> <li> on_function_instance           \u2013            <p>Run when a Function has been created.</p> </li> <li> on_function_node           \u2013            <p>Run when visiting a new function node during static/dynamic analysis.</p> </li> <li> on_instance           \u2013            <p>Run when an Object has been created.</p> </li> <li> on_members           \u2013            <p>Run when members of an Object have been loaded.</p> </li> <li> on_module_instance           \u2013            <p>Run when a Module has been created.</p> </li> <li> on_module_members           \u2013            <p>Run when members of a Module have been loaded.</p> </li> <li> on_module_node           \u2013            <p>Run when visiting a new module node during static/dynamic analysis.</p> </li> <li> on_node           \u2013            <p>Run when visiting a new node during static/dynamic analysis.</p> </li> <li> visit           \u2013            <p>Visit a node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.generic_inspect","title":"generic_inspect","text":"<pre><code>generic_inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base generic inspection with extensions.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.generic_visit","title":"generic_visit","text":"<pre><code>generic_visit(node: AST) -&gt; None\n</code></pre> <p>Visit children nodes.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit the children of.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_attribute_instance","title":"on_attribute_instance","text":"<pre><code>on_attribute_instance(\n    *, node: AST | ObjectNode, attr: Attribute\n) -&gt; None\n</code></pre> <p>Run when an Attribute has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> attr             (<code>Attribute</code>)         \u2013          <p>The attribute instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_attribute_node","title":"on_attribute_node","text":"<pre><code>on_attribute_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new attribute node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_class_instance","title":"on_class_instance","text":"<pre><code>on_class_instance(\n    *, node: AST | ObjectNode, cls: Class\n) -&gt; None\n</code></pre> <p>Run when a Class has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> cls             (<code>Class</code>)         \u2013          <p>The class instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_class_members","title":"on_class_members","text":"<pre><code>on_class_members(\n    *, node: AST | ObjectNode, cls: Class\n) -&gt; None\n</code></pre> <p>Run when members of a Class have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> cls             (<code>Class</code>)         \u2013          <p>The class instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_class_node","title":"on_class_node","text":"<pre><code>on_class_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new class node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_function_instance","title":"on_function_instance","text":"<pre><code>on_function_instance(\n    *, node: AST | ObjectNode, func: Function\n) -&gt; None\n</code></pre> <p>Run when a Function has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> func             (<code>Function</code>)         \u2013          <p>The function instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_function_node","title":"on_function_node","text":"<pre><code>on_function_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new function node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_instance","title":"on_instance","text":"<pre><code>on_instance(*, node: AST | ObjectNode, obj: Object) -&gt; None\n</code></pre> <p>Run when an Object has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> obj             (<code>Object</code>)         \u2013          <p>The object instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_members","title":"on_members","text":"<pre><code>on_members(*, node: AST | ObjectNode, obj: Object) -&gt; None\n</code></pre> <p>Run when members of an Object have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> obj             (<code>Object</code>)         \u2013          <p>The object instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_module_instance","title":"on_module_instance","text":"<pre><code>on_module_instance(\n    *, node: AST | ObjectNode, mod: Module\n) -&gt; None\n</code></pre> <p>Run when a Module has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> mod             (<code>Module</code>)         \u2013          <p>The module instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_module_members","title":"on_module_members","text":"<pre><code>on_module_members(\n    *, node: AST | ObjectNode, mod: Module\n) -&gt; None\n</code></pre> <p>Run when members of a Module have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> mod             (<code>Module</code>)         \u2013          <p>The module instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_module_node","title":"on_module_node","text":"<pre><code>on_module_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new module node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.on_node","title":"on_node","text":"<pre><code>on_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extension.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Visit a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions","title":"Extensions","text":"<pre><code>Extensions(*extensions: ExtensionType)\n</code></pre> <p>This class helps iterating on extensions that should run at different times.</p> <p>Parameters:</p> <ul> <li> *extensions             (<code>ExtensionType</code>, default:                 <code>()</code> )         \u2013          <p>The extensions to add.</p> </li> </ul> <p>Methods:</p> <ul> <li> add           \u2013            <p>Add extensions to this container.</p> </li> <li> attach_inspector           \u2013            <p>Attach a parent inspector to the inspector extensions.</p> </li> <li> attach_visitor           \u2013            <p>Attach a parent visitor to the visitor extensions.</p> </li> <li> call           \u2013            <p>Call the extension hook for the given event.</p> </li> </ul> <p>Attributes:</p> <ul> <li> after_children_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run after the children inspection.</p> </li> <li> after_children_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run after the children visit.</p> </li> <li> after_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run after the inspection.</p> </li> <li> after_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run after the visit.</p> </li> <li> before_children_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run before the children inspection.</p> </li> <li> before_children_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run before the children visit.</p> </li> <li> before_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run before the inspection.</p> </li> <li> before_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run before the visit.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.after_children_inspection","title":"after_children_inspection  <code>property</code>","text":"<pre><code>after_children_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run after the children inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.after_children_visit","title":"after_children_visit  <code>property</code>","text":"<pre><code>after_children_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run after the children visit.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.after_inspection","title":"after_inspection  <code>property</code>","text":"<pre><code>after_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run after the inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.after_visit","title":"after_visit  <code>property</code>","text":"<pre><code>after_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run after the visit.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.before_children_inspection","title":"before_children_inspection  <code>property</code>","text":"<pre><code>before_children_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run before the children inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.before_children_visit","title":"before_children_visit  <code>property</code>","text":"<pre><code>before_children_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run before the children visit.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.before_inspection","title":"before_inspection  <code>property</code>","text":"<pre><code>before_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run before the inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.before_visit","title":"before_visit  <code>property</code>","text":"<pre><code>before_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run before the visit.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.add","title":"add","text":"<pre><code>add(*extensions: ExtensionType) -&gt; None\n</code></pre> <p>Add extensions to this container.</p> <p>Parameters:</p> <ul> <li> *extensions             (<code>ExtensionType</code>, default:                 <code>()</code> )         \u2013          <p>The extensions to add.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.attach_inspector","title":"attach_inspector","text":"<pre><code>attach_inspector(parent_inspector: Inspector) -&gt; Extensions\n</code></pre> <p>Attach a parent inspector to the inspector extensions.</p> <p>Parameters:</p> <ul> <li> parent_inspector             (<code>Inspector</code>)         \u2013          <p>The parent inspector, leading the inspection.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Extensions</code>         \u2013          <p>Self, conveniently.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.attach_visitor","title":"attach_visitor","text":"<pre><code>attach_visitor(parent_visitor: Visitor) -&gt; Extensions\n</code></pre> <p>Attach a parent visitor to the visitor extensions.</p> <p>Parameters:</p> <ul> <li> parent_visitor             (<code>Visitor</code>)         \u2013          <p>The parent visitor, leading the visit.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Extensions</code>         \u2013          <p>Self, conveniently.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.Extensions.call","title":"call","text":"<pre><code>call(\n    event: str, *, node: AST | ObjectNode, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Call the extension hook for the given event.</p> <p>Parameters:</p> <ul> <li> event             (<code>str</code>)         \u2013          <p>The trigerred event.</p> </li> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The AST or Object node.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional arguments like a Griffe object.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.InspectorExtension","title":"InspectorExtension","text":"<pre><code>InspectorExtension()\n</code></pre> <p>Deprecated in favor of <code>Extension</code>. The object inspector extension base class, to inherit from.</p> <p>Methods:</p> <ul> <li> attach           \u2013            <p>Attach the parent inspector to this extension.</p> </li> <li> inspect           \u2013            <p>Inspect a node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.InspectorExtension.attach","title":"attach","text":"<pre><code>attach(inspector: Inspector) -&gt; None\n</code></pre> <p>Attach the parent inspector to this extension.</p> <p>Parameters:</p> <ul> <li> inspector             (<code>Inspector</code>)         \u2013          <p>The parent inspector.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.InspectorExtension.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.VisitorExtension","title":"VisitorExtension","text":"<pre><code>VisitorExtension()\n</code></pre> <p>Deprecated in favor of <code>Extension</code>. The node visitor extension base class, to inherit from.</p> <p>Methods:</p> <ul> <li> attach           \u2013            <p>Attach the parent visitor to this extension.</p> </li> <li> visit           \u2013            <p>Visit a node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.VisitorExtension.attach","title":"attach","text":"<pre><code>attach(visitor: Visitor) -&gt; None\n</code></pre> <p>Attach the parent visitor to this extension.</p> <p>Parameters:</p> <ul> <li> visitor             (<code>Visitor</code>)         \u2013          <p>The parent visitor.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.VisitorExtension.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Visit a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.When","title":"When","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different times at which an extension is used.</p> <p>Attributes:</p> <ul> <li> after_all             (<code>int</code>)         \u2013          <p>For each node, after the visit/inspection.</p> </li> <li> after_children             (<code>int</code>)         \u2013          <p>For each node, after the children have been visited/inspected, and before finishing the visit/inspection.</p> </li> <li> before_all             (<code>int</code>)         \u2013          <p>For each node, before the visit/inspection.</p> </li> <li> before_children             (<code>int</code>)         \u2013          <p>For each node, after the visit has started, and before the children visit/inspection.</p> </li> </ul>"},{"location":"reference/griffe/extensions/#griffe.extensions.When.after_all","title":"after_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>after_all: int = 4\n</code></pre> <p>For each node, after the visit/inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.When.after_children","title":"after_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>after_children: int = 3\n</code></pre> <p>For each node, after the children have been visited/inspected, and before finishing the visit/inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.When.before_all","title":"before_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>before_all: int = 1\n</code></pre> <p>For each node, before the visit/inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.When.before_children","title":"before_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>before_children: int = 2\n</code></pre> <p>For each node, after the visit has started, and before the children visit/inspection.</p>"},{"location":"reference/griffe/extensions/#griffe.extensions.load_extensions","title":"load_extensions","text":"<pre><code>load_extensions(\n    exts: Sequence[\n        str\n        | dict[str, Any]\n        | ExtensionType\n        | type[ExtensionType]\n    ]\n) -&gt; Extensions\n</code></pre> <p>Load configured extensions.</p> <p>Parameters:</p> <ul> <li> exts             (<code>Sequence[str | dict[str, Any] | ExtensionType | type[ExtensionType]]</code>)         \u2013          <p>A sequence of extension, with potential configuration options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Extensions</code>         \u2013          <p>An extensions container.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/griffe/extensions/base/#griffe.extensions.base","title":"base","text":"<p>This module contains the base classes for dealing with extensions.</p> <p>Classes:</p> <ul> <li> Extension         \u2013          <p>Base class for Griffe extensions.</p> </li> <li> Extensions         \u2013          <p>This class helps iterating on extensions that should run at different times.</p> </li> <li> InspectorExtension         \u2013          <p>Deprecated in favor of <code>Extension</code>. The object inspector extension base class, to inherit from.</p> </li> <li> VisitorExtension         \u2013          <p>Deprecated in favor of <code>Extension</code>. The node visitor extension base class, to inherit from.</p> </li> <li> When         \u2013          <p>Enumeration of the different times at which an extension is used.</p> </li> </ul> <p>Functions:</p> <ul> <li> load_extensions           \u2013            <p>Load configured extensions.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension","title":"Extension","text":"<p>Base class for Griffe extensions.</p> <p>Methods:</p> <ul> <li> generic_inspect           \u2013            <p>Extend the base generic inspection with extensions.</p> </li> <li> generic_visit           \u2013            <p>Visit children nodes.</p> </li> <li> inspect           \u2013            <p>Inspect a node.</p> </li> <li> on_attribute_instance           \u2013            <p>Run when an Attribute has been created.</p> </li> <li> on_attribute_node           \u2013            <p>Run when visiting a new attribute node during static/dynamic analysis.</p> </li> <li> on_class_instance           \u2013            <p>Run when a Class has been created.</p> </li> <li> on_class_members           \u2013            <p>Run when members of a Class have been loaded.</p> </li> <li> on_class_node           \u2013            <p>Run when visiting a new class node during static/dynamic analysis.</p> </li> <li> on_function_instance           \u2013            <p>Run when a Function has been created.</p> </li> <li> on_function_node           \u2013            <p>Run when visiting a new function node during static/dynamic analysis.</p> </li> <li> on_instance           \u2013            <p>Run when an Object has been created.</p> </li> <li> on_members           \u2013            <p>Run when members of an Object have been loaded.</p> </li> <li> on_module_instance           \u2013            <p>Run when a Module has been created.</p> </li> <li> on_module_members           \u2013            <p>Run when members of a Module have been loaded.</p> </li> <li> on_module_node           \u2013            <p>Run when visiting a new module node during static/dynamic analysis.</p> </li> <li> on_node           \u2013            <p>Run when visiting a new node during static/dynamic analysis.</p> </li> <li> visit           \u2013            <p>Visit a node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.generic_inspect","title":"generic_inspect","text":"<pre><code>generic_inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base generic inspection with extensions.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.generic_visit","title":"generic_visit","text":"<pre><code>generic_visit(node: AST) -&gt; None\n</code></pre> <p>Visit children nodes.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit the children of.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_attribute_instance","title":"on_attribute_instance","text":"<pre><code>on_attribute_instance(\n    *, node: AST | ObjectNode, attr: Attribute\n) -&gt; None\n</code></pre> <p>Run when an Attribute has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> attr             (<code>Attribute</code>)         \u2013          <p>The attribute instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_attribute_node","title":"on_attribute_node","text":"<pre><code>on_attribute_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new attribute node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_class_instance","title":"on_class_instance","text":"<pre><code>on_class_instance(\n    *, node: AST | ObjectNode, cls: Class\n) -&gt; None\n</code></pre> <p>Run when a Class has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> cls             (<code>Class</code>)         \u2013          <p>The class instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_class_members","title":"on_class_members","text":"<pre><code>on_class_members(\n    *, node: AST | ObjectNode, cls: Class\n) -&gt; None\n</code></pre> <p>Run when members of a Class have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> cls             (<code>Class</code>)         \u2013          <p>The class instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_class_node","title":"on_class_node","text":"<pre><code>on_class_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new class node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_function_instance","title":"on_function_instance","text":"<pre><code>on_function_instance(\n    *, node: AST | ObjectNode, func: Function\n) -&gt; None\n</code></pre> <p>Run when a Function has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> func             (<code>Function</code>)         \u2013          <p>The function instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_function_node","title":"on_function_node","text":"<pre><code>on_function_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new function node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_instance","title":"on_instance","text":"<pre><code>on_instance(*, node: AST | ObjectNode, obj: Object) -&gt; None\n</code></pre> <p>Run when an Object has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> obj             (<code>Object</code>)         \u2013          <p>The object instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_members","title":"on_members","text":"<pre><code>on_members(*, node: AST | ObjectNode, obj: Object) -&gt; None\n</code></pre> <p>Run when members of an Object have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> obj             (<code>Object</code>)         \u2013          <p>The object instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_module_instance","title":"on_module_instance","text":"<pre><code>on_module_instance(\n    *, node: AST | ObjectNode, mod: Module\n) -&gt; None\n</code></pre> <p>Run when a Module has been created.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> mod             (<code>Module</code>)         \u2013          <p>The module instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_module_members","title":"on_module_members","text":"<pre><code>on_module_members(\n    *, node: AST | ObjectNode, mod: Module\n) -&gt; None\n</code></pre> <p>Run when members of a Module have been loaded.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> <li> mod             (<code>Module</code>)         \u2013          <p>The module instance.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_module_node","title":"on_module_node","text":"<pre><code>on_module_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new module node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.on_node","title":"on_node","text":"<pre><code>on_node(*, node: AST | ObjectNode) -&gt; None\n</code></pre> <p>Run when visiting a new node during static/dynamic analysis.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The currently visited node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extension.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Visit a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions","title":"Extensions","text":"<pre><code>Extensions(*extensions: ExtensionType)\n</code></pre> <p>This class helps iterating on extensions that should run at different times.</p> <p>Parameters:</p> <ul> <li> *extensions             (<code>ExtensionType</code>, default:                 <code>()</code> )         \u2013          <p>The extensions to add.</p> </li> </ul> <p>Methods:</p> <ul> <li> add           \u2013            <p>Add extensions to this container.</p> </li> <li> attach_inspector           \u2013            <p>Attach a parent inspector to the inspector extensions.</p> </li> <li> attach_visitor           \u2013            <p>Attach a parent visitor to the visitor extensions.</p> </li> <li> call           \u2013            <p>Call the extension hook for the given event.</p> </li> </ul> <p>Attributes:</p> <ul> <li> after_children_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run after the children inspection.</p> </li> <li> after_children_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run after the children visit.</p> </li> <li> after_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run after the inspection.</p> </li> <li> after_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run after the visit.</p> </li> <li> before_children_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run before the children inspection.</p> </li> <li> before_children_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run before the children visit.</p> </li> <li> before_inspection             (<code>list[InspectorExtension]</code>)         \u2013          <p>The inspectors that run before the inspection.</p> </li> <li> before_visit             (<code>list[VisitorExtension]</code>)         \u2013          <p>The visitors that run before the visit.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.after_children_inspection","title":"after_children_inspection  <code>property</code>","text":"<pre><code>after_children_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run after the children inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.after_children_visit","title":"after_children_visit  <code>property</code>","text":"<pre><code>after_children_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run after the children visit.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.after_inspection","title":"after_inspection  <code>property</code>","text":"<pre><code>after_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run after the inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.after_visit","title":"after_visit  <code>property</code>","text":"<pre><code>after_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run after the visit.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.before_children_inspection","title":"before_children_inspection  <code>property</code>","text":"<pre><code>before_children_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run before the children inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.before_children_visit","title":"before_children_visit  <code>property</code>","text":"<pre><code>before_children_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run before the children visit.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.before_inspection","title":"before_inspection  <code>property</code>","text":"<pre><code>before_inspection: list[InspectorExtension]\n</code></pre> <p>The inspectors that run before the inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.before_visit","title":"before_visit  <code>property</code>","text":"<pre><code>before_visit: list[VisitorExtension]\n</code></pre> <p>The visitors that run before the visit.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.add","title":"add","text":"<pre><code>add(*extensions: ExtensionType) -&gt; None\n</code></pre> <p>Add extensions to this container.</p> <p>Parameters:</p> <ul> <li> *extensions             (<code>ExtensionType</code>, default:                 <code>()</code> )         \u2013          <p>The extensions to add.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.attach_inspector","title":"attach_inspector","text":"<pre><code>attach_inspector(parent_inspector: Inspector) -&gt; Extensions\n</code></pre> <p>Attach a parent inspector to the inspector extensions.</p> <p>Parameters:</p> <ul> <li> parent_inspector             (<code>Inspector</code>)         \u2013          <p>The parent inspector, leading the inspection.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Extensions</code>         \u2013          <p>Self, conveniently.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.attach_visitor","title":"attach_visitor","text":"<pre><code>attach_visitor(parent_visitor: Visitor) -&gt; Extensions\n</code></pre> <p>Attach a parent visitor to the visitor extensions.</p> <p>Parameters:</p> <ul> <li> parent_visitor             (<code>Visitor</code>)         \u2013          <p>The parent visitor, leading the visit.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Extensions</code>         \u2013          <p>Self, conveniently.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.Extensions.call","title":"call","text":"<pre><code>call(\n    event: str, *, node: AST | ObjectNode, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Call the extension hook for the given event.</p> <p>Parameters:</p> <ul> <li> event             (<code>str</code>)         \u2013          <p>The trigerred event.</p> </li> <li> node             (<code>AST | ObjectNode</code>)         \u2013          <p>The AST or Object node.</p> </li> <li> **kwargs             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional arguments like a Griffe object.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.InspectorExtension","title":"InspectorExtension","text":"<pre><code>InspectorExtension()\n</code></pre> <p>Deprecated in favor of <code>Extension</code>. The object inspector extension base class, to inherit from.</p> <p>Methods:</p> <ul> <li> attach           \u2013            <p>Attach the parent inspector to this extension.</p> </li> <li> inspect           \u2013            <p>Inspect a node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.InspectorExtension.attach","title":"attach","text":"<pre><code>attach(inspector: Inspector) -&gt; None\n</code></pre> <p>Attach the parent inspector to this extension.</p> <p>Parameters:</p> <ul> <li> inspector             (<code>Inspector</code>)         \u2013          <p>The parent inspector.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.InspectorExtension.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>ObjectNode</code>)         \u2013          <p>The node to inspect.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.VisitorExtension","title":"VisitorExtension","text":"<pre><code>VisitorExtension()\n</code></pre> <p>Deprecated in favor of <code>Extension</code>. The node visitor extension base class, to inherit from.</p> <p>Methods:</p> <ul> <li> attach           \u2013            <p>Attach the parent visitor to this extension.</p> </li> <li> visit           \u2013            <p>Visit a node.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.VisitorExtension.attach","title":"attach","text":"<pre><code>attach(visitor: Visitor) -&gt; None\n</code></pre> <p>Attach the parent visitor to this extension.</p> <p>Parameters:</p> <ul> <li> visitor             (<code>Visitor</code>)         \u2013          <p>The parent visitor.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.VisitorExtension.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Visit a node.</p> <p>Parameters:</p> <ul> <li> node             (<code>AST</code>)         \u2013          <p>The node to visit.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.When","title":"When","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the different times at which an extension is used.</p> <p>Attributes:</p> <ul> <li> after_all             (<code>int</code>)         \u2013          <p>For each node, after the visit/inspection.</p> </li> <li> after_children             (<code>int</code>)         \u2013          <p>For each node, after the children have been visited/inspected, and before finishing the visit/inspection.</p> </li> <li> before_all             (<code>int</code>)         \u2013          <p>For each node, before the visit/inspection.</p> </li> <li> before_children             (<code>int</code>)         \u2013          <p>For each node, after the visit has started, and before the children visit/inspection.</p> </li> </ul>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.When.after_all","title":"after_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>after_all: int = 4\n</code></pre> <p>For each node, after the visit/inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.When.after_children","title":"after_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>after_children: int = 3\n</code></pre> <p>For each node, after the children have been visited/inspected, and before finishing the visit/inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.When.before_all","title":"before_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>before_all: int = 1\n</code></pre> <p>For each node, before the visit/inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.When.before_children","title":"before_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>before_children: int = 2\n</code></pre> <p>For each node, after the visit has started, and before the children visit/inspection.</p>"},{"location":"reference/griffe/extensions/base/#griffe.extensions.base.load_extensions","title":"load_extensions","text":"<pre><code>load_extensions(\n    exts: Sequence[\n        str\n        | dict[str, Any]\n        | ExtensionType\n        | type[ExtensionType]\n    ]\n) -&gt; Extensions\n</code></pre> <p>Load configured extensions.</p> <p>Parameters:</p> <ul> <li> exts             (<code>Sequence[str | dict[str, Any] | ExtensionType | type[ExtensionType]]</code>)         \u2013          <p>A sequence of extension, with potential configuration options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Extensions</code>         \u2013          <p>An extensions container.</p> </li> </ul>"},{"location":"reference/griffe/extensions/hybrid/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> hybrid","text":""},{"location":"reference/griffe/extensions/hybrid/#griffe.extensions.hybrid","title":"hybrid","text":"<p>Deprecated. This extension provides an hybrid behavior while loading data.</p> <p>Classes:</p> <ul> <li> HybridExtension         \u2013          <p>Inspect during a visit.</p> </li> </ul>"},{"location":"reference/griffe/extensions/hybrid/#griffe.extensions.hybrid.HybridExtension","title":"HybridExtension","text":"<pre><code>HybridExtension(\n    extensions: Sequence[\n        str\n        | dict[str, Any]\n        | InspectorExtension\n        | type[InspectorExtension]\n    ],\n    object_paths: Sequence[str | Pattern] | None = None,\n)\n</code></pre> <p>             Bases: <code>VisitorExtension</code></p> <p>Inspect during a visit.</p> <p>This extension accepts the name of another extension (an inspector) and runs it appropriately. It allows to inspect objects after having visited them, so as to extract more data.</p> <p>Indeed, during the visit, an object might be seen as a simple attribute (assignment), when in fact it's a function or a class dynamically constructed. In this case, inspecting it will provide the desired data.</p> <p>Parameters:</p> <ul> <li> extensions             (<code>Sequence[str | dict[str, Any] | InspectorExtension | type[InspectorExtension]]</code>)         \u2013          <p>The names or configurations of other inspector extensions.</p> </li> <li> object_paths             (<code>Sequence[str | Pattern] | None</code>, default:                 <code>None</code> )         \u2013          <p>Optional list of regular expressions to match against objects paths, to select which objects to inspect.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ExtensionError</code>           \u2013          <p>When the passed extension is not an inspector extension.</p> </li> </ul> <p>Methods:</p> <ul> </ul>"},{"location":"coverage/","title":"Coverage report","text":""}]}